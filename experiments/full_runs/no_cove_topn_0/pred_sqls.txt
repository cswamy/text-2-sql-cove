SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'French';
SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)
SELECT s."Name", s."Song_release_year" FROM singer s WHERE s."Age" = (SELECT MIN("Age") FROM singer)
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;
SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;
SELECT s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer")
SELECT s."Song_Name" FROM "singer" s WHERE s."Age" > (SELECT AVG("Age") FROM "singer")
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;
SELECT MAX(Capacity), AVG(Capacity) FROM stadium;
SELECT AVG(Capacity), MAX(Capacity) FROM stadium;
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(Average) FROM stadium)
SELECT s.Name, s.Capacity FROM stadium s WHERE s.Average = (SELECT MAX(Average) FROM stadium)
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';
SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT s."Stadium_ID", s."Name", COUNT(c."concert_ID") AS "Number_of_Concerts" FROM "stadium" s JOIN "concert" c ON s."Stadium_ID" = c."Stadium_ID" GROUP BY s."Stadium_ID", s."Name";
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity HAVING COUNT(c.concert_ID) = (   SELECT MAX(concert_count)   FROM (     SELECT COUNT(c2.concert_ID) as concert_count     FROM stadium s2     JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID     WHERE c2.Year >= '2014'     GROUP BY s2.Stadium_ID   ) );
SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID HAVING COUNT(c.concert_ID) = (   SELECT MAX(concert_count)   FROM (     SELECT COUNT(c2.concert_ID) as concert_count     FROM stadium s2     JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID     WHERE c2.Year > '2013'     GROUP BY s2.Stadium_ID   ) );
SELECT Year, COUNT(*) AS Num_Concerts FROM concert GROUP BY Year ORDER BY Num_Concerts DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (   SELECT MAX(concert_count)   FROM (     SELECT Year, COUNT(*) as concert_count     FROM concert     GROUP BY Year   ) )
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;
SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;
SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = '2014' );
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = '2014' );
SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';
SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT singer_in_concert.Singer_ID   FROM singer_in_concert   JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID   JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID   WHERE concert.concert_ID IN (     SELECT concert.concert_ID     FROM concert     JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID     JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID     WHERE singer.Song_Name LIKE '%Hey%'   ) );
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015';
SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015';
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1);
SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 );
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT MIN(p.weight) FROM Pets p WHERE p.PetType = 'dog';
SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';
SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;
SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';
SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'female' AND Pets.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS num_distinct_pets FROM Pets;
SELECT COUNT(DISTINCT PetType) AS num_pet_types FROM Pets;
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' INTERSECT SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog';
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';
SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet HP   INNER JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'cat' );
SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet HP   JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'Cat' );
SELECT DISTINCT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;
SELECT DISTINCT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'Cat' OR Pets.PetType IS NULL;
SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (   SELECT S.StuID   FROM Student S   JOIN Has_Pet HP ON S.StuID = HP.StuID   JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'cat' );
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' );
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;
SELECT Student.Fname, Student.Age FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT S.Fname, S.Age FROM Student S INNER JOIN Has_Pet HP ON S.StuID = HP.StuID;
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;
SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.StuID, S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;
SELECT COUNT(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.FullName, cm.Id;
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;
SELECT Model FROM model_list WHERE ModelId = (   SELECT MakeId   FROM cars_data   WHERE Horsepower = (     SELECT MIN(Horsepower)     FROM cars_data   ) );
SELECT m.Model FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list m ON n.Model = m.Model WHERE c.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)
SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT m.Model FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list m ON n.Model = m.Model WHERE c.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT car_makers.Maker, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);
SELECT cm.Maker, cd.Year FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data)
SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;
SELECT DISTINCT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;
SELECT c.Continent, COUNT(cm.Id) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';
SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_names.Make = 'hornet sportabout (sw)';
SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france';
SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';
SELECT COUNT(DISTINCT m.ModelId) AS TotalCarModels FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';
SELECT COUNT(DISTINCT m.ModelId) FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'United States';
SELECT AVG(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id WHERE c.Cylinders = 4;
SELECT AVG(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id WHERE c.Cylinders = 4;
SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;
SELECT cm."Maker", ml."Model" FROM "car_makers" cm JOIN "model_list" ml ON cm."Id" = ml."Maker"
SELECT cm."Maker", ml."Model" FROM "car_makers" cm JOIN "model_list" ml ON cm."Id" = ml."Maker"
SELECT c."CountryId", c."CountryName" FROM "countries" c INNER JOIN "car_makers" cm ON c."CountryId" = cm."Country"
SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS AverageWeight, AVG(Year) AS AverageYear FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3 AND c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe');
SELECT MAX(cd.Horsepower), cm.Maker FROM cars_data cd JOIN model_list ml ON cd.Id = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Cylinders = 3 GROUP BY cm.Maker;
SELECT c."Make", MAX(cd."Horsepower") AS "MaxHorsepower" FROM car_makers c JOIN model_list ml ON c."Id" = ml."Maker" JOIN car_names cn ON ml."ModelId" = cn."MakeId" JOIN cars_data cd ON cn."Model" = cd."Model" WHERE cd."Cylinders" = 3 GROUP BY c."Make"
SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data)
SELECT Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY CAST(cars_data.MPG AS INTEGER) DESC LIMIT 1;
SELECT AVG(Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE Year < 1980;
SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;
SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo';
SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE co.CountryName = 'Sweden' AND cm.Maker = 'Volvo';
SELECT cylinders, MAX(accelerate) AS max_accelerate FROM cars_data GROUP BY cylinders;
SELECT MAX(c.Accelerate) AS Max_Accelerate FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId JOIN continents ct ON co.Continent = ct.ContId GROUP BY c.Cylinders;
SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model GROUP BY m.Model HAVING COUNT(DISTINCT cn.Make) = (   SELECT MAX(make_count)   FROM (     SELECT COUNT(DISTINCT cn.Make) AS make_count     FROM model_list m     JOIN car_names cn ON m.ModelId = cn.Model     GROUP BY m.Model   ) );
SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model GROUP BY m.Model ORDER BY COUNT(DISTINCT cn.Make) DESC LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';
SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';
SELECT cm."FullName", cm."Id" FROM "car_makers" cm JOIN (   SELECT "Maker", COUNT(*) AS num_models   FROM "model_list"   GROUP BY "Maker"   HAVING num_models > 3 ) m ON cm."Id" = m."Maker";
SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;
SELECT DISTINCT m.Model FROM car_makers cm JOIN model_list m ON cm.Id = m.Maker JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;
SELECT DISTINCT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN cars_data cd ON cd.Id = m.ModelId WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT c1.Year FROM cars_data c1 WHERE c1.Weight < 4000 INTERSECT SELECT DISTINCT c2.Year FROM cars_data c2 WHERE c2.Weight > 3000;
SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT MIN(c.Cylinders) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo'
SELECT MIN(c.Cylinders) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'volvo'
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Accelerate)   FROM cars_data   WHERE Horsepower = (     SELECT MAX(Horsepower)     FROM cars_data   ) );
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Accelerate)   FROM cars_data   WHERE Horsepower = (     SELECT MAX(Horsepower)     FROM cars_data   ) );
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2;
SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;
SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT c."MakeId", cn."Make" FROM cars_data cd JOIN car_names cn ON cd."Id" = cn."MakeId" JOIN model_list ml ON cn."Model" = ml."ModelId" JOIN car_makers cm ON ml."Maker" = cm."Id" WHERE cd."Horsepower" > (SELECT MIN("Horsepower") FROM cars_data) AND cd."Cylinders" <= 3;
SELECT DISTINCT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (   SELECT MIN(Horsepower)   FROM cars_data )
SELECT MAX(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE c.Cylinders = 8 AND c.Year < 1980;
SELECT MAX(c.MPG) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE (c.Cylinders = 8 OR c.Year < 1980)
SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < 3500 AND cm.Maker <> 'Ford Motor Company';
SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN cars_data cd ON m.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.Maker <> (SELECT Id FROM car_makers WHERE Maker = 'Ford Motor Company');
SELECT c."CountryName" FROM "countries" c LEFT JOIN "car_makers" cm ON c."CountryId" = cm."Country" WHERE cm."Id" IS NULL;
SELECT c."CountryName" FROM "countries" c LEFT JOIN "car_makers" cm ON c."CountryId" = cm."Country" WHERE cm."Id" IS NULL;
SELECT cm.Id, cm.Maker FROM car_makers cm INNER JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) >= 2 AND COUNT(DISTINCT cm.Id) > 3;
SELECT cm."Id", cm."Maker" FROM "car_makers" cm JOIN (   SELECT "Maker", COUNT(DISTINCT "Model") AS num_models   FROM "model_list"   GROUP BY "Maker"   HAVING num_models >= 2 ) m ON cm."Id" = m."Maker" JOIN (   SELECT "Maker", COUNT(*) AS num_cars   FROM "car_names"   GROUP BY "Maker"   HAVING num_cars > 3 ) c ON cm."Id" = c."Maker";
SELECT c."CountryId", c."CountryName" FROM "countries" c WHERE c."CountryId" IN (   SELECT cm."Country"   FROM "car_makers" cm   GROUP BY cm."Country"   HAVING COUNT(DISTINCT cm."Id") > 3 ) OR c."CountryId" IN (   SELECT m."Maker"   FROM "model_list" m   INNER JOIN "car_names" cn ON m."ModelId" = cn."Model"   WHERE cn."Make" = 'fiat' )
SELECT c."CountryId", c."CountryName" FROM "countries" c WHERE c."CountryId" IN (   SELECT cm."Country"   FROM "car_makers" cm   GROUP BY cm."Country"   HAVING COUNT(DISTINCT cm."Id") > 3 ) OR c."CountryId" IN (   SELECT cm."Country"   FROM "car_makers" cm   INNER JOIN "model_list" ml ON cm."Id" = ml."Maker"   INNER JOIN "car_names" cn ON ml."Model" = cn."Model"   WHERE cn."Make" = 'fiat' )
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'Jetblue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airlines;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM airports;
SELECT COUNT(*) FROM flights;
SELECT COUNT(*) FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports AS source ON flights.SourceAirport = source.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE source.City = 'Aberdeen' AND dest.City = 'Ashley';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1;
SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;
SELECT City FROM airports WHERE AirportCode = (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;
SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) as count       FROM flights       GROUP BY SourceAirport     )   ) ) OR AirportCode IN (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) as count       FROM flights       GROUP BY DestAirport     )   ) );
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (   SELECT MAX(count)   FROM (     SELECT COUNT(*) as count     FROM flights     GROUP BY Airline   ) );
SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.uid ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country HAVING COUNT(f.FlightNo) = (   SELECT MIN(cnt)   FROM (     SELECT COUNT(*) as cnt     FROM flights     GROUP BY Airline   ) );
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline JOIN airports apg ON f1.SourceAirport = apg.AirportCode JOIN airports cvo ON f2.SourceAirport = cvo.AirportCode WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports apg ON f.SourceAirport = apg.AirportCode JOIN airports cvo ON f.SourceAirport = cvo.AirportCode WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';
SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.Airline NOT IN (   SELECT a2.uid   FROM airlines a2   JOIN flights f2 ON a2.uid = f2.Airline   WHERE f2.SourceAirport = 'APG' );
SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports ap1 ON f.SourceAirport = ap1.AirportCode JOIN airports ap2 ON f.DestAirport = ap2.AirportCode WHERE ap1.City = 'CVO' AND a.Airline NOT IN (   SELECT DISTINCT a2.Airline   FROM airlines a2   JOIN flights f2 ON a2.uid = f2.Airline   JOIN airports ap3 ON f2.SourceAirport = ap3.AirportCode   JOIN airports ap4 ON f2.DestAirport = ap4.AirportCode   WHERE ap3.City = 'APG' )
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) >= 10 );
SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 );
SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 );
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'APG';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = "Aberdeen";
SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.City = "Aberdeen";
SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';
SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport   FROM flights   UNION   SELECT DestAirport   FROM flights );
SELECT AirportCode, AirportName FROM airports WHERE AirportCode NOT IN (   SELECT DISTINCT SourceAirport   FROM flights   UNION   SELECT DISTINCT DestAirport   FROM flights );
SELECT COUNT(*) FROM employee;
SELECT COUNT(*) FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(*) AS Num_Employees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;
SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;
SELECT Location, COUNT(*) AS Num_Shops FROM shop GROUP BY Location;
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)
SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;
SELECT MIN(Number_products) AS Minimum_Number_of_Products, MAX(Number_products) AS Maximum_Number_of_Products FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1;
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)
SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Shop_ID ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)
SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;
SELECT SUM(Bonus) FROM evaluation;
SELECT SUM(Bonus) FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 INTERSECT SELECT DISTINCT s.District FROM shop s WHERE s.Number_products > 10000;
SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) FROM Documents;
SELECT COUNT(*) FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';
SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%';
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = "Robbin CV";
SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT Template_ID) AS Total_Templates FROM Documents;
SELECT COUNT(DISTINCT Template_ID) AS Num_Templates FROM Documents;
SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT';
SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;
SELECT DISTINCT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(DISTINCT D.Document_ID) > 1;
SELECT DISTINCT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(DISTINCT d.Document_ID) > 1;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;
SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;
SELECT COUNT(*) FROM Templates;
SELECT COUNT(*) FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT T."Template_Type_Code", COUNT(*) AS "Number_of_Templates" FROM "Ref_Template_Types" AS T JOIN "Templates" AS TM ON T."Template_Type_Code" = TM."Template_Type_Code" GROUP BY T."Template_Type_Code";
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (   SELECT MAX(template_count)   FROM (     SELECT Template_Type_Code, COUNT(*) AS template_count     FROM Templates     GROUP BY Template_Type_Code   ) );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   ORDER BY COUNT(*) DESC   LIMIT 1 );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) < 3 );
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) < 3 );
SELECT MIN(Version_Number), Template_Type_Code FROM Templates;
SELECT MIN(Version_Number), Template_Type_Code FROM Templates GROUP BY Template_Type_Code;
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = "Data base";
SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';
SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE t.Template_Type_Code = 'BK';
SELECT T."Template_Type_Code", COUNT(DISTINCT D."Document_ID") AS "Number_of_Documents" FROM "Ref_Template_Types" T JOIN "Templates" TM ON T."Template_Type_Code" = TM."Template_Type_Code" JOIN "Documents" D ON TM."Template_ID" = D."Template_ID" GROUP BY T."Template_Type_Code";
SELECT T."Template_Type_Code", COUNT(DISTINCT D."Document_ID") AS "Number_of_Documents" FROM "Ref_Template_Types" AS T JOIN "Templates" AS TM ON T."Template_Type_Code" = TM."Template_Type_Code" JOIN "Documents" AS D ON TM."Template_ID" = D."Template_ID" GROUP BY T."Template_Type_Code";
SELECT t."Template_Type_Code" FROM "Templates" t JOIN "Documents" d ON t."Template_ID" = d."Template_ID" GROUP BY t."Template_Type_Code" ORDER BY COUNT(d."Document_ID") DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   INNER JOIN Documents ON Templates.Template_ID = Documents.Template_ID )
SELECT RTT.Template_Type_Code FROM Ref_Template_Types RTT LEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code WHERE T.Template_ID IS NULL;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = "AD";
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = "Book";
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT RTT.Template_Type_Description FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID;
SELECT DISTINCT t.Template_Type_Description FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = "Presentation";
SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'Presentation' );
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs;
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT p.* FROM Paragraphs p WHERE p.Paragraph_Text = 'Korea';
SELECT p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Korea %';
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' );
SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = "Customer reviews";
SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Documents.Document_ID, COUNT(Paragraphs.Paragraph_ID) AS Num_Paragraphs FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID GROUP BY Documents.Document_ID ORDER BY Documents.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID GROUP BY D.Document_ID, D.Document_Name;
SELECT DISTINCT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) >= 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID WHERE p.num_paragraphs = (   SELECT MAX(num_paragraphs)   FROM (     SELECT Document_ID, COUNT(*) AS num_paragraphs     FROM Paragraphs     GROUP BY Document_ID   ) )
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID   ORDER BY num_paragraphs DESC   LIMIT 1 ) p ON d.Document_ID = p.Document_ID;
SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID ORDER BY p.num_paragraphs ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Brazil' INTERSECT SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Ireland';
SELECT COUNT(*) FROM teacher;
SELECT COUNT(*) FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)
SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';
SELECT t.Name, COUNT(ca.Course_ID) AS Num_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;
SELECT COUNT(*) FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;
SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;
SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (   SELECT MIN(m2.Num_of_Staff)   FROM museum m2   WHERE m2.Open_Year > '2010' );
SELECT v."ID", v."Name", v."Age" FROM visitor v JOIN visit vt ON v."ID" = vt."visitor_ID" GROUP BY v."ID", v."Name", v."Age" HAVING COUNT(vt."Museum_ID") > 1;
SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership HAVING SUM(vt.Total_spent) = (   SELECT MAX(total_spent_sum)   FROM (     SELECT SUM(Total_spent) AS total_spent_sum     FROM visit     GROUP BY visitor_ID   ) );
SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1;
SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.Museum_ID IS NULL;
SELECT v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID WHERE vt.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)
SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS maximum_tickets FROM visit;
SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;
SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' INTERSECT SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > '2011';
SELECT COUNT(*) FROM visitor WHERE ID NOT IN (   SELECT visitor_ID   FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE Open_Year > '2010' );
SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) FROM players;
SELECT COUNT(*) FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT AVG(winner_rank) FROM matches;
SELECT MAX(loser_rank) AS highest_rank FROM matches;
SELECT MAX(loser_rank) AS best_rank FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_name_of_losers FROM matches;
SELECT COUNT(DISTINCT loser_name) AS num_loser_names FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;
SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;
SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(birth_date) FROM players)
SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name || ' ' || p.last_name AS full_name FROM players p WHERE p.hand = 'left' ORDER BY p.birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY SUM(r.tours) DESC LIMIT 1;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings)
SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT p.first_name, p.last_name, m.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY m.winner_id HAVING COUNT(*) = (   SELECT MAX(winner_count)   FROM (     SELECT COUNT(*) as winner_count     FROM matches     GROUP BY winner_id   ) )
SELECT p.first_name || ' ' || p.last_name AS winner_name, MAX(winner_rank_points) AS rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id ORDER BY rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY p.winner_rank_points DESC LIMIT 1;
SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;
SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches);
SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches)
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;
SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT DISTINCT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
SELECT p.first_name, p.last_name, m.winner_rank FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_name = 'WTA Championships' AND p.hand = 'left'
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches )
SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;
SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;
SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death;
SELECT AVG(injured) FROM death;
SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril';
SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';
SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;
SELECT d.caused_by_ship_id, s.name FROM death d JOIN ship s ON d.caused_by_ship_id = s.id GROUP BY d.caused_by_ship_id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) FROM battle;
SELECT COUNT(*) FROM battle WHERE id NOT IN (   SELECT lost_in_battle FROM ship   WHERE tonnage = '225' );
SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';
SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location <> 'English Channel' OR s.location IS NULL;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) FROM Courses;
SELECT COUNT(*) FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'Math';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(dp.degree_program_id) = (   SELECT MAX(degree_count)   FROM (     SELECT COUNT(*) as degree_count     FROM Degree_Programs     GROUP BY department_id   ) )
SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(dp.degree_program_id) = (   SELECT MAX(degree_count)   FROM (     SELECT COUNT(degree_program_id) as degree_count     FROM Degree_Programs     GROUP BY department_id   ) );
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS num_degree_names FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS num_degrees FROM Degree_Programs;
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT COUNT(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;
SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) < 2 );
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;
SELECT s.semester_id, s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name HAVING COUNT(se.student_id) = (   SELECT MAX(student_count)   FROM (     SELECT se.semester_id, COUNT(se.student_id) AS student_count     FROM Student_Enrolment se     GROUP BY se.semester_id   ) AS counts );
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT sem.semester_id) = 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT sem.semester_id) = 1;
SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor';
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
SELECT DEP.degree_program_id, DEP.degree_summary_name FROM Degree_Programs DEP JOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id GROUP BY DEP.degree_program_id, DEP.degree_summary_name HAVING COUNT(SE.student_id) = (   SELECT MAX(student_count)   FROM (     SELECT DEP.degree_program_id, COUNT(SE.student_id) AS student_count     FROM Degree_Programs DEP     JOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id     GROUP BY DEP.degree_program_id   ) );
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT semester_id   FROM Student_Enrolment )
SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id;
SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment )
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment )
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_date, t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';
SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1;
SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcript_Contents tc ON se.student_enrolment_id = tc.student_course_id JOIN Transcripts t ON tc.transcript_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_course_id JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1;
SELECT Students.first_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Students.permanent_address_id <> Students.current_address_id;
SELECT Students.first_name FROM Students JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id JOIN Addresses AS permanent_address ON Students.permanent_address_id = permanent_address.address_id WHERE current_address.line_1 <> permanent_address.line_1;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT AVG(transcript_date) FROM Transcripts;
SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;
SELECT MIN(transcript_date), other_details FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT COUNT(*) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT MAX(transcript_date) FROM Transcripts;
SELECT student_course_id, COUNT(transcript_id) AS enrollment_count FROM Transcript_Contents GROUP BY student_course_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT SEC.course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses SEC JOIN Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id GROUP BY SEC.course_id ORDER BY num_transcripts DESC LIMIT 1;
SELECT transcript_id, transcript_date FROM Transcripts ORDER BY transcript_id LIMIT 1;
SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 );
SELECT s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Master' AND s.semester_id IN (   SELECT s.semester_id   FROM Semesters s   JOIN Student_Enrolment se ON s.semester_id = se.semester_id   JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id   WHERE dp.degree_summary_name = 'Bachelor' )
SELECT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Masters' AND se.semester_id IN (   SELECT se.semester_id   FROM Student_Enrolment se   JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id   JOIN Departments d ON dp.department_id = d.department_id   WHERE d.department_name = 'Bachelors' ) GROUP BY se.semester_id HAVING COUNT(DISTINCT d.department_name) = 2;
SELECT COUNT(DISTINCT current_address_id) AS num_addresses FROM Students;
SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;
SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;
SELECT * FROM Students ORDER BY last_name DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = "Ben Jones" OR Cartoon.Directed_by = "Brandon Vietti";
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
SELECT Country, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Country ORDER BY Num_Channels DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.series_name = 'Sky Radio';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS Num_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Num_TV_Channel LIMIT 1;
SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(Num_Channels)          FROM (SELECT COUNT(*) AS Num_Channels             FROM TV_Channel             GROUP BY Language))
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle!";
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = "The Rise of the Blue Beetle";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT TV_series.Episode FROM TV_series ORDER BY TV_series.Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT MIN(Share), MAX(Share) FROM TV_series;
SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = "A Love of a Lifetime";
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = "Sky Radio";
SELECT Episode FROM TV_series WHERE Channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = "Sky Radio" );
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)
SELECT Cartoon.Production_code, Cartoon.Channel FROM Cartoon WHERE Cartoon.Original_air_date = (   SELECT MAX(Cartoon.Original_air_date)   FROM Cartoon )
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = 'Yes';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );
SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country FROM TV_Channel WHERE TV_Channel.Language <> 'English'
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English';
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN (   SELECT TV_Channel.Country   FROM TV_Channel   GROUP BY TV_Channel.Country   HAVING COUNT(TV_Channel.id) > 2 );
SELECT TV_Channel.id FROM TV_Channel GROUP BY TV_Channel.id HAVING COUNT(*) > 2;
SELECT DISTINCT TC.id FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by <> 'Ben Jones' OR C.Directed_by IS NULL;
SELECT DISTINCT TC.id FROM TV_Channel TC LEFT JOIN Cartoon C ON TC.id = C.Channel WHERE C.Directed_by <> 'Ben Jones' OR C.Directed_by IS NULL;
SELECT DISTINCT TC."Package_Option" FROM "TV_Channel" TC LEFT JOIN "Cartoon" C ON TC."id" = C."Channel" WHERE C."Directed_by" != 'Ben Jones' OR C."Directed_by" IS NULL;
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;
SELECT COUNT(*) FROM poker_player;
SELECT COUNT(*) FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT AVG(Earnings) FROM poker_player;
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;
SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player")
SELECT p."Birth_Date" FROM "poker_player" pp JOIN "people" p ON pp."People_ID" = p."People_ID" WHERE pp."Earnings" = (SELECT MIN("Earnings") FROM "poker_player")
SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people)
SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people)
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE Nationality <> 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;
SELECT COUNT(DISTINCT Nationality) AS NumDistinctNationalities FROM people;
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM people;
SELECT COUNT(*) FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) = (   SELECT MIN(vote_count)   FROM (     SELECT COUNT(vote_id) as vote_count     FROM VOTES     GROUP BY contestant_number   ) t );
SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA';
SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state ORDER BY vote_count DESC LIMIT 1;
SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling';
SELECT a.area_code FROM AREA_CODE_STATE a JOIN VOTES v1 ON a.state = v1.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN VOTES v2 ON v1.phone_number = v2.phone_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT c.Continent FROM country c WHERE c.Code = 'AIA';
SELECT country.Region FROM city JOIN country ON city.CountryCode = country.Code WHERE city.Name = 'Kabul';
SELECT c.Region FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT country.Region, country.Population FROM country WHERE country.Name = 'Angola';
SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;
SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;
SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia';
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Region = 'US Territory';
SELECT COUNT(DISTINCT "Language") FROM "countrylanguage";
SELECT COUNT(DISTINCT "Language") AS "Distinct Languages" FROM "countrylanguage";
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(Language) AS NumLanguages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY NumLanguages DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;
SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(*) AS num_languages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY num_languages DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(cl.Language) DESC LIMIT 1;
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (   SELECT CountryCode FROM countrylanguage   WHERE Language = 'Dutch' );
SELECT COUNT(DISTINCT cl.CountryCode) AS Number_of_Nations FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) AS NumContinents FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) AS NumContinents FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'Dutch' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' OR cl.Language = 'Dutch' AND cl.IsOfficial = 'T';
SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = (   SELECT MAX(num_countries)   FROM (     SELECT COUNT(DISTINCT cl.CountryCode) AS num_countries     FROM countrylanguage cl     JOIN country c ON cl.CountryCode = c.Code     WHERE c.Continent = 'Asia'     GROUP BY cl.Language   ) );
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;
SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;
SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' AND c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Asia');
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' );
SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );
SELECT SUM(Population) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' );
SELECT SUM(Population) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS TotalLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS TotalDistinctLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (   SELECT MAX(c2.SurfaceArea)   FROM country c2   WHERE c2.Continent = 'Europe' );
SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (   SELECT MAX(c2.SurfaceArea)   FROM country c2   WHERE c2.Continent = 'Europe' )
SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Africa' AND c2.Continent = 'Asia' WHERE c1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')
SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population)           FROM country c2           WHERE c2.Continent = 'Asia')
SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa' WHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa' WHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')
SELECT DISTINCT c."Code" FROM "country" c WHERE c."Code" NOT IN (   SELECT cl."CountryCode"   FROM "countrylanguage" cl   WHERE cl."Language" = 'English' );
SELECT DISTINCT c."Code" FROM "country" c LEFT JOIN "countrylanguage" cl ON c."Code" = cl."CountryCode" WHERE cl."Language" <> 'English' OR cl."Language" IS NULL;
SELECT DISTINCT c."Code" FROM "country" c JOIN "countrylanguage" cl ON c."Code" = cl."CountryCode" WHERE cl."Language" <> 'English';
SELECT DISTINCT cl."CountryCode" FROM "countrylanguage" cl WHERE cl."Language" <> 'English';
SELECT c."Code" FROM "country" c JOIN "countrylanguage" cl ON c."Code" = cl."CountryCode" WHERE cl."Language" <> 'English' AND c."GovernmentForm" <> 'Republic';
SELECT c."Code" FROM "country" c LEFT JOIN "countrylanguage" cl ON c."Code" = cl."CountryCode" WHERE cl."Language" != 'English' AND c."GovernmentForm" != 'Republic'
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T';
SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T' GROUP BY city.Name;
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country);
SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country);
SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;
SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;
SELECT District, COUNT(*) AS NumCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;
SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.GovernmentForm IN (   SELECT c2.GovernmentForm   FROM country c2   WHERE c2.LifeExpectancy > 72   GROUP BY c2.GovernmentForm ) GROUP BY c.GovernmentForm;
SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform;
SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;
SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c WHERE c.Continent IN (   SELECT c1.Continent   FROM country c1   GROUP BY c1.Continent   HAVING AVG(c1.LifeExpectancy) < 72 ) GROUP BY c.Continent;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population LIMIT 3;
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT COUNT(*) FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_surface_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(country_count)   FROM (     SELECT COUNT(DISTINCT CountryCode) AS country_count     FROM countrylanguage     GROUP BY Language   ) );
SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(country_count)   FROM (     SELECT COUNT(DISTINCT CountryCode) AS country_count     FROM countrylanguage     GROUP BY Language   ) );
SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = c.Code ) ORDER BY c.Name;
SELECT c."Code", cl."Language" FROM "country" c JOIN "countrylanguage" cl ON c."Code" = cl."CountryCode" WHERE cl."Percentage" = (   SELECT MAX("Percentage")   FROM "countrylanguage"   WHERE "CountryCode" = c."Code" ) ORDER BY c."Code";
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE Language = 'Spanish' );
SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC LIMIT 1;
SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.IsOfficial = 'T' GROUP BY cl.CountryCode;
SELECT COUNT(*) FROM conductor;
SELECT COUNT(*) FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality <> "USA";
SELECT Name FROM conductor WHERE Nationality <> 'USA';
SELECT o.Record_Company FROM orchestra o ORDER BY o.Year_of_Founded DESC;
SELECT Orchestra.Record_Company FROM Orchestra ORDER BY Orchestra.Year_of_Founded DESC;
SELECT AVG(Attendance) FROM show;
SELECT AVG(Attendance) FROM show;
SELECT MAX(p.Share), MIN(p.Share) FROM performance p WHERE p.Type <> "Live final";
SELECT MAX(p.Share), MIN(p.Share) FROM performance p WHERE p.Type <> 'Live final';
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (   SELECT MAX(CountOrchestras)   FROM (     SELECT COUNT(Orchestra_ID) AS CountOrchestras     FROM orchestra     GROUP BY Record_Company   ) );
SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (   SELECT MAX(CountOrchestra)   FROM (     SELECT Record_Company, COUNT(Orchestra_ID) AS CountOrchestra     FROM orchestra     GROUP BY Record_Company   ) );
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;
SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;
SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT DISTINCT o."Year_of_Founded" FROM "orchestra" o JOIN "performance" p ON o."Orchestra_ID" = p."Orchestra_ID" GROUP BY o."Orchestra_ID" HAVING COUNT(p."Performance_ID") > 1;
SELECT o."Year_of_Founded" FROM "orchestra" o JOIN "performance" p ON o."Orchestra_ID" = p."Orchestra_ID" GROUP BY o."Orchestra_ID" HAVING COUNT(p."Performance_ID") > 1;
SELECT COUNT(*) FROM Highschooler;
SELECT COUNT(*) FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT ID, grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT f.student_id, COUNT(f.friend_id) AS num_friends FROM Friend f GROUP BY f.student_id;
SELECT student_id, COUNT(friend_id) AS num_friends FROM Friend GROUP BY student_id;
SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;
SELECT h.name FROM Highschooler h JOIN (   SELECT student_id, COUNT(friend_id) AS num_friends   FROM Friend   GROUP BY student_id ) f ON h.ID = f.student_id WHERE f.num_friends = (   SELECT MAX(num_friends)   FROM (     SELECT student_id, COUNT(friend_id) AS num_friends     FROM Friend     GROUP BY student_id   ) );
SELECT H.name FROM Highschooler H JOIN (   SELECT student_id, COUNT(friend_id) AS num_friends   FROM Friend   GROUP BY student_id   ORDER BY num_friends DESC   LIMIT 1 ) AS F ON H.ID = F.student_id;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;
SELECT H2.name FROM Highschooler H1, Highschooler H2, Friend F WHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;
SELECT H2.name FROM Highschooler H1, Highschooler H2, Friend F WHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)
SELECT h.ID FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)
SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)
SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id WHERE EXISTS (SELECT 1 FROM Friend WHERE student_id = f.student_id) AND EXISTS (SELECT 1 FROM Likes WHERE student_id = f.student_id);
SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id;
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;
SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.liked_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;
SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);
SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state;
SELECT DISTINCT o.state FROM Owners o INNER JOIN Professionals p ON o.state = p.state;
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 );
SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 );
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;
SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS P WHERE first_name NOT IN (   SELECT name FROM Dogs );
SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS names WHERE first_name NOT IN (   SELECT name FROM Dogs );
SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (   SELECT T.professional_id   FROM Treatments T )
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) = (   SELECT MAX(dog_count)   FROM (     SELECT COUNT(dog_id) as dog_count     FROM Dogs     GROUP BY owner_id   ) );
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o WHERE o.owner_id = (   SELECT d.owner_id   FROM Dogs d   GROUP BY d.owner_id   ORDER BY COUNT(d.dog_id) DESC   LIMIT 1 );
SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2;
SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT t.owner_id, o.last_name FROM Treatments t JOIN Dogs d ON t.dog_id = d.dog_id JOIN Owners o ON d.owner_id = o.owner_id GROUP BY t.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );
SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );
SELECT O.owner_id, O.zip_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT P.professional_id, P.cell_number FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;
SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;
SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 );
SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_name = (   SELECT breed_name   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 );
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT dog_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT COUNT(DISTINCT professional_id) FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)
SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);
SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);
SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';
SELECT AVG(age) FROM Dogs;
SELECT AVG(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT MAX(age) FROM Dogs;
SELECT charge_type, charge_amount FROM Charges;
SELECT charge_type, charge_amount FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT MAX(charge_amount) FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT b.breed_name, s.size_description FROM Breeds b, Sizes s;
SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;
SELECT COUNT(*) FROM singer;
SELECT COUNT(*) FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship <> "France";
SELECT Name FROM singer WHERE Citizenship <> 'French';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;
SELECT s."Citizenship", MAX(s."Net_Worth_Millions") AS "Max_Net_Worth" FROM "singer" s GROUP BY s."Citizenship";
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name HAVING COUNT(so.Song_ID) > 1;
SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name HAVING COUNT(so.Song_ID) > 1;
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;
SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Singer_ID IS NULL;
SELECT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;
SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;
SELECT COUNT(*) FROM Other_Available_Features;
SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' );
SELECT p.property_type_description FROM Ref_Property_Types p JOIN Properties prop ON p.property_type_code = prop.property_type_code WHERE prop.property_type_code = 'code';
SELECT p.property_name FROM Properties p JOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code WHERE (pt.property_type_description = 'House' OR pt.property_type_description = 'Apartment') AND p.room_count > 1;
