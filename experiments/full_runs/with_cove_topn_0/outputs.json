[
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer;",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 1269,
        "output_tokens": 76,
        "time": 4.2139345,
        "question": "How many singers do we have?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer;",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 1266,
        "output_tokens": 70,
        "time": 4.1504335,
        "question": "What is the total number of singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age\nFROM singer\nORDER BY Age DESC;",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1380,
        "output_tokens": 137,
        "time": 7.445159374999999,
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age\nFROM singer\nORDER BY Age DESC;",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1315,
        "output_tokens": 90,
        "time": 4.020883375,
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age\nFROM singer\nWHERE Country = 'France';",
        "final_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';",
        "input_tokens": 1429,
        "output_tokens": 198,
        "time": 7.378091583,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age\nFROM singer\nWHERE Country = 'French';",
        "final_sql": "SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'French';",
        "input_tokens": 1422,
        "output_tokens": 194,
        "time": 6.574714999999998,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Song_release_year\nFROM singer s\nWHERE s.Age = (SELECT MIN(Age) FROM singer)",
        "final_sql": "SELECT s.Name, s.Song_release_year FROM singer s WHERE s.Age = (SELECT MIN(Age) FROM singer)",
        "input_tokens": 1387,
        "output_tokens": 152,
        "time": 5.587107500000002,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.\"Name\", s.\"Song_release_year\"\nFROM singer s\nWHERE s.\"Age\" = (SELECT MIN(\"Age\") FROM singer)",
        "final_sql": "SELECT s.\"Name\", s.\"Song_release_year\" FROM singer s WHERE s.\"Age\" = (SELECT MIN(\"Age\") FROM singer)",
        "input_tokens": 1390,
        "output_tokens": 156,
        "time": 5.789610875000001,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1355,
        "output_tokens": 124,
        "time": 5.254635666999995,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country\nFROM singer\nWHERE Age > 20;",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1346,
        "output_tokens": 120,
        "time": 5.1440272910000004,
        "question": "What are  the different countries with singers above age 20?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Singer_Count\nFROM singer\nGROUP BY Country;",
        "final_sql": "SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;",
        "input_tokens": 1397,
        "output_tokens": 159,
        "time": 6.320901083999999,
        "question": "Show all countries and the number of singers in each country.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Singer_Count\nFROM singer\nGROUP BY Country;",
        "final_sql": "SELECT Country, COUNT(*) AS Singer_Count FROM singer GROUP BY Country;",
        "input_tokens": 1376,
        "output_tokens": 153,
        "time": 6.063132500000009,
        "question": "How many singers are from each country?",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT s.\"Song_Name\"\nFROM \"singer\" s\nWHERE s.\"Age\" > (SELECT AVG(\"Age\") FROM \"singer\")",
        "final_sql": "SELECT s.\"Song_Name\" FROM \"singer\" s WHERE s.\"Age\" > (SELECT AVG(\"Age\") FROM \"singer\")",
        "input_tokens": 1416,
        "output_tokens": 186,
        "time": 6.820333708000007,
        "question": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT s.\"Song_Name\"\nFROM \"singer\" s\nWHERE s.\"Age\" > (SELECT AVG(\"Age\") FROM \"singer\")",
        "final_sql": "SELECT s.\"Song_Name\" FROM \"singer\" s WHERE s.\"Age\" > (SELECT AVG(\"Age\") FROM \"singer\")",
        "input_tokens": 1383,
        "output_tokens": 154,
        "time": 6.059055166999997,
        "question": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1347,
        "output_tokens": 111,
        "time": 4.470033375,
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT Location, Name\nFROM stadium\nWHERE Capacity BETWEEN 5000 AND 10000;",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1338,
        "output_tokens": 104,
        "time": 5.094227875000001,
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium;",
        "final_sql": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium;",
        "input_tokens": 1241,
        "output_tokens": 51,
        "time": 3.4685514170000005,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select max(capacity), average from stadium"
    },
    {
        "baseline_sql": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium;",
        "final_sql": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium;",
        "input_tokens": 1238,
        "output_tokens": 51,
        "time": 3.0195472090000095,
        "question": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nWHERE s.Average = (SELECT MAX(Average) FROM stadium)",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "input_tokens": 1397,
        "output_tokens": 172,
        "time": 7.131579875,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nWHERE s.Average = (SELECT MAX(Average) FROM stadium)",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "input_tokens": 1400,
        "output_tokens": 172,
        "time": 6.212384499999999,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
        "input_tokens": 1381,
        "output_tokens": 140,
        "time": 5.492867040999997,
        "question": "How many concerts are there in year 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015';",
        "input_tokens": 1323,
        "output_tokens": 107,
        "time": 5.185365250000018,
        "question": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT s.Name, COUNT(c.concert_ID) AS num_concerts\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name;",
        "final_sql": "SELECT s.Name, COUNT(c.concert_ID) AS num_concerts FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;",
        "input_tokens": 1452,
        "output_tokens": 209,
        "time": 7.641906207999995,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT s.\"Stadium_ID\", s.\"Name\", COUNT(c.\"concert_ID\") AS \"Number_of_Concerts\"\nFROM \"stadium\" s\nJOIN \"concert\" c ON s.\"Stadium_ID\" = c.\"Stadium_ID\"\nGROUP BY s.\"Stadium_ID\", s.\"Name\";",
        "final_sql": "SELECT s.\"Stadium_ID\", s.\"Name\", COUNT(c.\"concert_ID\") AS \"Number_of_Concerts\" FROM \"stadium\" s JOIN \"concert\" c ON s.\"Stadium_ID\" = c.\"Stadium_ID\" GROUP BY s.\"Stadium_ID\", s.\"Name\";",
        "input_tokens": 1572,
        "output_tokens": 312,
        "time": 10.513684499999982,
        "question": "For each stadium, how many concerts play there?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= '2014'\nGROUP BY s.Name, s.Capacity\nHAVING COUNT(c.concert_ID) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT COUNT(c2.concert_ID) as concert_count\n        FROM stadium s2\n        JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID\n        WHERE c2.Year >= '2014'\n        GROUP BY s2.Stadium_ID\n    )\n);",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity HAVING COUNT(c.concert_ID) = (   SELECT MAX(concert_count)   FROM (     SELECT COUNT(c2.concert_ID) as concert_count     FROM stadium s2     JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID     WHERE c2.Year >= '2014'     GROUP BY s2.Stadium_ID   ) );",
        "input_tokens": 1690,
        "output_tokens": 413,
        "time": 613.683650458,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year > '2013'\nGROUP BY s.Stadium_ID\nHAVING COUNT(c.concert_ID) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT COUNT(c2.concert_ID) as concert_count\n        FROM stadium s2\n        JOIN concert c2 ON s2.Stadium_ID = c2.Stadium_ID\n        WHERE c2.Year > '2013'\n        GROUP BY s2.Stadium_ID\n    )\n);",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
        "input_tokens": 1665,
        "output_tokens": 334,
        "time": 11.618671374999963,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT Year\nFROM concert\nGROUP BY Year\nHAVING COUNT(*) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT Year, COUNT(*) as concert_count\n        FROM concert\n        GROUP BY Year\n    )\n);",
        "final_sql": "SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (   SELECT MAX(concert_count)   FROM (     SELECT Year, COUNT(*) as concert_count     FROM concert     GROUP BY Year   ) );",
        "input_tokens": 1492,
        "output_tokens": 253,
        "time": 10.104848749999974,
        "question": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Year\nFROM concert\nGROUP BY Year\nHAVING COUNT(*) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT Year, COUNT(*) as concert_count\n        FROM concert\n        GROUP BY Year\n    )\n);",
        "final_sql": "SELECT Year FROM concert GROUP BY Year HAVING COUNT(*) = (   SELECT MAX(concert_count)   FROM (     SELECT Year, COUNT(*) as concert_count     FROM concert     GROUP BY Year   ) );",
        "input_tokens": 1521,
        "output_tokens": 264,
        "time": 9.797336833999907,
        "question": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Stadium_ID IS NULL;",
        "final_sql": "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;",
        "input_tokens": 1446,
        "output_tokens": 210,
        "time": 10.00507745799996,
        "question": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM stadium s\nLEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Stadium_ID IS NULL;",
        "final_sql": "SELECT s.Name FROM stadium s LEFT JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Stadium_ID IS NULL;",
        "input_tokens": 1427,
        "output_tokens": 192,
        "time": 7.416815000000042,
        "question": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT DISTINCT s1.Country\nFROM singer s1\nJOIN singer s2 ON s1.Country = s2.Country\nWHERE s1.Age > 40 AND s2.Age < 30;",
        "final_sql": "SELECT DISTINCT s1.Country FROM singer s1 JOIN singer s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30;",
        "input_tokens": 1483,
        "output_tokens": 231,
        "time": 8.48851554099997,
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name\nFROM stadium\nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2014'\n);",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (   SELECT Stadium_ID   FROM concert   WHERE Year = '2014' );",
        "input_tokens": 1512,
        "output_tokens": 229,
        "time": 8.982019416999947,
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT Name\nFROM stadium\nWHERE Stadium_ID NOT IN (\n    SELECT Stadium_ID\n    FROM concert\n    WHERE Year = '2014'\n);",
        "final_sql": "SELECT Name FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year <> '2014' OR concert.Year IS NULL;",
        "input_tokens": 1506,
        "output_tokens": 237,
        "time": 9.389106040999991,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS num_singers\nFROM concert c\nJOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID\nGROUP BY c.concert_Name, c.Theme;",
        "final_sql": "SELECT c.concert_Name, c.Theme, COUNT(sic.Singer_ID) AS num_singers FROM concert c JOIN singer_in_concert sic ON c.concert_ID = sic.concert_ID GROUP BY c.concert_Name, c.Theme;",
        "input_tokens": 1473,
        "output_tokens": 227,
        "time": 8.466358792000051,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "baseline_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers\nFROM concert\nJOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\nGROUP BY concert.concert_Name, concert.Theme;",
        "final_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_Name, concert.Theme;",
        "input_tokens": 1553,
        "output_tokens": 288,
        "time": 11.025892542000065,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
    },
    {
        "baseline_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;",
        "final_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1491,
        "output_tokens": 244,
        "time": 9.731225166999934,
        "question": "List singer names and number of concerts for each singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts\nFROM singer\nJOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name;",
        "final_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1503,
        "output_tokens": 244,
        "time": 9.357825833999982,
        "question": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';",
        "final_sql": "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';",
        "input_tokens": 1528,
        "output_tokens": 266,
        "time": 10.314406082999994,
        "question": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM singer s\nJOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID\nJOIN concert c ON sic.concert_ID = c.concert_ID\nWHERE c.Year = '2014';",
        "final_sql": "SELECT s.Name FROM singer s JOIN singer_in_concert sic ON s.Singer_ID = sic.Singer_ID JOIN concert c ON sic.concert_ID = c.concert_ID WHERE c.Year = '2014';",
        "input_tokens": 1551,
        "output_tokens": 272,
        "time": 10.617123708999998,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT singer.Name, singer.Country\nFROM singer\nWHERE singer.Song_Name LIKE '%Hey%';",
        "final_sql": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Song_Name LIKE '%Hey%';",
        "input_tokens": 1366,
        "output_tokens": 122,
        "time": 6.421850292000045,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT singer.Name, singer.Country\nFROM singer\nWHERE singer.Singer_ID IN (\n    SELECT singer_in_concert.Singer_ID\n    FROM singer_in_concert\n    JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID\n    JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID\n    WHERE concert.concert_ID IN (\n        SELECT concert.concert_ID\n        FROM concert\n        JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID\n        JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID\n        WHERE singer.Song_Name LIKE '%Hey%'\n    )\n);",
        "final_sql": "SELECT singer.Name, singer.Country FROM singer WHERE singer.Singer_ID IN (   SELECT singer_in_concert.Singer_ID   FROM singer_in_concert   JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID   JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID   WHERE concert.concert_ID IN (     SELECT concert.concert_ID     FROM concert     JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID     JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID     WHERE singer.Song_Name LIKE '%Hey%'   ) );",
        "input_tokens": 1754,
        "output_tokens": 453,
        "time": 13.799912416999973,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014'\nINTERSECT\nSELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2015';",
        "final_sql": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015';",
        "input_tokens": 1628,
        "output_tokens": 326,
        "time": 10.815880375000006,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2014'\nINTERSECT\nSELECT s.Name, s.Location\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year = '2015';",
        "final_sql": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015';",
        "input_tokens": 1549,
        "output_tokens": 273,
        "time": 11.12831079199998,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (SELECT Stadium_ID \n                    FROM stadium \n                    ORDER BY Capacity DESC \n                    LIMIT 1);",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           ORDER BY Capacity DESC           LIMIT 1);",
        "input_tokens": 1601,
        "output_tokens": 308,
        "time": 611.113853167,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM concert \nWHERE Stadium_ID = (\n    SELECT Stadium_ID \n    FROM stadium \n    ORDER BY Capacity DESC \n    LIMIT 1\n);",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 );",
        "input_tokens": 1592,
        "output_tokens": 294,
        "time": 11.485354874999985,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10;",
        "final_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1191,
        "output_tokens": 185,
        "time": 9.174553291999928,
        "question": "Find the number of pets whose weight is heavier than 10.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10;",
        "final_sql": "SELECT COUNT(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1093,
        "output_tokens": 118,
        "time": 5.355960583000069,
        "question": "How many pets have a greater weight than 10?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT MIN(p.weight) \nFROM Pets p \nWHERE p.PetType = 'dog';",
        "final_sql": "SELECT MIN(p.weight) FROM Pets p WHERE p.PetType = 'dog' AND p.pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog');",
        "input_tokens": 1172,
        "output_tokens": 217,
        "time": 7.684331749999956,
        "question": "Find the weight of the youngest dog.",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';",
        "final_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'dog';",
        "input_tokens": 1122,
        "output_tokens": 151,
        "time": 6.114070083000115,
        "question": "How much does the youngest dog weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(weight) AS max_weight, PetType\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT MAX(weight) AS max_weight, PetType FROM Pets GROUP BY PetType;",
        "input_tokens": 1176,
        "output_tokens": 173,
        "time": 6.568778291999934,
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT PetType, MAX(weight) AS max_weight\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;",
        "input_tokens": 1061,
        "output_tokens": 101,
        "time": 6.981568541999877,
        "question": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20;",
        "final_sql": "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;",
        "input_tokens": 1257,
        "output_tokens": 239,
        "time": 9.179907125,
        "question": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nWHERE Student.Age > 20;",
        "final_sql": "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE Student.Age > 20;",
        "input_tokens": 1272,
        "output_tokens": 245,
        "time": 9.903475833999892,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Has_Pet \nJOIN Student ON Has_Pet.StuID = Student.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'F' AND Pets.PetType = 'dog';",
        "final_sql": "SELECT COUNT(*) FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'F' AND Pets.PetType = 'dog';",
        "input_tokens": 1460,
        "output_tokens": 386,
        "time": 14.91346108300013,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Student \nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID \nJOIN Pets ON Has_Pet.PetID = Pets.PetID \nWHERE Student.Sex = 'female' AND Pets.PetType = 'dog';",
        "final_sql": "SELECT COUNT(*) FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.Sex = 'female' AND Pets.PetType = 'dog';",
        "input_tokens": 1255,
        "output_tokens": 260,
        "time": 9.757812250000143,
        "question": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT PetType) AS num_distinct_pets\nFROM Pets;",
        "final_sql": "SELECT COUNT(DISTINCT PetType) AS num_distinct_pets FROM Pets;",
        "input_tokens": 1000,
        "output_tokens": 65,
        "time": 4.923288875000026,
        "question": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT PetType) AS num_pet_types\nFROM Pets;",
        "final_sql": "SELECT COUNT(DISTINCT PetType) AS num_pet_types FROM Pets;",
        "input_tokens": 1041,
        "output_tokens": 91,
        "time": 4.574309500000027,
        "question": "How many different types of pet are there?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';",
        "final_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';",
        "input_tokens": 1373,
        "output_tokens": 339,
        "time": 11.535219417000008,
        "question": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';",
        "final_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat' OR Pets.PetType = 'dog';",
        "input_tokens": 1389,
        "output_tokens": 337,
        "time": 10.516427292000117,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'cat'\nINTERSECT\nSELECT DISTINCT s.Fname\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog';",
        "final_sql": "SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' INTERSECT SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog';",
        "input_tokens": 1446,
        "output_tokens": 415,
        "time": 12.74132854200002,
        "question": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "gold_query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT DISTINCT S.Fname\nFROM Student S\nJOIN Has_Pet HP1 ON S.StuID = HP1.StuID\nJOIN Has_Pet HP2 ON S.StuID = HP2.StuID\nJOIN Pets P1 ON HP1.PetID = P1.PetID\nJOIN Pets P2 ON HP2.PetID = P2.PetID\nWHERE P1.PetType = 'cat' AND P2.PetType = 'dog';",
        "final_sql": "SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP1 ON S.StuID = HP1.StuID JOIN Has_Pet HP2 ON S.StuID = HP2.StuID JOIN Pets P1 ON HP1.PetID = P1.PetID JOIN Pets P2 ON HP2.PetID = P2.PetID WHERE P1.PetType = 'cat' AND P2.PetType = 'dog';",
        "input_tokens": 1447,
        "output_tokens": 409,
        "time": 612.8854290830002,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT S.Major, S.Age\nFROM Student S\nWHERE S.StuID NOT IN (\n    SELECT HP.StuID\n    FROM Has_Pet HP\n    INNER JOIN Pets P ON HP.PetID = P.PetID\n    WHERE P.PetType = 'cat'\n);",
        "final_sql": "SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet HP   INNER JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'cat' );",
        "input_tokens": 1328,
        "output_tokens": 306,
        "time": 12.24904295799979,
        "question": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT S.Major, S.Age\nFROM Student S\nWHERE S.StuID NOT IN (\n    SELECT HP.StuID\n    FROM Has_Pet HP\n    JOIN Pets P ON HP.PetID = P.PetID\n    WHERE P.PetType = 'Cat'\n);",
        "final_sql": "SELECT S.Major, S.Age FROM Student S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet HP   JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'Cat' );",
        "input_tokens": 1353,
        "output_tokens": 308,
        "time": 10.31348833300035,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.StuID\nFROM Student\nLEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nLEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;",
        "final_sql": "SELECT DISTINCT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'cat' OR Pets.PetType IS NULL;",
        "input_tokens": 1465,
        "output_tokens": 404,
        "time": 13.996898458000032,
        "question": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.StuID\nFROM Student\nLEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nLEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType <> 'Cat' OR Pets.PetType IS NULL;",
        "final_sql": "SELECT DISTINCT Student.StuID FROM Student LEFT JOIN Has_Pet ON Student.StuID = Has_Pet.StuID LEFT JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType <> 'Cat' OR Pets.PetType IS NULL;",
        "input_tokens": 1450,
        "output_tokens": 393,
        "time": 12.868669750000208,
        "question": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT S.Fname, S.Age\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'dog'\nAND S.StuID NOT IN (\n    SELECT S.StuID\n    FROM Student S\n    JOIN Has_Pet HP ON S.StuID = HP.StuID\n    JOIN Pets P ON HP.PetID = P.PetID\n    WHERE P.PetType = 'cat'\n);",
        "final_sql": "SELECT S.Fname, S.Age FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (   SELECT S.StuID   FROM Student S   JOIN Has_Pet HP ON S.StuID = HP.StuID   JOIN Pets P ON HP.PetID = P.PetID   WHERE P.PetType = 'cat' );",
        "input_tokens": 1508,
        "output_tokens": 449,
        "time": 613.3690959579999,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.Fname\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nJOIN Pets ON Has_Pet.PetID = Pets.PetID\nWHERE Pets.PetType = 'dog'\nAND Student.StuID NOT IN (\n    SELECT Student.StuID\n    FROM Student\n    JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\n    JOIN Pets ON Has_Pet.PetID = Pets.PetID\n    WHERE Pets.PetType = 'cat'\n);",
        "final_sql": "SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (   SELECT Student.StuID   FROM Student   JOIN Has_Pet ON Student.StuID = Has_Pet.StuID   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE Pets.PetType = 'cat' );",
        "input_tokens": 1481,
        "output_tokens": 433,
        "time": 13.383728541999972,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);",
        "final_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);",
        "input_tokens": 1114,
        "output_tokens": 144,
        "time": 6.00931166700002,
        "question": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT PetType, weight\nFROM Pets\nWHERE pet_age = (SELECT MIN(pet_age) FROM Pets);",
        "final_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);",
        "input_tokens": 1150,
        "output_tokens": 156,
        "time": 9.07895283300013,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Pets.PetID, Pets.weight\nFROM Pets\nWHERE Pets.pet_age > 1;",
        "final_sql": "SELECT Pets.PetID, Pets.weight FROM Pets WHERE Pets.pet_age > 1;",
        "input_tokens": 1100,
        "output_tokens": 120,
        "time": 5.701876542000264,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetID, weight\nFROM Pets\nWHERE pet_age > 1;",
        "final_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;",
        "input_tokens": 1074,
        "output_tokens": 100,
        "time": 5.190798083999653,
        "question": "What is the id and weight of every pet who is older than 1?",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;",
        "input_tokens": 1230,
        "output_tokens": 224,
        "time": 608.351258958,
        "question": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(pet_age) AS average_age, MAX(pet_age) AS maximum_age FROM Pets GROUP BY PetType;",
        "input_tokens": 1191,
        "output_tokens": 198,
        "time": 6.524353917000099,
        "question": "What is the average and maximum age for each pet type?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) AS average_weight\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;",
        "input_tokens": 1115,
        "output_tokens": 144,
        "time": 6.4125588749998315,
        "question": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) AS average_weight\nFROM Pets\nGROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(weight) AS average_weight FROM Pets GROUP BY PetType;",
        "input_tokens": 1124,
        "output_tokens": 146,
        "time": 5.699088207999921,
        "question": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT Student.Fname, Student.Age\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID;",
        "final_sql": "SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;",
        "input_tokens": 1160,
        "output_tokens": 172,
        "time": 7.9552343750001455,
        "question": "Find the first name and age of students who have a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT S.Fname, S.Age\nFROM Student S\nINNER JOIN Has_Pet HP ON S.StuID = HP.StuID;",
        "final_sql": "SELECT S.Fname, S.Age FROM Student S INNER JOIN Has_Pet HP ON S.StuID = HP.StuID;",
        "input_tokens": 1132,
        "output_tokens": 148,
        "time": 6.266600874999767,
        "question": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT p.PetID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.LName = 'Smith';",
        "final_sql": "SELECT hp.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID WHERE s.LName = 'Smith';",
        "input_tokens": 1325,
        "output_tokens": 281,
        "time": 9.180935999999747,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT p.PetID\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE s.LName = 'Smith';",
        "final_sql": "SELECT p.PetID FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.LName = 'Smith';",
        "input_tokens": 1332,
        "output_tokens": 295,
        "time": 8.978285332999803,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID;",
        "final_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;",
        "input_tokens": 1273,
        "output_tokens": 256,
        "time": 8.26074945900018,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "baseline_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets\nFROM Student\nINNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID;",
        "final_sql": "SELECT Student.StuID, COUNT(Has_Pet.PetID) AS Num_Pets FROM Student INNER JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID;",
        "input_tokens": 1332,
        "output_tokens": 291,
        "time": 9.69740583399971,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "db_id": "pets_1",
        "gold_query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "baseline_sql": "SELECT S.Fname, S.Sex\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nGROUP BY S.StuID, S.Fname, S.Sex\nHAVING COUNT(HP.PetID) > 1;",
        "final_sql": "SELECT S.Fname, S.Sex FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID GROUP BY S.Fname, S.Sex HAVING COUNT(HP.PetID) > 1;",
        "input_tokens": 1286,
        "output_tokens": 269,
        "time": 10.31486970800006,
        "question": "Find the first name and gender of student who have more than one pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Student.Fname, Student.Sex\nFROM Student\nJOIN Has_Pet ON Student.StuID = Has_Pet.StuID\nGROUP BY Student.StuID\nHAVING COUNT(Has_Pet.PetID) > 1;",
        "final_sql": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.Fname, Student.Sex HAVING COUNT(Has_Pet.PetID) > 1;",
        "input_tokens": 1329,
        "output_tokens": 293,
        "time": 9.21654475000014,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;",
        "final_sql": "SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;",
        "input_tokens": 1384,
        "output_tokens": 335,
        "time": 10.975596750000022,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT S.LName\nFROM Student S\nJOIN Has_Pet HP ON S.StuID = HP.StuID\nJOIN Pets P ON HP.PetID = P.PetID\nWHERE P.PetType = 'cat' AND P.pet_age = 3;",
        "final_sql": "SELECT S.LName FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'cat' AND P.pet_age = 3;",
        "input_tokens": 1372,
        "output_tokens": 324,
        "time": 10.0331516250003,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);",
        "final_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);",
        "input_tokens": 1195,
        "output_tokens": 194,
        "time": 7.083723665999969,
        "question": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT AVG(Age) \nFROM Student \nWHERE StuID NOT IN (SELECT StuID FROM Has_Pet);",
        "final_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet);",
        "input_tokens": 1262,
        "output_tokens": 239,
        "time": 8.105233875000067,
        "question": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM continents;",
        "final_sql": "SELECT COUNT(*) FROM continents;",
        "input_tokens": 1405,
        "output_tokens": 60,
        "time": 3.2409379999999146,
        "question": "How many continents are there?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM continents;",
        "final_sql": "SELECT COUNT(*) FROM continents;",
        "input_tokens": 1434,
        "output_tokens": 78,
        "time": 4.271680291999928,
        "question": "What is the number of continents?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;",
        "final_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;",
        "input_tokens": 1707,
        "output_tokens": 260,
        "time": 7.961656250000033,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nGROUP BY c.ContId, c.Continent;",
        "final_sql": "SELECT c.ContId, c.Continent, COUNT(co.CountryId) AS NumCountries FROM continents c JOIN countries co ON c.ContId = co.Continent GROUP BY c.ContId, c.Continent;",
        "input_tokens": 1759,
        "output_tokens": 303,
        "time": 9.39088158300001,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM countries;",
        "final_sql": "SELECT COUNT(*) FROM countries;",
        "input_tokens": 1411,
        "output_tokens": 67,
        "time": 3.9633042500004194,
        "question": "How many countries are listed?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM countries;",
        "final_sql": "SELECT COUNT(*) FROM countries;",
        "input_tokens": 1455,
        "output_tokens": 97,
        "time": 4.879768917000092,
        "question": "How many countries exist?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT cm.FullName, cm.Id, COUNT(ml.ModelId) AS NumberOfModels\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.FullName, cm.Id;",
        "final_sql": "SELECT cm.Maker, cm.Id, COUNT(ml.ModelId) AS NumberOfModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Maker, cm.Id;",
        "input_tokens": 1633,
        "output_tokens": 218,
        "time": 7.3384017080002195,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName;",
        "final_sql": "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;",
        "input_tokens": 1715,
        "output_tokens": 263,
        "time": 8.674146875000133,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT Model\nFROM model_list\nWHERE ModelId = (\n    SELECT MakeId\n    FROM cars_data\n    WHERE Horsepower = (\n        SELECT MIN(Horsepower)\n        FROM cars_data\n    )\n);",
        "final_sql": "SELECT Model FROM model_list WHERE ModelId = (   SELECT Maker   FROM car_makers   WHERE Id = (     SELECT MakeId     FROM cars_data     WHERE Id = (       SELECT MIN(Id)       FROM cars_data     )   ) );",
        "input_tokens": 1591,
        "output_tokens": 219,
        "time": 7.133012792000045,
        "question": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM cars_data c\nJOIN car_names n ON c.Id = n.MakeId\nJOIN model_list m ON n.Model = m.Model\nWHERE c.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "final_sql": "SELECT m.Model FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list m ON n.Model = m.Model WHERE c.Horsepower = (SELECT MIN(Horsepower) FROM cars_data)",
        "input_tokens": 1655,
        "output_tokens": 242,
        "time": 8.5619207499999,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_names cn ON m.ModelId = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);",
        "input_tokens": 1673,
        "output_tokens": 252,
        "time": 8.158359791999828,
        "question": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM cars_data c\nJOIN car_names n ON c.Id = n.MakeId\nJOIN model_list m ON n.Model = m.Model\nWHERE c.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "final_sql": "SELECT m.Model FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list m ON n.Model = m.Model WHERE c.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "input_tokens": 1683,
        "output_tokens": 256,
        "time": 8.820720290999816,
        "question": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;",
        "final_sql": "SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;",
        "input_tokens": 1835,
        "output_tokens": 358,
        "time": 11.490528457999972,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT DISTINCT cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = 1970;",
        "final_sql": "SELECT DISTINCT cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;",
        "input_tokens": 1802,
        "output_tokens": 337,
        "time": 10.822292541000024,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT car_makers.Maker, cars_data.Year\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nJOIN car_names ON model_list.Model = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);",
        "final_sql": "SELECT car_names.Make, cars_data.Year FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = (SELECT MIN(Year) FROM cars_data);",
        "input_tokens": 1850,
        "output_tokens": 383,
        "time": 11.647823750000043,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT cm.Maker, cd.Year\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year = (SELECT MIN(Year) FROM cars_data)",
        "final_sql": "SELECT cm.Maker, cd.Year FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data)",
        "input_tokens": 1771,
        "output_tokens": 321,
        "time": 10.310418083000059,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT DISTINCT model_list.Model\nFROM model_list\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Year > 1980;",
        "final_sql": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year > 1980;",
        "input_tokens": 1651,
        "output_tokens": 241,
        "time": 8.468757083999662,
        "question": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT DISTINCT m.Model\nFROM model_list m\nJOIN car_names cn ON m.ModelId = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Year > 1980;",
        "final_sql": "SELECT DISTINCT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;",
        "input_tokens": 1657,
        "output_tokens": 239,
        "time": 8.459000875000129,
        "question": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT c.Continent, COUNT(cm.Id) AS MakerCount\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nJOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;",
        "final_sql": "SELECT c.Continent, COUNT(cm.Id) AS MakerCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.ContId = cm.Country GROUP BY c.Continent;",
        "input_tokens": 1748,
        "output_tokens": 302,
        "time": 9.593920540999989,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount\nFROM continents c\nJOIN countries co ON c.ContId = co.Continent\nJOIN car_makers cm ON co.CountryId = cm.Country\nGROUP BY c.Continent;",
        "final_sql": "SELECT c.Continent, COUNT(cm.Id) AS CarMakersCount FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;",
        "input_tokens": 1796,
        "output_tokens": 336,
        "time": 10.6117788749998,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryName\nORDER BY COUNT(cm.Id) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;",
        "input_tokens": 1717,
        "output_tokens": 277,
        "time": 8.7728967500002,
        "question": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryName\nORDER BY COUNT(cm.Id) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;",
        "input_tokens": 1713,
        "output_tokens": 276,
        "time": 10.411775709000267,
        "question": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker\nGROUP BY car_makers.FullName;",
        "final_sql": "SELECT car_makers.FullName, COUNT(model_list.ModelId) AS ModelCount FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;",
        "input_tokens": 1689,
        "output_tokens": 247,
        "time": 8.57073225000022,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "db_id": "car_1",
        "gold_query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
    },
    {
        "baseline_sql": "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.FullName;",
        "final_sql": "SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS NumModels FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.FullName;",
        "input_tokens": 1729,
        "output_tokens": 275,
        "time": 8.877138916000149,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "db_id": "car_1",
        "gold_query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    {
        "baseline_sql": "SELECT Accelerate\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';",
        "final_sql": "SELECT Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND model_list.Model = 'hornet sportabout (sw)';",
        "input_tokens": 1852,
        "output_tokens": 383,
        "time": 11.738875208000081,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT Accelerate\nFROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE car_makers.Maker = 'amc' AND car_names.Make = 'hornet sportabout (sw)';",
        "final_sql": "SELECT cars_data.Accelerate FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'amc' AND car_names.Make = 'hornet sportabout (sw)';",
        "input_tokens": 1878,
        "output_tokens": 407,
        "time": 13.077259083999706,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM car_makers\nJOIN countries ON car_makers.Country = countries.CountryId\nWHERE countries.CountryName = 'france';",
        "final_sql": "SELECT COUNT(*) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'france';",
        "input_tokens": 1651,
        "output_tokens": 242,
        "time": 7.8787399580000965,
        "question": "How many car makers are there in france?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT car_makers.Id)\nFROM car_makers\nJOIN countries ON car_makers.Country = countries.CountryId\nWHERE countries.CountryName = 'France';",
        "final_sql": "SELECT COUNT(DISTINCT car_makers.Id) FROM car_makers JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'France';",
        "input_tokens": 1644,
        "output_tokens": 234,
        "time": 8.645862083000338,
        "question": "What is the number of makers of care in France?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT m.ModelId) AS TotalCarModels\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'usa';",
        "final_sql": "SELECT COUNT(DISTINCT m.ModelId) AS TotalCarModels FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';",
        "input_tokens": 1639,
        "output_tokens": 242,
        "time": 8.262260999999853,
        "question": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE countries.CountryName = 'United States';",
        "final_sql": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States';",
        "input_tokens": 1646,
        "output_tokens": 234,
        "time": 8.000835625000036,
        "question": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT AVG(c.MPG) \nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nJOIN car_makers cm ON m.Maker = cm.Id\nWHERE c.Cylinders = 4;",
        "final_sql": "SELECT AVG(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id WHERE c.Cylinders = 4;",
        "input_tokens": 1680,
        "output_tokens": 248,
        "time": 8.158782292000069,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT AVG(c.MPG) \nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nJOIN car_makers cm ON m.Maker = cm.Id\nWHERE c.Cylinders = 4;",
        "final_sql": "SELECT AVG(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id WHERE c.Cylinders = 4;",
        "input_tokens": 1682,
        "output_tokens": 253,
        "time": 8.76882650000016,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT MIN(Weight) FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;",
        "final_sql": "SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;",
        "input_tokens": 1911,
        "output_tokens": 419,
        "time": 12.458568084000035,
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT MIN(Weight) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.ModelId \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nWHERE cars_data.Cylinders = 8 \nAND cars_data.Year = 1974;",
        "final_sql": "SELECT MIN(Weight) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE cars_data.Cylinders = 8 AND cars_data.Year = 1974;",
        "input_tokens": 1988,
        "output_tokens": 481,
        "time": 14.411274500000218,
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT cm.\"Maker\", ml.\"Model\"\nFROM \"car_makers\" cm\nJOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"",
        "final_sql": "SELECT cm.\"Maker\", ml.\"Model\" FROM \"car_makers\" cm JOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"",
        "input_tokens": 1554,
        "output_tokens": 174,
        "time": 6.619787999999971,
        "question": "What are all the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT cm.\"Maker\", ml.\"Model\"\nFROM \"car_makers\" cm\nJOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"",
        "final_sql": "SELECT cm.\"Maker\", ml.\"Model\" FROM \"car_makers\" cm JOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"",
        "input_tokens": 1551,
        "output_tokens": 174,
        "time": 7.544392459000392,
        "question": "What are the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT c.\"CountryId\", c.\"CountryName\"\nFROM \"countries\" c\nINNER JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\"",
        "final_sql": "SELECT c.\"CountryId\", c.\"CountryName\" FROM \"countries\" c INNER JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\"",
        "input_tokens": 1615,
        "output_tokens": 206,
        "time": 7.849482541999805,
        "question": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT countries.CountryId, countries.CountryName\nFROM countries\nINNER JOIN car_makers ON countries.CountryId = car_makers.Country;",
        "final_sql": "SELECT countries.CountryId, countries.CountryName FROM countries INNER JOIN car_makers ON countries.CountryId = car_makers.Country;",
        "input_tokens": 1572,
        "output_tokens": 166,
        "time": 7.2392426250003155,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;",
        "input_tokens": 1516,
        "output_tokens": 125,
        "time": 5.316148083999906,
        "question": "What is the number of the cars with horsepower more than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Horsepower > 150;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150;",
        "input_tokens": 1516,
        "output_tokens": 125,
        "time": 5.528491292000126,
        "question": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT Year, AVG(Weight) AS AverageWeight\nFROM cars_data\nGROUP BY Year;",
        "final_sql": "SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;",
        "input_tokens": 1505,
        "output_tokens": 128,
        "time": 4.946873792000133,
        "question": "What is the average weight of cars each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT Year, AVG(Weight) AS AverageWeight, AVG(Year) AS AverageYear\nFROM cars_data\nGROUP BY Year;",
        "final_sql": "SELECT Year, AVG(Weight) AS AverageWeight, Year AS AverageYear FROM cars_data GROUP BY Year;",
        "input_tokens": 1516,
        "output_tokens": 141,
        "time": 5.6947640830003365,
        "question": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nWHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe')\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3;",
        "final_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;",
        "input_tokens": 1841,
        "output_tokens": 380,
        "time": 11.746706791999713,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries c\nJOIN car_makers cm ON c.CountryId = cm.Country\nGROUP BY c.CountryName\nHAVING COUNT(DISTINCT cm.Id) >= 3\nAND c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe');",
        "final_sql": "SELECT c.CountryName FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'Europe') GROUP BY c.CountryName HAVING COUNT(DISTINCT cm.Id) >= 3;",
        "input_tokens": 1752,
        "output_tokens": 309,
        "time": 10.307825832999697,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT MAX(cd.Horsepower), cm.Maker\nFROM cars_data cd\nJOIN model_list ml ON cd.Id = ml.ModelId\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cd.Cylinders = 3\nGROUP BY cm.Maker;",
        "final_sql": "SELECT MAX(cd.Horsepower), cm.Maker FROM cars_data cd JOIN model_list ml ON cd.Id = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE cd.Cylinders = 3 GROUP BY cm.Maker;",
        "input_tokens": 1735,
        "output_tokens": 297,
        "time": 10.008284667000225,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT c.\"Make\", MAX(cd.\"Horsepower\") AS \"MaxHorsepower\"\nFROM car_makers c\nJOIN model_list ml ON c.\"Id\" = ml.\"Maker\"\nJOIN car_names cn ON ml.\"ModelId\" = cn.\"MakeId\"\nJOIN cars_data cd ON cn.\"Model\" = cd.\"Model\"\nWHERE cd.\"Cylinders\" = 3\nGROUP BY c.\"Make\"",
        "final_sql": "SELECT cm.\"Make\", MAX(cd.\"Horsepower\") AS \"MaxHorsepower\" FROM car_makers cm JOIN model_list ml ON cm.\"Id\" = ml.\"Maker\" JOIN car_names cn ON ml.\"ModelId\" = cn.\"MakeId\" JOIN cars_data cd ON cn.\"Model\" = cd.\"Model\" WHERE cd.\"Cylinders\" = 3 GROUP BY cm.\"Make\"",
        "input_tokens": 1939,
        "output_tokens": 449,
        "time": 13.586215874999652,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_names cn ON m.ModelId = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "input_tokens": 1693,
        "output_tokens": 256,
        "time": 8.672325167000054,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model\nFROM model_list\nJOIN car_names ON model_list.ModelId = car_names.Model\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nORDER BY CAST(cars_data.MPG AS INTEGER) DESC\nLIMIT 1;",
        "final_sql": "SELECT model_list.Model FROM model_list JOIN car_names ON model_list.ModelId = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id ORDER BY CAST(cars_data.MPG AS INTEGER) DESC LIMIT 1;",
        "input_tokens": 1730,
        "output_tokens": 317,
        "time": 9.934853208999812,
        "question": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "gold_query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
    },
    {
        "baseline_sql": "SELECT AVG(Horsepower) \nFROM cars_data \nJOIN car_names ON cars_data.Id = car_names.MakeId \nJOIN model_list ON car_names.Model = model_list.Model \nJOIN car_makers ON model_list.Maker = car_makers.Id \nJOIN countries ON car_makers.Country = countries.CountryId \nJOIN continents ON countries.Continent = continents.ContId \nWHERE Year < 1980;",
        "final_sql": "SELECT AVG(Horsepower) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId JOIN continents ON countries.Continent = continents.ContId WHERE cars_data.Year < 1980;",
        "input_tokens": 1927,
        "output_tokens": 451,
        "time": 13.757946249999804,
        "question": "What is the average horsepower of the cars before 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "baseline_sql": "SELECT AVG(Horsepower) \nFROM cars_data \nWHERE Year < 1980;",
        "final_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980;",
        "input_tokens": 1467,
        "output_tokens": 94,
        "time": 4.060605832999499,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select avg(horsepower) from cars_data where year  <  1980;"
    },
    {
        "baseline_sql": "SELECT AVG(c.Edispl) \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'volvo';",
        "final_sql": "SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cn.Model = 'volvo';",
        "input_tokens": 1768,
        "output_tokens": 323,
        "time": 10.210165208000035,
        "question": "What is the average edispl of the cars of model volvo?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT AVG(c.Edispl)\nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nJOIN countries co ON cm.Country = co.CountryId\nWHERE co.CountryName = 'Sweden' AND cm.Maker = 'Volvo';",
        "final_sql": "SELECT AVG(c.Edispl) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE co.CountryName = 'Sweden' AND cm.Maker = 'Volvo';",
        "input_tokens": 1896,
        "output_tokens": 431,
        "time": 13.176788750000014,
        "question": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT cylinders, MAX(accelerate) AS max_accelerate\nFROM cars_data\nGROUP BY cylinders;",
        "final_sql": "SELECT Cylinders, MAX(Accelerate) AS max_accelerate FROM cars_data GROUP BY Cylinders;",
        "input_tokens": 1489,
        "output_tokens": 122,
        "time": 4.675105499999518,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT MAX(c.Accelerate)\nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN countries co ON cm.Country = co.CountryId\nJOIN continents ct ON co.Continent = ct.ContId\nGROUP BY c.Cylinders;",
        "final_sql": "SELECT MAX(c.Accelerate) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model GROUP BY ml.Model, c.Cylinders;",
        "input_tokens": 1839,
        "output_tokens": 363,
        "time": 11.021807375000208,
        "question": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_names cn ON m.ModelId = cn.Model\nGROUP BY m.Model\nHAVING COUNT(DISTINCT cn.Make) = (\n    SELECT MAX(make_count)\n    FROM (\n        SELECT COUNT(DISTINCT cn.Make) AS make_count\n        FROM model_list m\n        JOIN car_names cn ON m.ModelId = cn.Model\n        GROUP BY m.Model\n    )\n);",
        "final_sql": "SELECT cm.Maker, COUNT(DISTINCT cn.Make) AS make_count FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model GROUP BY cm.Maker ORDER BY make_count DESC LIMIT 1;",
        "input_tokens": 1678,
        "output_tokens": 262,
        "time": 8.668706833000215,
        "question": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_names cn ON m.ModelId = cn.Model\nGROUP BY m.Model\nORDER BY COUNT(DISTINCT cn.Make) DESC\nLIMIT 1;",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_names cn ON m.ModelId = cn.Model GROUP BY m.Model ORDER BY COUNT(DISTINCT cn.Make) DESC LIMIT 1;",
        "input_tokens": 1641,
        "output_tokens": 245,
        "time": 8.672207499999786,
        "question": "What model has the most different versions?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "input_tokens": 1505,
        "output_tokens": 126,
        "time": 4.991910083000221,
        "question": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 4;",
        "input_tokens": 1545,
        "output_tokens": 149,
        "time": 5.908658875000583,
        "question": "What is the number of cars with more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;",
        "input_tokens": 1598,
        "output_tokens": 189,
        "time": 609.0662372920006,
        "question": "how many cars were produced in 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Year = 1980;",
        "input_tokens": 1514,
        "output_tokens": 128,
        "time": 5.905285666999589,
        "question": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE car_makers.FullName = 'American Motor Company';",
        "final_sql": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.FullName = 'American Motor Company';",
        "input_tokens": 1644,
        "output_tokens": 219,
        "time": 8.15828062500077,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM model_list \nJOIN car_makers ON model_list.Maker = car_makers.Id \nWHERE car_makers.Maker = 'American Motor Company';",
        "final_sql": "SELECT COUNT(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company';",
        "input_tokens": 1561,
        "output_tokens": 164,
        "time": 7.645473042000049,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT cm.\"FullName\", cm.\"Id\"\nFROM \"car_makers\" cm\nJOIN (\n    SELECT \"Maker\", COUNT(*) AS num_models\n    FROM \"model_list\"\n    GROUP BY \"Maker\"\n    HAVING num_models > 3\n) m ON cm.\"Id\" = m.\"Maker\";",
        "final_sql": "SELECT cm.\"FullName\", cm.\"Id\" FROM \"car_makers\" cm JOIN (   SELECT \"Maker\", COUNT(*) AS num_models   FROM \"model_list\"   GROUP BY \"Maker\"   HAVING num_models > 3 ) m ON cm.\"Id\" = m.\"Maker\";",
        "input_tokens": 1720,
        "output_tokens": 289,
        "time": 9.69986612500088,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT cm.Id, cm.Maker\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.Maker\nHAVING COUNT(ml.ModelId) > 3;",
        "final_sql": "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;",
        "input_tokens": 1657,
        "output_tokens": 239,
        "time": 9.331896874999984,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT DISTINCT m.Model\nFROM car_makers cm\nJOIN model_list m ON cm.Id = m.Maker\nJOIN car_names cn ON m.ModelId = cn.MakeId\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;",
        "final_sql": "SELECT DISTINCT m.Model FROM car_makers cm JOIN model_list m ON cm.Id = m.Maker JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;",
        "input_tokens": 1831,
        "output_tokens": 356,
        "time": 10.952406707999216,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN cars_data cd ON cd.Id = m.ModelId\nWHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;",
        "final_sql": "SELECT DISTINCT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN cars_data cd ON cd.Id = m.ModelId WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;",
        "input_tokens": 1751,
        "output_tokens": 297,
        "time": 12.943341166999744,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Year\nFROM cars_data\nWHERE Weight >= 3000 AND Weight <= 4000;",
        "final_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;",
        "input_tokens": 1547,
        "output_tokens": 136,
        "time": 6.444296499999837,
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT DISTINCT c1.Year\nFROM cars_data c1\nWHERE c1.Weight < 4000\nINTERSECT\nSELECT DISTINCT c2.Year\nFROM cars_data c2\nWHERE c2.Weight > 3000;",
        "final_sql": "SELECT DISTINCT c1.Year FROM cars_data c1 WHERE c1.Weight < 4000 INTERSECT SELECT DISTINCT c2.Year FROM cars_data c2 WHERE c2.Weight > 3000;",
        "input_tokens": 1656,
        "output_tokens": 210,
        "time": 7.93097516600028,
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT c.Horsepower\nFROM cars_data c\nWHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);",
        "final_sql": "SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);",
        "input_tokens": 1552,
        "output_tokens": 162,
        "time": 6.722700416999942,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT c.Horsepower\nFROM cars_data c\nWHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);",
        "final_sql": "SELECT c.Horsepower FROM cars_data c WHERE c.Accelerate = (SELECT MAX(Accelerate) FROM cars_data);",
        "input_tokens": 1552,
        "output_tokens": 162,
        "time": 7.035983542000395,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(c.Cylinders) \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.Model\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE cm.Maker = 'volvo'",
        "final_sql": "SELECT MIN(c.Cylinders) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.Model JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo'",
        "input_tokens": 1759,
        "output_tokens": 312,
        "time": 10.614231583000219,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(c.Cylinders)\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker\nJOIN car_names cn ON ml.Model = cn.Model\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cm.Maker = 'volvo'",
        "final_sql": "SELECT MIN(cd.Cylinders) FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cm.Maker = 'volvo'",
        "input_tokens": 1810,
        "output_tokens": 347,
        "time": 10.821084291000261,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (\n    SELECT MAX(Accelerate) \n    FROM cars_data \n    WHERE Horsepower = (\n        SELECT MAX(Horsepower) \n        FROM cars_data\n    )\n);",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Accelerate)   FROM cars_data   WHERE Horsepower = (     SELECT MAX(Horsepower)     FROM cars_data   ) );",
        "input_tokens": 1704,
        "output_tokens": 272,
        "time": 9.690566499999477,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM cars_data \nWHERE Accelerate > (\n    SELECT MAX(Accelerate) \n    FROM cars_data \n    WHERE Horsepower = (\n        SELECT MAX(Horsepower) \n        FROM cars_data\n    )\n);",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (   SELECT MAX(Accelerate)   FROM cars_data   WHERE Horsepower = (     SELECT MAX(CAST(Horsepower AS INTEGER))     FROM cars_data   ) );",
        "input_tokens": 1669,
        "output_tokens": 248,
        "time": 8.465858708000269,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT c.CountryId) \nFROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nGROUP BY c.CountryId \nHAVING COUNT(DISTINCT cm.Id) > 2;",
        "final_sql": "SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(DISTINCT cm.Id) > 2;",
        "input_tokens": 1726,
        "output_tokens": 294,
        "time": 9.900779832999433,
        "question": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT c.CountryId) \nFROM countries c \nJOIN car_makers cm ON c.CountryId = cm.Country \nGROUP BY c.CountryId \nHAVING COUNT(DISTINCT cm.Id) > 2;",
        "final_sql": "SELECT COUNT(DISTINCT c.CountryId) FROM countries c JOIN car_makers cm ON c.CountryId = cm.Country GROUP BY c.CountryId HAVING COUNT(cm.Id) > 2;",
        "input_tokens": 1747,
        "output_tokens": 299,
        "time": 10.920076499999595,
        "question": "What is the number of countries with more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "input_tokens": 1503,
        "output_tokens": 127,
        "time": 5.802951083999687,
        "question": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "input_tokens": 1596,
        "output_tokens": 187,
        "time": 6.630241500000011,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN car_names cn ON m.ModelId = cn.MakeId\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Cylinders = 4\nORDER BY cd.Horsepower DESC\nLIMIT 1;",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.Model = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;",
        "input_tokens": 1835,
        "output_tokens": 378,
        "time": 11.542297832999793,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN car_names cn ON m.ModelId = cn.MakeId\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Cylinders = 4\nORDER BY cd.Horsepower DESC\nLIMIT 1;",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Cylinders = 4 ORDER BY cd.Horsepower DESC LIMIT 1;",
        "input_tokens": 1840,
        "output_tokens": 378,
        "time": 11.842109000000164,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT cn.MakeId, cn.Make\nFROM car_names cn\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data)\nAND cd.Cylinders <= 3;",
        "final_sql": "SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders <= 3;",
        "input_tokens": 1716,
        "output_tokens": 253,
        "time": 9.084650499999952,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    {
        "baseline_sql": "SELECT DISTINCT car_names.MakeId, car_names.Make\nFROM car_names\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN cars_data ON car_names.MakeId = cars_data.Id\nWHERE cars_data.Cylinders < 4\nAND cars_data.Horsepower > (\n    SELECT MIN(Horsepower)\n    FROM cars_data\n)",
        "final_sql": "SELECT DISTINCT car_names.MakeId, car_names.Make FROM car_names JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Cylinders < 4 AND cars_data.Horsepower > (   SELECT MIN(Horsepower)   FROM cars_data )",
        "input_tokens": 1893,
        "output_tokens": 401,
        "time": 13.58429441699991,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "gold_query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
    },
    {
        "baseline_sql": "SELECT MAX(c.MPG) \nFROM cars_data c\nJOIN model_list m ON c.Id = m.ModelId\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN countries co ON cm.Country = co.CountryId\nWHERE c.Cylinders = 8 AND c.Year < 1980;",
        "final_sql": "SELECT MAX(c.MPG) FROM cars_data c JOIN model_list m ON c.Id = m.ModelId JOIN car_makers cm ON m.Maker = cm.Id JOIN countries co ON cm.Country = co.CountryId WHERE c.Cylinders = 8 AND c.Year < 1980;",
        "input_tokens": 1850,
        "output_tokens": 370,
        "time": 12.460218166999766,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT MAX(c.MPG) \nFROM cars_data c\nJOIN car_names cn ON c.Id = cn.MakeId\nJOIN model_list ml ON cn.Model = ml.ModelId\nJOIN car_makers cm ON ml.Maker = cm.Id\nWHERE (c.Cylinders = 8 OR c.Year < 1980)",
        "final_sql": "SELECT MAX(c.MPG) FROM cars_data c JOIN car_names cn ON c.Id = cn.MakeId JOIN model_list ml ON cn.Model = ml.ModelId JOIN car_makers cm ON ml.Maker = cm.Id WHERE (c.Cylinders = 8 OR c.Year < 1980)",
        "input_tokens": 1865,
        "output_tokens": 378,
        "time": 13.899259124999844,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN car_names cn ON m.ModelId = cn.MakeId\nJOIN cars_data cd ON cn.MakeId = cd.Id\nWHERE cd.Weight < 3500\nAND cm.Maker <> 'Ford Motor Company';",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN car_names cn ON m.ModelId = cn.MakeId JOIN cars_data cd ON cn.Model = cd.Id WHERE cd.Weight < 3500 AND cm.Maker <> 'Ford Motor Company';",
        "input_tokens": 1843,
        "output_tokens": 372,
        "time": 11.849423582999407,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT m.Model\nFROM model_list m\nJOIN car_makers cm ON m.Maker = cm.Id\nJOIN countries c ON cm.Country = c.CountryId\nJOIN cars_data cd ON m.ModelId = cd.Id\nWHERE cd.Weight < 3500 AND cm.Maker <> 'Ford Motor Company'",
        "final_sql": "SELECT m.Model FROM model_list m JOIN car_makers cm ON m.Maker = cm.Id JOIN countries c ON cm.Country = c.CountryId JOIN cars_data cd ON m.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.Maker <> 'Ford Motor Company'",
        "input_tokens": 1891,
        "output_tokens": 392,
        "time": 12.872961332999694,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT c.\"CountryName\"\nFROM \"countries\" c\nLEFT JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\"\nWHERE cm.\"Id\" IS NULL;",
        "final_sql": "SELECT c.\"CountryName\" FROM \"countries\" c LEFT JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\" WHERE cm.\"Id\" IS NULL;",
        "input_tokens": 1674,
        "output_tokens": 244,
        "time": 9.18436762500005,
        "question": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT c.\"CountryName\"\nFROM \"countries\" c\nLEFT JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\"\nWHERE cm.\"Id\" IS NULL;",
        "final_sql": "SELECT c.\"CountryName\" FROM \"countries\" c LEFT JOIN \"car_makers\" cm ON c.\"CountryId\" = cm.\"Country\" WHERE cm.\"Id\" IS NULL;",
        "input_tokens": 1672,
        "output_tokens": 251,
        "time": 9.385124166999958,
        "question": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT cm.Id, cm.Maker\nFROM car_makers cm\nINNER JOIN model_list ml ON cm.Id = ml.Maker\nGROUP BY cm.Id, cm.Maker\nHAVING COUNT(ml.ModelId) >= 2 AND COUNT(DISTINCT cm.Id) > 3;",
        "final_sql": "SELECT cm.Id, cm.Maker FROM car_makers cm INNER JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.ModelId) >= 2 AND COUNT(DISTINCT cm.Id) > 3;",
        "input_tokens": 1826,
        "output_tokens": 342,
        "time": 11.336696542000027,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "gold_query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT cm.\"Id\", cm.\"Maker\"\nFROM \"car_makers\" cm\nJOIN (\n    SELECT \"Maker\", COUNT(DISTINCT \"Model\") AS num_models\n    FROM \"model_list\"\n    GROUP BY \"Maker\"\n    HAVING num_models >= 2\n) m ON cm.\"Id\" = m.\"Maker\"\nJOIN (\n    SELECT \"Maker\", COUNT(*) AS num_cars\n    FROM \"car_names\"\n    GROUP BY \"Maker\"\n    HAVING num_cars > 3\n) c ON cm.\"Id\" = c.\"Maker\";",
        "final_sql": "SELECT cm.\"Id\", cm.\"Maker\" FROM \"car_makers\" cm JOIN (   SELECT \"Maker\", COUNT(DISTINCT \"Model\") AS num_models   FROM \"model_list\"   GROUP BY \"Maker\"   HAVING COUNT(DISTINCT \"Model\") >= 2 ) m ON cm.\"Id\" = m.\"Maker\" JOIN (   SELECT \"Maker\", COUNT(*) AS num_cars   FROM \"car_names\"   GROUP BY \"Maker\"   HAVING COUNT(*) > 3 ) c ON cm.\"Id\" = c.\"Maker\";",
        "input_tokens": 2238,
        "output_tokens": 659,
        "time": 20.04268333300024,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT c.\"CountryId\", c.\"CountryName\"\nFROM \"countries\" c\nWHERE c.\"CountryId\" IN (\n    SELECT cm.\"Country\"\n    FROM \"car_makers\" cm\n    GROUP BY cm.\"Country\"\n    HAVING COUNT(DISTINCT cm.\"Id\") > 3\n)\nOR c.\"CountryId\" IN (\n    SELECT m.\"Maker\"\n    FROM \"model_list\" m\n    INNER JOIN \"car_names\" cn ON m.\"ModelId\" = cn.\"Model\"\n    WHERE cn.\"Make\" = 'fiat'\n)",
        "final_sql": "SELECT c.\"CountryId\", c.\"CountryName\" FROM \"countries\" c WHERE c.\"CountryId\" IN (   SELECT cm.\"Country\"   FROM \"car_makers\" cm   GROUP BY cm.\"Country\"   HAVING COUNT(DISTINCT cm.\"Id\") > 3 ) OR c.\"CountryId\" IN (   SELECT m.\"Maker\"   FROM \"model_list\" m   INNER JOIN \"car_names\" cn ON m.\"ModelId\" = cn.\"Model\"   WHERE cn.\"Make\" = 'fiat' )",
        "input_tokens": 2086,
        "output_tokens": 546,
        "time": 17.274366999999984,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT c.\"CountryId\", c.\"CountryName\"\nFROM \"countries\" c\nWHERE c.\"CountryId\" IN (\n    SELECT cm.\"Country\"\n    FROM \"car_makers\" cm\n    GROUP BY cm.\"Country\"\n    HAVING COUNT(DISTINCT cm.\"Id\") > 3\n)\nOR c.\"CountryId\" IN (\n    SELECT cm.\"Country\"\n    FROM \"car_makers\" cm\n    INNER JOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"\n    INNER JOIN \"car_names\" cn ON ml.\"Model\" = cn.\"Model\"\n    WHERE cn.\"Make\" = 'fiat'\n)",
        "final_sql": "SELECT c.\"CountryId\", c.\"CountryName\" FROM \"countries\" c WHERE c.\"CountryId\" IN (   SELECT cm.\"Country\"   FROM \"car_makers\" cm   GROUP BY cm.\"Country\"   HAVING COUNT(DISTINCT cm.\"Id\") > 3 ) OR c.\"CountryId\" IN (   SELECT cm.\"Country\"   FROM \"car_makers\" cm   INNER JOIN \"model_list\" ml ON cm.\"Id\" = ml.\"Maker\"   INNER JOIN \"car_names\" cn ON ml.\"Model\" = cn.\"Model\"   WHERE cn.\"Make\" = 'fiat' )",
        "input_tokens": 2278,
        "output_tokens": 701,
        "time": 22.29468020799959,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "gold_query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT Country\nFROM airlines\nWHERE Airline = 'JetBlue Airways';",
        "final_sql": "SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';",
        "input_tokens": 1113,
        "output_tokens": 128,
        "time": 5.786851541999567,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT airlines.Country\nFROM airlines\nWHERE airlines.Airline = 'Jetblue Airways';",
        "final_sql": "SELECT airlines.Country FROM airlines WHERE airlines.Airline = 'Jetblue Airways';",
        "input_tokens": 1107,
        "output_tokens": 134,
        "time": 5.512195499999507,
        "question": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';",
        "input_tokens": 1123,
        "output_tokens": 136,
        "time": 6.928330916999585,
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways';",
        "input_tokens": 1104,
        "output_tokens": 132,
        "time": 5.2797092499995415,
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA';",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1123,
        "output_tokens": 137,
        "time": 5.513567416999649,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation\nFROM airlines\nWHERE Country = 'USA';",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1129,
        "output_tokens": 138,
        "time": 5.597353209000175,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName\nFROM airports\nWHERE City = 'Anthony';",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';",
        "input_tokens": 1130,
        "output_tokens": 146,
        "time": 6.001895374999549,
        "question": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName\nFROM airports\nWHERE City = 'Anthony';",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';",
        "input_tokens": 1141,
        "output_tokens": 148,
        "time": 5.803324624999732,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airlines;",
        "final_sql": "SELECT COUNT(*) FROM airlines;",
        "input_tokens": 1033,
        "output_tokens": 81,
        "time": 4.061866207999628,
        "question": "How many airlines do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airlines;",
        "final_sql": "SELECT COUNT(DISTINCT \"Airline\") FROM airlines;",
        "input_tokens": 1022,
        "output_tokens": 75,
        "time": 4.213333832999524,
        "question": "What is the total number of airlines?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airports;",
        "final_sql": "SELECT COUNT(*) FROM airports;",
        "input_tokens": 1015,
        "output_tokens": 67,
        "time": 4.577058042000317,
        "question": "How many airports do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airports;",
        "final_sql": "SELECT COUNT(*) AS \"Number of Airports\" FROM airports;",
        "input_tokens": 1028,
        "output_tokens": 84,
        "time": 4.469299000000319,
        "question": "Return the number of  airports.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights;",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1012,
        "output_tokens": 65,
        "time": 3.75596433300052,
        "question": "How many flights do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights;",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1000,
        "output_tokens": 59,
        "time": 3.1492271250008343,
        "question": "Return the number of flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT Airline\nFROM airlines\nWHERE Abbreviation = 'UAL';",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';",
        "input_tokens": 1106,
        "output_tokens": 134,
        "time": 7.237697834000755,
        "question": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT Airline\nFROM airlines\nWHERE Abbreviation = 'UAL';",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';",
        "input_tokens": 1130,
        "output_tokens": 150,
        "time": 5.810219791999771,
        "question": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';",
        "final_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1034,
        "output_tokens": 84,
        "time": 3.953247833000205,
        "question": "How many airlines are from USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';",
        "final_sql": "SELECT COUNT(*) FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1043,
        "output_tokens": 86,
        "time": 5.49459433300035,
        "question": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT City, Country\nFROM airports\nWHERE AirportName = 'Alton';",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton';",
        "input_tokens": 1056,
        "output_tokens": 93,
        "time": 4.889275999999882,
        "question": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT City, Country\nFROM airports\nWHERE AirportName = 'Alton';",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton';",
        "input_tokens": 1071,
        "output_tokens": 104,
        "time": 4.68183720900015,
        "question": "Give the city and country for the Alton airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "input_tokens": 1111,
        "output_tokens": 128,
        "time": 5.824533082999551,
        "question": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName\nFROM airports\nWHERE AirportCode = 'AKO';",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "input_tokens": 1122,
        "output_tokens": 136,
        "time": 5.989002292000805,
        "question": "Return the name of the airport with code 'AKO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName\nFROM airports\nWHERE City = 'Aberdeen';",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen';",
        "input_tokens": 1106,
        "output_tokens": 126,
        "time": 5.907071333000204,
        "question": "What are airport names at City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT AirportName\nFROM airports\nWHERE City = 'Aberdeen';",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen';",
        "input_tokens": 1093,
        "output_tokens": 122,
        "time": 4.781042708000314,
        "question": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "input_tokens": 1136,
        "output_tokens": 151,
        "time": 6.0030534170000465,
        "question": "How many flights depart from 'APG'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';",
        "input_tokens": 1066,
        "output_tokens": 99,
        "time": 4.575676041999941,
        "question": "Count the number of flights departing from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "input_tokens": 1058,
        "output_tokens": 104,
        "time": 4.883334416999787,
        "question": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';",
        "input_tokens": 1049,
        "output_tokens": 91,
        "time": 4.062485334000485,
        "question": "Count the number of flights into ATO.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1164,
        "output_tokens": 181,
        "time": 6.926141415999155,
        "question": "How many flights depart from City Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen';",
        "input_tokens": 1210,
        "output_tokens": 217,
        "time": 7.963294250000217,
        "question": "Return the number of flights departing from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1172,
        "output_tokens": 187,
        "time": 6.8199018750001414,
        "question": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1241,
        "output_tokens": 231,
        "time": 8.881835374999355,
        "question": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nJOIN airports AS dest ON flights.DestAirport = dest.AirportCode \nWHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode JOIN airports AS dest ON flights.DestAirport = dest.AirportCode WHERE airports.City = 'Aberdeen' AND dest.City = 'Ashley';",
        "input_tokens": 1380,
        "output_tokens": 320,
        "time": 10.310398499999792,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nWHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';",
        "input_tokens": 1067,
        "output_tokens": 109,
        "time": 605.6007461670006,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');",
        "input_tokens": 1150,
        "output_tokens": 165,
        "time": 6.715835500000139,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'Jetblue Airways';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'Jetblue Airways';",
        "input_tokens": 1276,
        "output_tokens": 256,
        "time": 8.480391957999927,
        "question": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.AirportCode = 'ASY';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY';",
        "input_tokens": 1490,
        "output_tokens": 433,
        "time": 12.948418875000243,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.AirportCode = 'ASY';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'ASY';",
        "input_tokens": 1460,
        "output_tokens": 405,
        "time": 13.424581624999519,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.SourceAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.AirportCode = 'AHD';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD';",
        "input_tokens": 1517,
        "output_tokens": 445,
        "time": 14.77006983299998,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nWHERE airlines.Airline = 'United Airlines' \nAND flights.SourceAirport = 'AHD';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';",
        "input_tokens": 1303,
        "output_tokens": 271,
        "time": 9.798912917000052,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';",
        "input_tokens": 1492,
        "output_tokens": 435,
        "time": 12.93498266700044,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM flights \nJOIN airlines ON flights.Airline = airlines.uid \nJOIN airports ON flights.DestAirport = airports.AirportCode \nWHERE airlines.Airline = 'United Airlines' \nAND airports.City = 'Aberdeen';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.City = 'Aberdeen';",
        "input_tokens": 1469,
        "output_tokens": 424,
        "time": 12.600369415999921,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT airports.City\nFROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport\nGROUP BY airports.City\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1288,
        "output_tokens": 276,
        "time": 8.83496812500016,
        "question": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT airports.City\nFROM airports\nJOIN flights ON airports.AirportCode = flights.DestAirport\nGROUP BY airports.City\nORDER BY COUNT(flights.DestAirport) DESC\nLIMIT 1;",
        "final_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(flights.DestAirport) DESC LIMIT 1;",
        "input_tokens": 1443,
        "output_tokens": 390,
        "time": 12.607128458000261,
        "question": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT airports.City\nFROM airports\nJOIN flights ON airports.AirportCode = flights.SourceAirport\nGROUP BY airports.City\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1292,
        "output_tokens": 276,
        "time": 9.040311083000233,
        "question": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT City\nFROM airports\nWHERE AirportCode = (\n    SELECT SourceAirport\n    FROM flights\n    GROUP BY SourceAirport\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "final_sql": "SELECT City FROM airports WHERE AirportCode = (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   ORDER BY COUNT(*) DESC   LIMIT 1 );",
        "input_tokens": 1306,
        "output_tokens": 290,
        "time": 9.584713250000277,
        "question": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1204,
        "output_tokens": 193,
        "time": 6.871117083000172,
        "question": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1235,
        "output_tokens": 213,
        "time": 7.198153374999492,
        "question": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport\nFROM flights\nGROUP BY SourceAirport\nORDER BY COUNT(*) ASC\nLIMIT 1;",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1229,
        "output_tokens": 211,
        "time": 7.2409825000004275,
        "question": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AirportCode\nFROM airports\nWHERE AirportCode IN (\n    SELECT SourceAirport\n    FROM flights\n    GROUP BY SourceAirport\n    HAVING COUNT(*) = (\n        SELECT MIN(count)\n        FROM (\n            SELECT COUNT(*) as count\n            FROM flights\n            GROUP BY SourceAirport\n        )\n    )\n) OR AirportCode IN (\n    SELECT DestAirport\n    FROM flights\n    GROUP BY DestAirport\n    HAVING COUNT(*) = (\n        SELECT MIN(count)\n        FROM (\n            SELECT COUNT(*) as count\n            FROM flights\n            GROUP BY DestAirport\n        )\n    )\n);",
        "final_sql": "SELECT AirportCode FROM airports WHERE AirportCode IN (   SELECT SourceAirport   FROM flights   GROUP BY SourceAirport   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) as count       FROM flights       GROUP BY SourceAirport     )   ) ) OR AirportCode IN (   SELECT DestAirport   FROM flights   GROUP BY DestAirport   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) as count       FROM flights       GROUP BY DestAirport     )   ) );",
        "input_tokens": 1527,
        "output_tokens": 483,
        "time": 14.540895750000345,
        "question": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline\nFROM flights\nGROUP BY Airline\nHAVING COUNT(*) = (\n    SELECT MAX(count)\n    FROM (\n        SELECT COUNT(*) as count\n        FROM flights\n        GROUP BY Airline\n    )\n);",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) = (   SELECT MAX(count)   FROM (     SELECT COUNT(*) as count     FROM flights     GROUP BY Airline   ) );",
        "input_tokens": 1252,
        "output_tokens": 257,
        "time": 8.801384790999691,
        "question": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline, COUNT(*) AS NumFlights\nFROM flights\nGROUP BY Airline\nORDER BY NumFlights DESC\nLIMIT 1;",
        "final_sql": "SELECT Airline, COUNT(*) AS NumFlights FROM flights GROUP BY Airline ORDER BY NumFlights DESC LIMIT 1;",
        "input_tokens": 1180,
        "output_tokens": 197,
        "time": 7.377445957999953,
        "question": "What airline serves the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT a.Abbreviation, a.Country\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.uid\nORDER BY COUNT(f.FlightNo) ASC\nLIMIT 1;",
        "final_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.FlightNo) ASC LIMIT 1;",
        "input_tokens": 1257,
        "output_tokens": 246,
        "time": 7.954062750000048,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT a.Abbreviation, a.Country\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nGROUP BY a.Abbreviation, a.Country\nHAVING COUNT(f.FlightNo) = (\n    SELECT MIN(flight_count)\n    FROM (\n        SELECT COUNT(f.FlightNo) as flight_count\n        FROM airlines a\n        JOIN flights f ON a.uid = f.Airline\n        GROUP BY a.Abbreviation, a.Country\n    ) AS subquery\n);",
        "final_sql": "SELECT a.Abbreviation, a.Country FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country HAVING COUNT(f.FlightNo) = (   SELECT MIN(flight_count)   FROM (     SELECT COUNT(f.FlightNo) as flight_count     FROM airlines a     JOIN flights f ON a.uid = f.Airline     GROUP BY a.Abbreviation, a.Country   ) AS subquery );",
        "input_tokens": 1425,
        "output_tokens": 390,
        "time": 12.356506874999468,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.Airline\nWHERE flights.SourceAirport = 'AHD';",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';",
        "input_tokens": 1241,
        "output_tokens": 240,
        "time": 8.361991540999952,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.Airline\nWHERE flights.SourceAirport = 'AHD';",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD';",
        "input_tokens": 1248,
        "output_tokens": 233,
        "time": 7.788290167000014,
        "question": "Which airlines have a flight with source airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = 'AHD';",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE flights.DestAirport = 'AHD';",
        "input_tokens": 1405,
        "output_tokens": 354,
        "time": 11.700121332999515,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline\nFROM airlines\nJOIN flights ON airlines.uid = flights.Airline\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportCode = 'AHD';",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD';",
        "input_tokens": 1397,
        "output_tokens": 347,
        "time": 11.432949042000473,
        "question": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f1 ON a.uid = f1.Airline\nJOIN flights f2 ON a.uid = f2.Airline\nJOIN airports apg ON f1.SourceAirport = apg.AirportCode\nJOIN airports cvo ON f2.SourceAirport = cvo.AirportCode\nWHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';",
        "final_sql": "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f1 ON a.uid = f1.Airline JOIN flights f2 ON a.uid = f2.Airline JOIN airports apg ON f1.SourceAirport = apg.AirportCode JOIN airports cvo ON f2.SourceAirport = cvo.AirportCode WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';",
        "input_tokens": 1602,
        "output_tokens": 501,
        "time": 15.737328874999548,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nJOIN airports apg ON f.SourceAirport = apg.AirportCode\nJOIN airports cvo ON f.SourceAirport = cvo.AirportCode\nWHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';",
        "final_sql": "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports apg ON f.SourceAirport = apg.AirportCode JOIN airports cvo ON f.DestAirport = cvo.AirportCode WHERE apg.AirportCode = 'APG' AND cvo.AirportCode = 'CVO';",
        "input_tokens": 1405,
        "output_tokens": 377,
        "time": 12.308384250000017,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nWHERE f.SourceAirport = 'CVO'\nAND f.Airline NOT IN (\n    SELECT a2.uid\n    FROM airlines a2\n    JOIN flights f2 ON a2.uid = f2.Airline\n    WHERE f2.SourceAirport = 'APG'\n);",
        "final_sql": "SELECT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND f.Airline NOT IN (   SELECT a2.uid   FROM airlines a2   JOIN flights f2 ON a2.uid = f2.Airline   WHERE f2.SourceAirport = 'APG' );",
        "input_tokens": 1409,
        "output_tokens": 360,
        "time": 11.991679916999601,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT DISTINCT a.Airline\nFROM airlines a\nJOIN flights f ON a.uid = f.Airline\nJOIN airports ap1 ON f.SourceAirport = ap1.AirportCode\nJOIN airports ap2 ON f.DestAirport = ap2.AirportCode\nWHERE ap1.City = 'CVO'\nAND a.Airline NOT IN (\n    SELECT DISTINCT a2.Airline\n    FROM airlines a2\n    JOIN flights f2 ON a2.uid = f2.Airline\n    JOIN airports ap3 ON f2.SourceAirport = ap3.AirportCode\n    JOIN airports ap4 ON f2.DestAirport = ap4.AirportCode\n    WHERE ap3.City = 'APG'\n)",
        "final_sql": "SELECT DISTINCT a.Airline FROM airlines a JOIN flights f ON a.uid = f.Airline JOIN airports ap1 ON f.SourceAirport = ap1.AirportCode WHERE ap1.City = 'CVO' AND a.Airline NOT IN (   SELECT DISTINCT a2.Airline   FROM airlines a2   JOIN flights f2 ON a2.uid = f2.Airline   JOIN airports ap3 ON f2.SourceAirport = ap3.AirportCode   WHERE ap3.City = 'APG' )",
        "input_tokens": 1696,
        "output_tokens": 574,
        "time": 17.276386999999886,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT Airline\nFROM airlines\nWHERE uid IN (\n    SELECT Airline\n    FROM flights\n    GROUP BY Airline\n    HAVING COUNT(*) >= 10\n);",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) >= 10 );",
        "input_tokens": 1356,
        "output_tokens": 315,
        "time": 10.606045208000069,
        "question": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline\nFROM flights\nGROUP BY Airline\nHAVING COUNT(*) >= 10;",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10;",
        "input_tokens": 1129,
        "output_tokens": 149,
        "time": 5.811306291000619,
        "question": "Which airlines have at least 10 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline\nFROM airlines\nWHERE uid IN (\n    SELECT Airline\n    FROM flights\n    GROUP BY Airline\n    HAVING COUNT(*) < 200\n);",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 );",
        "input_tokens": 1279,
        "output_tokens": 257,
        "time": 1210.8978138330003,
        "question": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT Airline\nFROM airlines\nWHERE uid IN (\n    SELECT Airline\n    FROM flights\n    GROUP BY Airline\n    HAVING COUNT(*) < 200\n);",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (   SELECT Airline   FROM flights   GROUP BY Airline   HAVING COUNT(*) < 200 );",
        "input_tokens": 1366,
        "output_tokens": 328,
        "time": 10.14113825000004,
        "question": "Which airlines have less than 200 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Abbreviation = 'UA');",
        "input_tokens": 1282,
        "output_tokens": 254,
        "time": 9.357085499999812,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nWHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines');",
        "input_tokens": 1228,
        "output_tokens": 220,
        "time": 7.569498124999882,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nWHERE SourceAirport = 'APG';",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';",
        "input_tokens": 1123,
        "output_tokens": 134,
        "time": 4.876854500000263,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nWHERE SourceAirport = 'APG';",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';",
        "input_tokens": 1113,
        "output_tokens": 132,
        "time": 5.085722332999467,
        "question": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nWHERE DestAirport = 'APG';",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG';",
        "input_tokens": 1159,
        "output_tokens": 160,
        "time": 6.008601457999248,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.AirportName = 'APG';",
        "final_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'APG';",
        "input_tokens": 1203,
        "output_tokens": 204,
        "time": 6.963514666999799,
        "question": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT f.FlightNo\nFROM flights f\nJOIN airports a ON f.SourceAirport = a.AirportCode\nWHERE a.City = \"Aberdeen\";",
        "final_sql": "SELECT f.FlightNo FROM flights f JOIN airports a ON f.SourceAirport = a.AirportCode WHERE a.City = 'Aberdeen';",
        "input_tokens": 1205,
        "output_tokens": 198,
        "time": 6.999210292000498,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nJOIN airports ON flights.SourceAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1213,
        "output_tokens": 214,
        "time": 7.340833625000414,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT f.FlightNo\nFROM flights f\nJOIN airports a ON f.DestAirport = a.AirportCode\nWHERE a.City = \"Aberdeen\";",
        "final_sql": "SELECT f.FlightNo FROM flights f JOIN airports a ON f.DestAirport = a.AirportCode WHERE a.AirportName = \"Aberdeen\";",
        "input_tokens": 1312,
        "output_tokens": 283,
        "time": 10.009906250000313,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo\nFROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1204,
        "output_tokens": 205,
        "time": 7.429909167000005,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene';",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportName = 'Aberdeen' OR airports.AirportName = 'Abilene';",
        "input_tokens": 1228,
        "output_tokens": 224,
        "time": 7.959419750000052,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights\nWHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "input_tokens": 1068,
        "output_tokens": 105,
        "time": 4.7816511250002804,
        "question": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT AirportName\nFROM airports\nWHERE AirportCode NOT IN (\n    SELECT SourceAirport\n    FROM flights\n    UNION\n    SELECT DestAirport\n    FROM flights\n);",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport   FROM flights   UNION   SELECT DestAirport   FROM flights );",
        "input_tokens": 1388,
        "output_tokens": 324,
        "time": 610.2959058749993,
        "question": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName\nFROM airports\nWHERE AirportCode NOT IN (\n    SELECT DISTINCT SourceAirport\n    FROM flights\n    UNION\n    SELECT DISTINCT DestAirport\n    FROM flights\n);",
        "final_sql": "SELECT AirportCode, AirportName FROM airports LEFT JOIN flights ON airports.AirportCode = flights.SourceAirport OR airports.AirportCode = flights.DestAirport WHERE flights.SourceAirport IS NULL AND flights.DestAirport IS NULL;",
        "input_tokens": 1262,
        "output_tokens": 260,
        "time": 8.445754875001512,
        "question": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM employee;",
        "final_sql": "SELECT COUNT(*) FROM employee;",
        "input_tokens": 1146,
        "output_tokens": 64,
        "time": 3.4435254580002947,
        "question": "How many employees are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM employee;",
        "final_sql": "SELECT COUNT(*) FROM employee;",
        "input_tokens": 1139,
        "output_tokens": 60,
        "time": 3.8555558329990163,
        "question": "Count the number of employees",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT Name\nFROM employee\nORDER BY Age ASC;",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1239,
        "output_tokens": 123,
        "time": 5.49609054100074,
        "question": "Sort employee names by their age in ascending order.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT Name\nFROM employee\nORDER BY Age ASC;",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1222,
        "output_tokens": 109,
        "time": 4.982918624999002,
        "question": "List the names of employees and sort in ascending order of age.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees\nFROM employee\nGROUP BY City;",
        "final_sql": "SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;",
        "input_tokens": 1212,
        "output_tokens": 112,
        "time": 5.2913503750005475,
        "question": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT City, COUNT(*) AS Num_Employees\nFROM employee\nGROUP BY City;",
        "final_sql": "SELECT City, COUNT(*) AS Num_Employees FROM employee GROUP BY City;",
        "input_tokens": 1272,
        "output_tokens": 153,
        "time": 6.113521416998992,
        "question": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;",
        "input_tokens": 1356,
        "output_tokens": 205,
        "time": 7.344999375000043,
        "question": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT City\nFROM employee\nWHERE Age < 30\nGROUP BY City\nHAVING COUNT(*) > 1;",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;",
        "input_tokens": 1377,
        "output_tokens": 219,
        "time": 6.829604583001128,
        "question": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) AS Number_of_shops\nFROM shop\nGROUP BY Location;",
        "final_sql": "SELECT Location, COUNT(*) AS Number_of_shops FROM shop GROUP BY Location;",
        "input_tokens": 1242,
        "output_tokens": 132,
        "time": 5.593506041999717,
        "question": "Find the number of shops in each location.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) AS Num_Shops\nFROM shop\nGROUP BY Location;",
        "final_sql": "SELECT Location, COUNT(*) AS Num_Shops FROM shop GROUP BY Location;",
        "input_tokens": 1273,
        "output_tokens": 154,
        "time": 6.010023415999967,
        "question": "How many shops are there in each location?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT s.Manager_name, s.District\nFROM shop s\nWHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "final_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "input_tokens": 1300,
        "output_tokens": 155,
        "time": 6.007113333000234,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Manager_name, s.District\nFROM shop s\nWHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "final_sql": "SELECT s.Manager_name, s.District FROM shop s WHERE s.Number_products = (SELECT MAX(Number_products) FROM shop)",
        "input_tokens": 1322,
        "output_tokens": 178,
        "time": 6.493242874999851,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;",
        "final_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;",
        "input_tokens": 1155,
        "output_tokens": 67,
        "time": 4.2658991669995885,
        "question": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT MIN(Number_products) AS Minimum_Number_of_Products, MAX(Number_products) AS Maximum_Number_of_Products FROM shop;",
        "final_sql": "SELECT MIN(Number_products) AS Minimum_Number_of_Products, MAX(Number_products) AS Maximum_Number_of_Products FROM shop;",
        "input_tokens": 1173,
        "output_tokens": 79,
        "time": 4.059348042001147,
        "question": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC;",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1230,
        "output_tokens": 103,
        "time": 4.774962917001176,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name, Location, District\nFROM shop\nORDER BY Number_products DESC;",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1277,
        "output_tokens": 131,
        "time": 4.796433792000244,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);",
        "input_tokens": 1319,
        "output_tokens": 173,
        "time": 6.210757916998773,
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT Name\nFROM shop\nWHERE Number_products > (SELECT AVG(Number_products) FROM shop);",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);",
        "input_tokens": 1263,
        "output_tokens": 134,
        "time": 5.494159124998987,
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID\nORDER BY COUNT(ev.Year_awarded) DESC\nLIMIT 1;",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Year_awarded) DESC LIMIT 1;",
        "input_tokens": 1403,
        "output_tokens": 245,
        "time": 8.367768457999773,
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nGROUP BY e.Employee_ID\nORDER BY COUNT(ev.Employee_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1;",
        "input_tokens": 1409,
        "output_tokens": 248,
        "time": 8.364695666999978,
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation)",
        "input_tokens": 1324,
        "output_tokens": 190,
        "time": 6.628009333000591,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nJOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nORDER BY ev.Bonus DESC\nLIMIT 1;",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;",
        "input_tokens": 1341,
        "output_tokens": 201,
        "time": 7.030563333000828,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;",
        "final_sql": "SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL OR ev.Bonus IS NULL;",
        "input_tokens": 1381,
        "output_tokens": 237,
        "time": 7.749524458000451,
        "question": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT e.Name\nFROM employee e\nLEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID\nWHERE ev.Employee_ID IS NULL;",
        "final_sql": "SELECT e.Name FROM employee e LEFT JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Employee_ID IS NULL;",
        "input_tokens": 1325,
        "output_tokens": 188,
        "time": 6.726214333999451,
        "question": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;",
        "input_tokens": 1439,
        "output_tokens": 266,
        "time": 8.576471750000564,
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Shop_ID\nORDER BY COUNT(h.Employee_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT s.Name FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name ORDER BY COUNT(h.Employee_ID) DESC LIMIT 1;",
        "input_tokens": 1458,
        "output_tokens": 284,
        "time": 8.906696709000244,
        "question": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name\nFROM shop\nWHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "final_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "input_tokens": 1325,
        "output_tokens": 180,
        "time": 6.690561625000555,
        "question": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM shop s\nLEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID\nWHERE h.Employee_ID IS NULL;",
        "final_sql": "SELECT s.Name FROM shop s LEFT JOIN hiring h ON s.Shop_ID = h.Shop_ID WHERE h.Employee_ID IS NULL AND h.Shop_ID = s.Shop_ID;",
        "input_tokens": 1468,
        "output_tokens": 316,
        "time": 9.79593987500084,
        "question": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees\nFROM shop\nJOIN hiring ON shop.Shop_ID = hiring.Shop_ID\nGROUP BY shop.Name;",
        "final_sql": "SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;",
        "input_tokens": 1433,
        "output_tokens": 258,
        "time": 9.18507687500096,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_employees\nFROM shop s\nJOIN hiring h ON s.Shop_ID = h.Shop_ID\nGROUP BY s.Name;",
        "final_sql": "SELECT s.Name, COUNT(h.Employee_ID) AS Number_of_employees FROM shop s JOIN hiring h ON s.Shop_ID = h.Shop_ID GROUP BY s.Name;",
        "input_tokens": 1445,
        "output_tokens": 264,
        "time": 8.680602291999094,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT SUM(Bonus) FROM evaluation;",
        "final_sql": "SELECT SUM(Bonus) FROM evaluation;",
        "input_tokens": 1115,
        "output_tokens": 39,
        "time": 3.8517617080015043,
        "question": "What is total bonus given in all evaluations?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT SUM(Bonus) FROM evaluation;",
        "final_sql": "SELECT SUM(Bonus) FROM evaluation;",
        "input_tokens": 1184,
        "output_tokens": 79,
        "time": 4.477475792000405,
        "question": "Find the total amount of bonus given in all the evaluations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT * FROM hiring;",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1258,
        "output_tokens": 150,
        "time": 5.791599000000133,
        "question": "Give me all the information about hiring.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT * FROM hiring;",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1252,
        "output_tokens": 147,
        "time": 5.501333292000709,
        "question": "What is all the information about hiring?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.District\nFROM shop s\nWHERE s.Number_products < 3000\nINTERSECT\nSELECT DISTINCT s.District\nFROM shop s\nWHERE s.Number_products > 10000;",
        "final_sql": "SELECT DISTINCT s.District FROM shop s WHERE s.Number_products < 3000 INTERSECT SELECT DISTINCT s.District FROM shop s WHERE s.Number_products > 10000;",
        "input_tokens": 1404,
        "output_tokens": 231,
        "time": 7.745228583000426,
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT DISTINCT s1.District\nFROM shop s1\nJOIN shop s2 ON s1.District = s2.District\nWHERE s1.Number_products < 3000\nAND s2.Number_products > 10000;",
        "final_sql": "SELECT DISTINCT s1.District FROM shop s1 JOIN shop s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;",
        "input_tokens": 1424,
        "output_tokens": 234,
        "time": 8.261291583001366,
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
        "final_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
        "input_tokens": 1122,
        "output_tokens": 47,
        "time": 4.271352957999625,
        "question": "How many different store locations are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
        "final_sql": "SELECT COUNT(DISTINCT Location) FROM shop;",
        "input_tokens": 1122,
        "output_tokens": 47,
        "time": 603.743739042,
        "question": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Documents;",
        "final_sql": "SELECT COUNT(*) FROM Documents;",
        "input_tokens": 1220,
        "output_tokens": 70,
        "time": 3.7440612919999694,
        "question": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Documents;",
        "final_sql": "SELECT COUNT(*) FROM Documents;",
        "input_tokens": 1208,
        "output_tokens": 64,
        "time": 3.5511677079994115,
        "question": "Count the number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;",
        "final_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
        "input_tokens": 1301,
        "output_tokens": 114,
        "time": 5.397121625001091,
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT Document_ID, Document_Name, Document_Description\nFROM Documents;",
        "final_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
        "input_tokens": 1233,
        "output_tokens": 71,
        "time": 3.6999860830001126,
        "question": "What are the ids, names, and descriptions for all documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT Documents.Document_Name, Documents.Template_ID\nFROM Documents\nWHERE Documents.Document_Description LIKE '%w%';",
        "final_sql": "SELECT Documents.Document_Name, Documents.Template_ID FROM Documents WHERE Documents.Document_Description LIKE '%w%';",
        "input_tokens": 1365,
        "output_tokens": 150,
        "time": 5.403100125000492,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT d.Document_Name, d.Template_ID\nFROM Documents d\nWHERE d.Document_Description LIKE '%w%';",
        "final_sql": "SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%';",
        "input_tokens": 1364,
        "output_tokens": 158,
        "time": 6.209754374998738,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_Name = \"Robbin CV\";",
        "final_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = \"Robbin CV\";",
        "input_tokens": 1338,
        "output_tokens": 140,
        "time": 5.293647458000123,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description\nFROM Documents\nWHERE Documents.Document_Name = 'Robbin CV';",
        "final_sql": "SELECT Documents.Document_ID, Documents.Template_ID, Documents.Document_Description FROM Documents WHERE Documents.Document_Name = 'Robbin CV';",
        "input_tokens": 1361,
        "output_tokens": 152,
        "time": 6.419642542001384,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Template_ID) AS Total_Templates\nFROM Documents;",
        "final_sql": "SELECT COUNT(DISTINCT Template_ID) AS Total_Templates FROM Documents;",
        "input_tokens": 1255,
        "output_tokens": 97,
        "time": 4.060961125000176,
        "question": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Template_ID) AS Num_Templates\nFROM Documents;",
        "final_sql": "SELECT COUNT(DISTINCT Template_Type_Code) AS Num_Templates FROM Templates;",
        "input_tokens": 1255,
        "output_tokens": 96,
        "time": 604.6422570409995,
        "question": "Count the number of different templates used for documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'PPT';",
        "final_sql": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT';",
        "input_tokens": 1408,
        "output_tokens": 197,
        "time": 7.048261916001138,
        "question": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Documents d\nJOIN Templates t ON d.Template_ID = t.Template_ID\nJOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code\nWHERE r.Template_Type_Description = 'PPT';",
        "final_sql": "SELECT COUNT(*) FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types r ON t.Template_Type_Code = r.Template_Type_Code WHERE r.Template_Type_Description = 'PPT';",
        "input_tokens": 1656,
        "output_tokens": 394,
        "time": 11.53379700000005,
        "question": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID;",
        "final_sql": "SELECT T.Template_ID, COUNT(D.Document_ID) AS Num_Documents FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID;",
        "input_tokens": 1411,
        "output_tokens": 212,
        "time": 6.9268462090003595,
        "question": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nGROUP BY Templates.Template_ID;",
        "final_sql": "SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Usage_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;",
        "input_tokens": 1431,
        "output_tokens": 225,
        "time": 10.107405291999385,
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;",
        "input_tokens": 1488,
        "output_tokens": 265,
        "time": 8.35090745799971,
        "question": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t.Template_ID, t.Template_Type_Code\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID, t.Template_Type_Code\nORDER BY COUNT(d.Document_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT t.Template_ID, t.Template_Type_Code FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID, t.Template_Type_Code ORDER BY COUNT(d.Document_ID) DESC LIMIT 1;",
        "input_tokens": 1491,
        "output_tokens": 261,
        "time": 8.172867082999801,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT T.Template_ID\nFROM Templates T\nJOIN Documents D ON T.Template_ID = D.Template_ID\nGROUP BY T.Template_ID\nHAVING COUNT(DISTINCT D.Document_ID) > 1;",
        "final_sql": "SELECT DISTINCT T.Template_ID FROM Templates T JOIN Documents D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID HAVING COUNT(DISTINCT D.Document_ID) > 1;",
        "input_tokens": 1522,
        "output_tokens": 288,
        "time": 9.088307833000727,
        "question": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT DISTINCT t.Template_ID\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID\nGROUP BY t.Template_ID\nHAVING COUNT(DISTINCT d.Document_ID) > 1;",
        "final_sql": "SELECT t.Template_ID FROM Templates t JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY t.Template_ID HAVING COUNT(DISTINCT d.Document_ID) > 1;",
        "input_tokens": 1462,
        "output_tokens": 243,
        "time": 8.065210542001296,
        "question": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT T.Template_ID\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Template_ID IS NULL;",
        "final_sql": "SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;",
        "input_tokens": 1346,
        "output_tokens": 164,
        "time": 6.001253624999663,
        "question": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT T.Template_ID\nFROM Templates T\nLEFT JOIN Documents D ON T.Template_ID = D.Template_ID\nWHERE D.Template_ID IS NULL;",
        "final_sql": "SELECT T.Template_ID FROM Templates T LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;",
        "input_tokens": 1355,
        "output_tokens": 164,
        "time": 5.702518999998574,
        "question": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Templates;",
        "final_sql": "SELECT COUNT(*) FROM Templates;",
        "input_tokens": 1341,
        "output_tokens": 153,
        "time": 6.00640900000144,
        "question": "How many templates do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Templates;",
        "final_sql": "SELECT COUNT(*) FROM Templates;",
        "input_tokens": 1217,
        "output_tokens": 71,
        "time": 4.575572333000309,
        "question": "Count the number of templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID, Version_Number, Template_Type_Code\nFROM Templates;",
        "final_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;",
        "input_tokens": 1273,
        "output_tokens": 94,
        "time": 4.166035375001229,
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code\nFROM Templates;",
        "final_sql": "SELECT Templates.Template_ID, Templates.Version_Number, Templates.Template_Type_Code FROM Templates;",
        "input_tokens": 1250,
        "output_tokens": 81,
        "time": 4.095178832998499,
        "question": "What are the ids, version numbers, and type codes for each template?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT DISTINCT Template_Type_Code\nFROM Templates;",
        "final_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;",
        "input_tokens": 1195,
        "output_tokens": 49,
        "time": 3.3170730830006505,
        "question": "Show all distinct template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types;",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types;",
        "input_tokens": 1221,
        "output_tokens": 72,
        "time": 3.450753249999252,
        "question": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';",
        "input_tokens": 1371,
        "output_tokens": 168,
        "time": 6.210170374999507,
        "question": "What are the ids of templates with template type code PP or PPT?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';",
        "input_tokens": 1374,
        "output_tokens": 172,
        "time": 6.111240624999482,
        "question": "Return the ids of templates that have the code PP or PPT.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';",
        "final_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';",
        "input_tokens": 1248,
        "output_tokens": 90,
        "time": 5.185158416001286,
        "question": "How many templates have template type code CV?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Templates \nWHERE Template_Type_Code = 'CV';",
        "final_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV';",
        "input_tokens": 1250,
        "output_tokens": 91,
        "time": 4.376317000000199,
        "question": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
        "input_tokens": 1298,
        "output_tokens": 105,
        "time": 4.358506416001546,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code\nFROM Templates\nWHERE Version_Number > 5;",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
        "input_tokens": 1315,
        "output_tokens": 118,
        "time": 4.422166874999675,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT T.\"Template_Type_Code\", COUNT(*) AS \"Number_of_Templates\"\nFROM \"Ref_Template_Types\" AS T\nJOIN \"Templates\" AS TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\"\nGROUP BY T.\"Template_Type_Code\";",
        "final_sql": "SELECT T.\"Template_Type_Code\", COUNT(TM.\"Template_ID\") AS \"Number_of_Templates\" FROM \"Ref_Template_Types\" AS T LEFT JOIN \"Templates\" AS TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\" GROUP BY T.\"Template_Type_Code\";",
        "input_tokens": 1574,
        "output_tokens": 344,
        "time": 10.692721000001256,
        "question": "Show all template type codes and number of templates for each.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count\nFROM Ref_Template_Types\nJOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code\nGROUP BY Ref_Template_Types.Template_Type_Code;",
        "final_sql": "SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;",
        "input_tokens": 1470,
        "output_tokens": 269,
        "time": 8.769268333000582,
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nHAVING COUNT(*) = (\n    SELECT MAX(template_count)\n    FROM (\n        SELECT Template_Type_Code, COUNT(*) AS template_count\n        FROM Templates\n        GROUP BY Template_Type_Code\n    )\n);",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (   SELECT MAX(template_count)   FROM (     SELECT Template_Type_Code, COUNT(*) AS template_count     FROM Templates     GROUP BY Template_Type_Code   ) );",
        "input_tokens": 1560,
        "output_tokens": 339,
        "time": 9.393131499999072,
        "question": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code = (\n    SELECT Template_Type_Code\n    FROM Templates\n    GROUP BY Template_Type_Code\n    ORDER BY COUNT(*) DESC\n    LIMIT 1\n);",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code = (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   ORDER BY COUNT(*) DESC   LIMIT 1 );",
        "input_tokens": 3288,
        "output_tokens": 1142,
        "time": 30.178173458001766,
        "question": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code\n    FROM Templates\n    GROUP BY Template_Type_Code\n    HAVING COUNT(*) < 3\n);",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) < 3 );",
        "input_tokens": 3270,
        "output_tokens": 1136,
        "time": 34.06847120800012,
        "question": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code\n    FROM Templates\n    GROUP BY Template_Type_Code\n    HAVING COUNT(*) < 3\n);",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Templates   GROUP BY Template_Type_Code   HAVING COUNT(*) < 3 );",
        "input_tokens": 3278,
        "output_tokens": 1132,
        "time": 29.947434542000337,
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code\nFROM Templates;",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1200,
        "output_tokens": 53,
        "time": 3.1639714579996507,
        "question": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code;",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1288,
        "output_tokens": 105,
        "time": 4.667032999999719,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = \"Data base\";",
        "final_sql": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = \"Data base\";",
        "input_tokens": 1394,
        "output_tokens": 178,
        "time": 6.849727416998576,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT Templates.Template_Type_Code\nFROM Templates\nJOIN Documents ON Templates.Template_ID = Documents.Template_ID\nWHERE Documents.Document_Name = 'Data base';",
        "final_sql": "SELECT Templates.Template_Type_Code FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID WHERE Documents.Document_Name = 'Data base';",
        "input_tokens": 1394,
        "output_tokens": 185,
        "time": 6.827850292000221,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT Documents.Document_Name\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK';",
        "final_sql": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';",
        "input_tokens": 1447,
        "output_tokens": 231,
        "time": 7.305436958000428,
        "question": "Show all document names using templates with template type code BK.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT Documents.Document_Name\nFROM Documents\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Templates.Template_Type_Code = 'BK';",
        "final_sql": "SELECT Documents.Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'BK';",
        "input_tokens": 1458,
        "output_tokens": 231,
        "time": 8.202113625000493,
        "question": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT T.\"Template_Type_Code\", COUNT(DISTINCT D.\"Document_ID\") AS \"Number_of_Documents\"\nFROM \"Ref_Template_Types\" T\nJOIN \"Templates\" TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\"\nJOIN \"Documents\" D ON TM.\"Template_ID\" = D.\"Template_ID\"\nGROUP BY T.\"Template_Type_Code\";",
        "final_sql": "SELECT T.\"Template_Type_Code\", COUNT(DISTINCT D.\"Document_ID\") AS \"Number_of_Documents\" FROM \"Ref_Template_Types\" T JOIN \"Templates\" TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\" JOIN \"Documents\" D ON TM.\"Template_ID\" = D.\"Template_ID\" GROUP BY T.\"Template_Type_Code\";",
        "input_tokens": 1683,
        "output_tokens": 426,
        "time": 13.015183499999694,
        "question": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT T.\"Template_Type_Code\", COUNT(DISTINCT D.\"Document_ID\") AS \"Number_of_Documents\"\nFROM \"Ref_Template_Types\" AS T\nJOIN \"Templates\" AS TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\"\nJOIN \"Documents\" AS D ON TM.\"Template_ID\" = D.\"Template_ID\"\nGROUP BY T.\"Template_Type_Code\";",
        "final_sql": "SELECT T.\"Template_Type_Code\", COUNT(DISTINCT D.\"Document_ID\") AS \"Number_of_Documents\" FROM \"Ref_Template_Types\" AS T JOIN \"Templates\" AS TM ON T.\"Template_Type_Code\" = TM.\"Template_Type_Code\" JOIN \"Documents\" AS D ON TM.\"Template_ID\" = D.\"Template_ID\" GROUP BY T.\"Template_Type_Code\";",
        "input_tokens": 1744,
        "output_tokens": 456,
        "time": 13.79075316700073,
        "question": "What are the different template type codes, and how many documents use each type?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT t.\"Template_Type_Code\"\nFROM \"Templates\" t\nJOIN \"Documents\" d ON t.\"Template_ID\" = d.\"Template_ID\"\nGROUP BY t.\"Template_Type_Code\"\nORDER BY COUNT(d.\"Document_ID\") DESC\nLIMIT 1;",
        "final_sql": "SELECT t.\"Template_Type_Code\" FROM \"Templates\" t JOIN \"Documents\" d ON t.\"Template_ID\" = d.\"Template_ID\" GROUP BY t.\"Template_Type_Code\" ORDER BY COUNT(d.\"Document_ID\") DESC LIMIT 1;",
        "input_tokens": 1633,
        "output_tokens": 372,
        "time": 11.339718082999752,
        "question": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Templates\nGROUP BY Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) = (   SELECT MAX(template_count)   FROM (     SELECT COUNT(*) as template_count     FROM Templates     GROUP BY Template_Type_Code   ) );",
        "input_tokens": 1458,
        "output_tokens": 251,
        "time": 7.836648415999662,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Code NOT IN (\n    SELECT Template_Type_Code\n    FROM Templates\n    JOIN Documents ON Templates.Template_ID = Documents.Template_ID\n)",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (   SELECT Template_Type_Code   FROM Templates   JOIN Documents ON Templates.Template_ID = Documents.Template_ID )",
        "input_tokens": 1365,
        "output_tokens": 179,
        "time": 6.825925167000605,
        "question": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT RTT.Template_Type_Code\nFROM Ref_Template_Types RTT\nLEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\nWHERE T.Template_ID IS NULL;",
        "final_sql": "SELECT RTT.Template_Type_Code FROM Ref_Template_Types RTT LEFT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code LEFT JOIN Documents D ON T.Template_ID = D.Template_ID WHERE D.Template_ID IS NULL;",
        "input_tokens": 1431,
        "output_tokens": 241,
        "time": 8.058077916000912,
        "question": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1233,
        "output_tokens": 82,
        "time": 4.163237958000536,
        "question": "Show all template type codes and descriptions.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description\nFROM Ref_Template_Types;",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1245,
        "output_tokens": 82,
        "time": 3.9589901250001276,
        "question": "What are the type codes and descriptions for all template types?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = \"AD\";",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\";",
        "input_tokens": 1322,
        "output_tokens": 137,
        "time": 5.289592832999915,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Description\nFROM Ref_Template_Types\nWHERE Template_Type_Code = 'AD';",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';",
        "input_tokens": 1321,
        "output_tokens": 134,
        "time": 5.394063249999817,
        "question": "Return the template type description of the template type with the code AD.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = \"Book\";",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\";",
        "input_tokens": 1313,
        "output_tokens": 129,
        "time": 6.520122957999774,
        "question": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code\nFROM Ref_Template_Types\nWHERE Template_Type_Description = 'Book';",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';",
        "input_tokens": 1275,
        "output_tokens": 102,
        "time": 4.778104874998462,
        "question": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT DISTINCT RTT.Template_Type_Description\nFROM Ref_Template_Types RTT\nJOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code\nJOIN Documents D ON T.Template_ID = D.Template_ID;",
        "final_sql": "SELECT DISTINCT RTT.Template_Type_Description FROM Ref_Template_Types RTT JOIN Templates T ON RTT.Template_Type_Code = T.Template_Type_Code JOIN Documents D ON T.Template_ID = D.Template_ID;",
        "input_tokens": 1432,
        "output_tokens": 221,
        "time": 9.48878729200078,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT t.Template_Type_Description\nFROM Templates t\nJOIN Documents d ON t.Template_ID = d.Template_ID;",
        "final_sql": "SELECT DISTINCT r.Template_Type_Description FROM Ref_Template_Types r JOIN Templates t ON r.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;",
        "input_tokens": 1297,
        "output_tokens": 138,
        "time": 5.287891500000114,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT T.Template_ID\nFROM Templates T\nJOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code\nWHERE RTT.Template_Type_Description = \"Presentation\";",
        "final_sql": "SELECT T.Template_ID FROM Templates T JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Description = 'Presentation';",
        "input_tokens": 1407,
        "output_tokens": 208,
        "time": 7.135204625001279,
        "question": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT Template_ID\nFROM Templates\nWHERE Template_Type_Code IN (\n    SELECT Template_Type_Code\n    FROM Ref_Template_Types\n    WHERE Template_Type_Description = 'Presentation'\n);",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = 'Presentation' );",
        "input_tokens": 1468,
        "output_tokens": 248,
        "time": 8.158851583000796,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Paragraphs;",
        "final_sql": "SELECT COUNT(*) FROM Paragraphs;",
        "input_tokens": 1220,
        "output_tokens": 74,
        "time": 4.167107250001209,
        "question": "How many paragraphs in total?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Paragraphs;",
        "final_sql": "SELECT COUNT(*) FROM Paragraphs;",
        "input_tokens": 1213,
        "output_tokens": 67,
        "time": 3.2376999160005653,
        "question": "Count the number of paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';",
        "final_sql": "SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';",
        "input_tokens": 1460,
        "output_tokens": 241,
        "time": 8.260938708999674,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Paragraphs p\nJOIN Documents d ON p.Document_ID = d.Document_ID\nWHERE d.Document_Name = 'Summer Show';",
        "final_sql": "SELECT COUNT(*) FROM Paragraphs p JOIN Documents d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show';",
        "input_tokens": 1464,
        "output_tokens": 240,
        "time": 8.26960304199929,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT p.*\nFROM Paragraphs p\nWHERE p.Paragraph_Text = 'Korea';",
        "final_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea';",
        "input_tokens": 1374,
        "output_tokens": 166,
        "time": 6.104615000000194,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT p.Paragraph_Text, p.Other_Details\nFROM Paragraphs p\nWHERE p.Paragraph_Text LIKE '%Korea %';",
        "final_sql": "SELECT p.Paragraph_Text, p.Other_Details FROM Paragraphs p WHERE p.Paragraph_Text LIKE '%Korea%';",
        "input_tokens": 1338,
        "output_tokens": 144,
        "time": 5.698843333999321,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nWHERE Document_ID = (\n    SELECT Document_ID\n    FROM Documents\n    WHERE Document_Name = 'Welcome to NY'\n);",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Welcome to NY' );",
        "input_tokens": 1461,
        "output_tokens": 241,
        "time": 8.159343584000453,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nJOIN Templates ON Documents.Template_ID = Templates.Template_ID\nWHERE Documents.Document_Name = 'Welcome to NY';",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Documents.Document_Name = 'Welcome to NY';",
        "input_tokens": 1477,
        "output_tokens": 250,
        "time": 8.164057874999344,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_Text\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Documents.Document_Name = \"Customer reviews\";",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\";",
        "input_tokens": 1445,
        "output_tokens": 229,
        "time": 7.444729291999465,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT Paragraph_Text\nFROM Paragraphs\nJOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID\nWHERE Documents.Document_Name = 'Customer reviews';",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';",
        "input_tokens": 1471,
        "output_tokens": 237,
        "time": 7.34550712500095,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;",
        "final_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;",
        "input_tokens": 1504,
        "output_tokens": 269,
        "time": 10.314166333000685,
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID;",
        "final_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;",
        "input_tokens": 1500,
        "output_tokens": 262,
        "time": 11.442584458000056,
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM Documents D\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY D.Document_ID, D.Document_Name;",
        "final_sql": "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID;",
        "input_tokens": 1470,
        "output_tokens": 244,
        "time": 8.074252874999729,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs\nFROM Documents D\nJOIN Paragraphs P ON D.Document_ID = P.Document_ID\nGROUP BY D.Document_ID, D.Document_Name;",
        "final_sql": "SELECT D.Document_ID, D.Document_Name, COUNT(P.Paragraph_ID) AS Num_Paragraphs FROM Documents D JOIN Paragraphs P ON D.Document_ID = P.Document_ID;",
        "input_tokens": 1418,
        "output_tokens": 198,
        "time": 6.58898816600049,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT DISTINCT P.Document_ID\nFROM Paragraphs P\nGROUP BY P.Document_ID\nHAVING COUNT(P.Paragraph_ID) >= 2;",
        "final_sql": "SELECT DISTINCT P.Document_ID FROM Paragraphs P GROUP BY P.Document_ID HAVING COUNT(P.Paragraph_ID) >= 2;",
        "input_tokens": 1456,
        "output_tokens": 236,
        "time": 9.100864084000932,
        "question": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) >= 2;",
        "final_sql": "SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;",
        "input_tokens": 1566,
        "output_tokens": 316,
        "time": 11.238185542000792,
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN (\n    SELECT Document_ID, COUNT(*) AS num_paragraphs\n    FROM Paragraphs\n    GROUP BY Document_ID\n) p ON d.Document_ID = p.Document_ID\nWHERE p.num_paragraphs = (\n    SELECT MAX(num_paragraphs)\n    FROM (\n        SELECT Document_ID, COUNT(*) AS num_paragraphs\n        FROM Paragraphs\n        GROUP BY Document_ID\n    )\n)",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID WHERE p.num_paragraphs = (   SELECT MAX(num_paragraphs)   FROM (     SELECT Document_ID, COUNT(*) AS num_paragraphs     FROM Paragraphs     GROUP BY Document_ID   ) )",
        "input_tokens": 1573,
        "output_tokens": 352,
        "time": 10.818336709000505,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN (\n    SELECT Document_ID, COUNT(*) AS num_paragraphs\n    FROM Paragraphs\n    GROUP BY Document_ID\n    ORDER BY num_paragraphs DESC\n    LIMIT 1\n) p ON d.Document_ID = p.Document_ID;",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID   ORDER BY num_paragraphs DESC   LIMIT 1 ) p ON d.Document_ID = p.Document_ID;",
        "input_tokens": 1566,
        "output_tokens": 328,
        "time": 9.59191279100014,
        "question": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Document_ID\nFROM Documents\nGROUP BY Document_ID\nORDER BY COUNT(Paragraph_ID)\nLIMIT 1;",
        "final_sql": "SELECT Document_ID FROM Documents GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1413,
        "output_tokens": 205,
        "time": 6.977448500001628,
        "question": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN (\n    SELECT Document_ID, COUNT(*) AS num_paragraphs\n    FROM Paragraphs\n    GROUP BY Document_ID\n) p ON d.Document_ID = p.Document_ID\nORDER BY p.num_paragraphs ASC\nLIMIT 1;",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN (   SELECT Document_ID, COUNT(*) AS num_paragraphs   FROM Paragraphs   GROUP BY Document_ID ) p ON d.Document_ID = p.Document_ID ORDER BY p.num_paragraphs ASC LIMIT 1;",
        "input_tokens": 1612,
        "output_tokens": 352,
        "time": 10.411759708000318,
        "question": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
        "input_tokens": 1479,
        "output_tokens": 259,
        "time": 8.155548417000318,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nHAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
        "input_tokens": 1539,
        "output_tokens": 300,
        "time": 10.002291499999046,
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text IN ('Brazil', 'Ireland');",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text IN ('Brazil', 'Ireland');",
        "input_tokens": 1473,
        "output_tokens": 249,
        "time": 8.467123166999954,
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Brazil'\nINTERSECT\nSELECT d.Document_ID\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nWHERE p.Paragraph_Text = 'Ireland';",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Brazil' INTERSECT SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text = 'Ireland';",
        "input_tokens": 1609,
        "output_tokens": 347,
        "time": 11.130707582999094,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM teacher;",
        "final_sql": "SELECT COUNT(*) FROM teacher;",
        "input_tokens": 943,
        "output_tokens": 68,
        "time": 3.7568036669999856,
        "question": "How many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM teacher;",
        "final_sql": "SELECT COUNT(*) FROM teacher;",
        "input_tokens": 943,
        "output_tokens": 61,
        "time": 3.6505093749983644,
        "question": "What is the total count of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nORDER BY Age ASC;",
        "final_sql": "SELECT Name FROM teacher ORDER BY CAST(Age AS INTEGER) ASC;",
        "input_tokens": 1021,
        "output_tokens": 117,
        "time": 5.494097083001179,
        "question": "List the names of teachers in ascending order of age.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nORDER BY Age ASC;",
        "final_sql": "SELECT Name FROM teacher ORDER BY Age ASC;",
        "input_tokens": 1022,
        "output_tokens": 117,
        "time": 4.981346708998899,
        "question": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher;",
        "final_sql": "SELECT Age, Hometown FROM teacher;",
        "input_tokens": 961,
        "output_tokens": 73,
        "time": 3.502396874999249,
        "question": "What are the age and hometown of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher;",
        "final_sql": "SELECT Age, Hometown FROM teacher;",
        "input_tokens": 920,
        "output_tokens": 43,
        "time": 3.192193249999036,
        "question": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nWHERE Hometown <> 'Little Lever Urban District';",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';",
        "input_tokens": 1128,
        "output_tokens": 178,
        "time": 6.414123500000642,
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nWHERE Hometown <> 'Little Lever Urban District';",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District';",
        "input_tokens": 1064,
        "output_tokens": 130,
        "time": 5.502671625001312,
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nWHERE Age = '32' OR Age = '33';",
        "final_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';",
        "input_tokens": 1072,
        "output_tokens": 147,
        "time": 6.309386082999481,
        "question": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nWHERE Age = '32' OR Age = '33';",
        "final_sql": "SELECT Name FROM teacher WHERE CAST(Age AS INTEGER) = 32 OR CAST(Age AS INTEGER) = 33;",
        "input_tokens": 1104,
        "output_tokens": 174,
        "time": 6.02335770800164,
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Hometown\nFROM teacher\nWHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1016,
        "output_tokens": 118,
        "time": 5.076679833000526,
        "question": "What is the hometown of the youngest teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown\nFROM teacher\nWHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1032,
        "output_tokens": 136,
        "time": 5.402110708000691,
        "question": "Where is the youngest teacher from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) AS Num_Teachers\nFROM teacher\nGROUP BY Hometown;",
        "final_sql": "SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown;",
        "input_tokens": 1109,
        "output_tokens": 172,
        "time": 6.517193083000166,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) AS Num_Teachers\nFROM teacher\nGROUP BY Hometown;",
        "final_sql": "SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown;",
        "input_tokens": 1094,
        "output_tokens": 170,
        "time": 6.41322641700026,
        "question": "For each hometown, how many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1114,
        "output_tokens": 186,
        "time": 6.524231792000137,
        "question": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) AS Count\nFROM teacher\nGROUP BY Hometown\nORDER BY Count DESC\nLIMIT 1;",
        "final_sql": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "input_tokens": 1117,
        "output_tokens": 188,
        "time": 7.030815333000646,
        "question": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) > 1;",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1;",
        "input_tokens": 1098,
        "output_tokens": 171,
        "time": 5.80577008399996,
        "question": "Show the hometowns shared by at least two teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Hometown\nFROM teacher\nGROUP BY Hometown\nHAVING COUNT(*) >= 2;",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;",
        "input_tokens": 1116,
        "output_tokens": 178,
        "time": 7.542877457999566,
        "question": "What are the towns from which at least two teachers come from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;",
        "final_sql": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;",
        "input_tokens": 1180,
        "output_tokens": 233,
        "time": 7.544357499999023,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID;",
        "final_sql": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID;",
        "input_tokens": 1165,
        "output_tokens": 223,
        "time": 7.64571879200048,
        "question": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;",
        "final_sql": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;",
        "input_tokens": 1276,
        "output_tokens": 285,
        "time": 9.287539209000897,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT t.Name, c.Course\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nORDER BY t.Name ASC;",
        "final_sql": "SELECT t.Name, c.Course FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID ORDER BY t.Name ASC;",
        "input_tokens": 1269,
        "output_tokens": 280,
        "time": 8.876835208000557,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';",
        "input_tokens": 1228,
        "output_tokens": 278,
        "time": 9.284463500000129,
        "question": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nJOIN course c ON ca.Course_ID = c.Course_ID\nWHERE c.Course = 'math';",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math';",
        "input_tokens": 1166,
        "output_tokens": 228,
        "time": 7.788600541000051,
        "question": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT t.Name, COUNT(ca.Course_ID) AS Num_Courses\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name;",
        "final_sql": "SELECT t.Name, COUNT(ca.Course_ID) AS Num_Courses FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name;",
        "input_tokens": 1162,
        "output_tokens": 224,
        "time": 7.610560166000141,
        "question": "Show names of teachers and the number of courses they teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses\nFROM teacher\nJOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID\nGROUP BY teacher.Name;",
        "final_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS num_courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;",
        "input_tokens": 1223,
        "output_tokens": 260,
        "time": 8.204509541999869,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Name\nHAVING COUNT(ca.Course_ID) >= 2;",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;",
        "input_tokens": 1199,
        "output_tokens": 253,
        "time": 8.10637854199922,
        "question": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT t.Name\nFROM teacher t\nJOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nGROUP BY t.Teacher_ID\nHAVING COUNT(ca.Course_ID) >= 2;",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(ca.Course_ID) >= 2;",
        "input_tokens": 1204,
        "output_tokens": 249,
        "time": 8.361068291000265,
        "question": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name\nFROM teacher\nWHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);",
        "input_tokens": 1119,
        "output_tokens": 178,
        "time": 5.902837958999953,
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT t.Name\nFROM teacher t\nLEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID\nWHERE ca.Course_ID IS NULL;",
        "final_sql": "SELECT t.Name FROM teacher t LEFT JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID WHERE ca.Course_ID IS NULL;",
        "input_tokens": 1203,
        "output_tokens": 244,
        "time": 8.169140084000901,
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM visitor WHERE Age < 30;",
        "final_sql": "SELECT COUNT(*) FROM visitor WHERE Age < 30;",
        "input_tokens": 1090,
        "output_tokens": 116,
        "time": 4.850836707999406,
        "question": "How many visitors below age 30 are there?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name\nFROM visitor\nWHERE Level_of_membership > 4\nORDER BY Level_of_membership DESC;",
        "final_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",
        "input_tokens": 1224,
        "output_tokens": 181,
        "time": 5.803433291999681,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
        "baseline_sql": "SELECT AVG(Age) \nFROM visitor \nWHERE Level_of_membership <= 4;",
        "final_sql": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;",
        "input_tokens": 1177,
        "output_tokens": 170,
        "time": 5.6845051660002355,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
    },
    {
        "baseline_sql": "SELECT visitor.Name, visitor.Level_of_membership\nFROM visitor\nWHERE visitor.Level_of_membership > 4\nORDER BY visitor.Age DESC;",
        "final_sql": "SELECT visitor.Name, visitor.Level_of_membership FROM visitor WHERE visitor.Level_of_membership > 4 ORDER BY visitor.Age DESC;",
        "input_tokens": 1220,
        "output_tokens": 179,
        "time": 7.13522091699997,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Museum_ID, Name\nFROM museum\nWHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum);",
        "final_sql": "SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;",
        "input_tokens": 1179,
        "output_tokens": 178,
        "time": 6.518703707999521,
        "question": "Find the id and name of the museum that has the most staff members?",
        "db_id": "museum_visit",
        "gold_query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Num_of_Staff) \nFROM museum \nWHERE Open_Year < '2009';",
        "final_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';",
        "input_tokens": 1146,
        "output_tokens": 146,
        "time": 5.292753666999488,
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
    },
    {
        "baseline_sql": "SELECT Open_Year, Num_of_Staff\nFROM museum\nWHERE Name = 'Plaza Museum';",
        "final_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';",
        "input_tokens": 1077,
        "output_tokens": 105,
        "time": 4.16807479199997,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "gold_query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
    },
    {
        "baseline_sql": "SELECT m.Name\nFROM museum m\nWHERE m.Num_of_Staff > (\n    SELECT MIN(m2.Num_of_Staff)\n    FROM museum m2\n    WHERE m2.Open_Year > '2010'\n);",
        "final_sql": "SELECT m.Name FROM museum m WHERE m.Num_of_Staff > (   SELECT MIN(m2.Num_of_Staff)   FROM museum m2   WHERE m2.Open_Year > '2010' );",
        "input_tokens": 1430,
        "output_tokens": 343,
        "time": 10.459346042000107,
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT v.\"ID\", v.\"Name\", v.\"Age\"\nFROM visitor v\nJOIN visit vt ON v.\"ID\" = vt.\"visitor_ID\"\nGROUP BY v.\"ID\", v.\"Name\", v.\"Age\"\nHAVING COUNT(vt.\"Museum_ID\") > 1;",
        "final_sql": "SELECT v.\"ID\", v.\"Name\", v.\"Age\" FROM visitor v JOIN visit vt ON v.\"ID\" = vt.\"visitor_ID\" GROUP BY v.\"ID\" HAVING COUNT(vt.\"Museum_ID\") > 1;",
        "input_tokens": 1340,
        "output_tokens": 297,
        "time": 9.547413665999557,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT v.ID, v.Name, v.Level_of_membership\nFROM visitor v\nJOIN visit vt ON v.ID = vt.visitor_ID\nGROUP BY v.ID, v.Name, v.Level_of_membership\nHAVING SUM(vt.Total_spent) = (\n    SELECT MAX(total_spent_sum)\n    FROM (\n        SELECT SUM(Total_spent) AS total_spent_sum\n        FROM visit\n        GROUP BY visitor_ID\n    )\n);",
        "final_sql": "SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID GROUP BY v.ID, v.Name, v.Level_of_membership HAVING SUM(vt.Total_spent) = (   SELECT MAX(total_spent_sum)   FROM (     SELECT SUM(Total_spent) AS total_spent_sum     FROM visit     GROUP BY visitor_ID   ) );",
        "input_tokens": 1429,
        "output_tokens": 379,
        "time": 11.287559207999948,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT m.Museum_ID, m.Name\nFROM museum m\nJOIN visit v ON m.Museum_ID = v.Museum_ID\nGROUP BY m.Museum_ID, m.Name\nORDER BY COUNT(v.Museum_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT m.Museum_ID, m.Name FROM museum m JOIN visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name ORDER BY COUNT(v.Museum_ID) DESC LIMIT 1;",
        "input_tokens": 1269,
        "output_tokens": 261,
        "time": 8.211689541998567,
        "question": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT m.Name\nFROM museum m\nLEFT JOIN visit v ON m.Museum_ID = v.Museum_ID\nWHERE v.Museum_ID IS NULL;",
        "final_sql": "SELECT m.Name FROM museum m LEFT JOIN visit v ON m.Museum_ID = v.Museum_ID WHERE v.visitor_ID IS NULL;",
        "input_tokens": 1193,
        "output_tokens": 198,
        "time": 7.85792924999987,
        "question": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    {
        "baseline_sql": "SELECT v.Name, v.Age\nFROM visitor v\nJOIN visit vt ON v.ID = vt.visitor_ID\nWHERE vt.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "final_sql": "SELECT v.Name, v.Age FROM visitor v JOIN visit vt ON v.ID = vt.visitor_ID WHERE vt.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "input_tokens": 1215,
        "output_tokens": 211,
        "time": 7.235139000000345,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS maximum_tickets\nFROM visit;",
        "final_sql": "SELECT AVG(Num_of_Ticket) AS average_tickets, MAX(Num_of_Ticket) AS maximum_tickets FROM visit;",
        "input_tokens": 1040,
        "output_tokens": 85,
        "time": 5.494911375000811,
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    {
        "baseline_sql": "SELECT SUM(Total_spent) \nFROM visit \nJOIN visitor ON visit.visitor_ID = visitor.ID \nWHERE Level_of_membership = 1;",
        "final_sql": "SELECT SUM(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;",
        "input_tokens": 1213,
        "output_tokens": 204,
        "time": 6.451119875000586,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "gold_query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    {
        "baseline_sql": "SELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year < '2009'\nINTERSECT\nSELECT v.Name\nFROM visitor v\nJOIN visit vi ON v.ID = vi.visitor_ID\nJOIN museum m ON vi.Museum_ID = m.Museum_ID\nWHERE m.Open_Year > '2011';",
        "final_sql": "SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year < '2009' INTERSECT SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year > '2011';",
        "input_tokens": 1487,
        "output_tokens": 403,
        "time": 11.91122791700036,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM visitor \nWHERE ID NOT IN (\n    SELECT visitor_ID \n    FROM visit \n    JOIN museum ON visit.Museum_ID = museum.Museum_ID \n    WHERE Open_Year > '2010'\n);",
        "final_sql": "SELECT COUNT(*) FROM visitor WHERE ID NOT IN (   SELECT visitor_ID   FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE CAST(Open_Year AS INTEGER) > 2010 );",
        "input_tokens": 1285,
        "output_tokens": 262,
        "time": 8.410430666999673,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';",
        "final_sql": "SELECT COUNT(*) FROM museum WHERE CAST(Open_Year AS INTEGER) > 2013 OR CAST(Open_Year AS INTEGER) < 2008;",
        "input_tokens": 1226,
        "output_tokens": 217,
        "time": 8.004814332998649,
        "question": "How many museums were opened after 2013 or before 2008?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM players;",
        "final_sql": "SELECT COUNT(*) FROM players;",
        "input_tokens": 1558,
        "output_tokens": 63,
        "time": 3.791010750001078,
        "question": "Find the total number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM players;",
        "final_sql": "SELECT COUNT(*) FROM players;",
        "input_tokens": 1545,
        "output_tokens": 56,
        "time": 2.8945124999991094,
        "question": "How many players are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches;",
        "final_sql": "SELECT COUNT(*) FROM matches;",
        "input_tokens": 1639,
        "output_tokens": 118,
        "time": 5.172724874999403,
        "question": "Find the total number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches;",
        "final_sql": "SELECT COUNT(match_num) FROM matches;",
        "input_tokens": 1567,
        "output_tokens": 75,
        "time": 4.593852082998637,
        "question": "Count the number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date\nFROM players\nWHERE country_code = 'USA';",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
        "input_tokens": 1657,
        "output_tokens": 118,
        "time": 4.882515625000451,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date\nFROM players\nWHERE country_code = 'USA';",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA';",
        "input_tokens": 1648,
        "output_tokens": 118,
        "time": 605.2792295830004,
        "question": "What are the first names and birth dates of players from the USA?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age\nFROM matches;",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;",
        "input_tokens": 1587,
        "output_tokens": 85,
        "time": 3.9443104169986327,
        "question": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age\nFROM matches;",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;",
        "input_tokens": 1587,
        "output_tokens": 85,
        "time": 4.064873084000283,
        "question": "What are the average ages of losers and winners across matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(winner_rank) AS average_rank\nFROM matches;",
        "final_sql": "SELECT AVG(winner_rank) AS average_rank FROM matches;",
        "input_tokens": 1637,
        "output_tokens": 118,
        "time": 4.576973250001174,
        "question": "Find the average rank of winners in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(winner_rank) FROM matches;",
        "final_sql": "SELECT AVG(winner_rank) FROM matches;",
        "input_tokens": 1601,
        "output_tokens": 86,
        "time": 3.543161625000721,
        "question": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT MAX(loser_rank) AS highest_rank\nFROM matches;",
        "final_sql": "SELECT MAX(loser_rank) AS highest_rank FROM matches;",
        "input_tokens": 1630,
        "output_tokens": 111,
        "time": 4.264539333000357,
        "question": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT MAX(loser_rank) AS best_rank\nFROM matches;",
        "final_sql": "SELECT MAX(loser_rank) AS best_rank FROM matches;",
        "input_tokens": 1627,
        "output_tokens": 107,
        "time": 5.930851290999271,
        "question": "What is the best rank of losers across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_country_codes\nFROM players;",
        "final_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;",
        "input_tokens": 1557,
        "output_tokens": 61,
        "time": 3.3506342500004394,
        "question": "find the number of distinct country codes of all players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_countries\nFROM players;",
        "final_sql": "SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;",
        "input_tokens": 1706,
        "output_tokens": 180,
        "time": 6.619353374999264,
        "question": "How many distinct countries do players come from?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT loser_name) AS distinct_name_of_losers\nFROM matches;",
        "final_sql": "SELECT COUNT(DISTINCT loser_name) AS distinct_name_of_losers FROM matches;",
        "input_tokens": 1557,
        "output_tokens": 67,
        "time": 2.7986510830014595,
        "question": "Find the number of distinct name of losers.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT loser_name) AS num_loser_names\nFROM matches;",
        "final_sql": "SELECT COUNT(DISTINCT loser_name) AS num_loser_names FROM matches;",
        "input_tokens": 1550,
        "output_tokens": 63,
        "time": 3.898770040999807,
        "question": "How many different loser names are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT tourney_name\nFROM matches\nGROUP BY tourney_name\nHAVING COUNT(*) > 10;",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
        "input_tokens": 1739,
        "output_tokens": 189,
        "time": 5.497414084000411,
        "question": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT tourney_name\nFROM matches\nGROUP BY tourney_name\nHAVING COUNT(*) > 10;",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;",
        "input_tokens": 1722,
        "output_tokens": 181,
        "time": 6.725116666999384,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT DISTINCT p1.first_name, p1.last_name\nFROM players p1\nJOIN matches m1 ON p1.player_id = m1.winner_id\nJOIN matches m2 ON p1.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016;",
        "final_sql": "SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 JOIN matches m1 ON p1.player_id = m1.winner_id JOIN matches m2 ON p1.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 1791,
        "output_tokens": 239,
        "time": 8.472222917000181,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016;",
        "final_sql": "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 1781,
        "output_tokens": 228,
        "time": 6.789815333000661,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "final_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "input_tokens": 1693,
        "output_tokens": 137,
        "time": 5.143822124999133,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "final_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "input_tokens": 1634,
        "output_tokens": 108,
        "time": 4.8212934999992285,
        "question": "How many matches were played in 2013 or 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT p.country_code, p.first_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.tourney_name = 'WTA Championships'\nAND m2.tourney_name = 'Australian Open';",
        "final_sql": "SELECT p.country_code, p.first_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';",
        "input_tokens": 1896,
        "output_tokens": 297,
        "time": 9.573078082999928,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.tourney_name = 'WTA Championships' AND m2.tourney_name = 'Australian Open';",
        "input_tokens": 1906,
        "output_tokens": 315,
        "time": 9.924357042000338,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nWHERE p.birth_date = (SELECT MIN(birth_date) FROM players)",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(birth_date) FROM players)",
        "input_tokens": 1668,
        "output_tokens": 146,
        "time": 5.886235874999329,
        "question": "Find the first name and country code of the oldest player.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nWHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2);",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p ORDER BY p.birth_date ASC LIMIT 1;",
        "input_tokens": 1680,
        "output_tokens": 150,
        "time": 5.288803583000117,
        "question": "What is the first name and country code of the oldest player?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, last_name\nFROM players\nORDER BY birth_date;",
        "final_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date;",
        "input_tokens": 1789,
        "output_tokens": 208,
        "time": 6.716481125000428,
        "question": "List the first and last name of all players in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name || ' ' || last_name AS full_name\nFROM players\nORDER BY birth_date;",
        "final_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date ASC;",
        "input_tokens": 1724,
        "output_tokens": 172,
        "time": 8.675084000000425,
        "question": "What are the full names of all players, sorted by birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name, last_name\nFROM players\nWHERE hand = 'L'\nORDER BY birth_date;",
        "final_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;",
        "input_tokens": 1724,
        "output_tokens": 157,
        "time": 5.705372000000352,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT p.first_name || ' ' || p.last_name AS full_name\nFROM players p\nWHERE p.hand = 'left'\nORDER BY p.birth_date;",
        "final_sql": "SELECT p.first_name || ' ' || p.last_name AS full_name FROM players p WHERE p.hand = 'left' ORDER BY p.birth_date;",
        "input_tokens": 1796,
        "output_tokens": 225,
        "time": 8.2607971669986,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id\nORDER BY SUM(r.tours) DESC\nLIMIT 1;",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name, p.country_code ORDER BY SUM(r.tours) DESC LIMIT 1;",
        "input_tokens": 1884,
        "output_tokens": 293,
        "time": 10.306123833999663,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nWHERE r.tours = (SELECT MAX(tours) FROM rankings)",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings)",
        "input_tokens": 1763,
        "output_tokens": 219,
        "time": 7.23467191599957,
        "question": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year\nFROM matches\nGROUP BY year\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT year FROM matches GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1917,
        "output_tokens": 306,
        "time": 8.643762499999866,
        "question": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year\nORDER BY num_matches DESC\nLIMIT 1;",
        "final_sql": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;",
        "input_tokens": 1793,
        "output_tokens": 238,
        "time": 7.372247917001005,
        "question": "Which year had the most matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name, m.winner_rank_points\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nGROUP BY m.winner_id\nHAVING COUNT(*) = (\n    SELECT MAX(winner_count)\n    FROM (\n        SELECT COUNT(*) as winner_count\n        FROM matches\n        GROUP BY winner_id\n    )\n)",
        "final_sql": "SELECT p.first_name, p.last_name, m.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY m.winner_id HAVING COUNT(*) = (   SELECT MAX(winner_count)   FROM (     SELECT COUNT(*) as winner_count     FROM matches     GROUP BY winner_id   ) )",
        "input_tokens": 1860,
        "output_tokens": 298,
        "time": 10.857274874999348,
        "question": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name || ' ' || p.last_name AS winner_name, MAX(winner_rank_points) AS rank_points\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nGROUP BY p.player_id\nORDER BY rank_points DESC\nLIMIT 1;",
        "final_sql": "SELECT p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points AS rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id ORDER BY m.winner_rank_points DESC LIMIT 1;",
        "input_tokens": 1850,
        "output_tokens": 258,
        "time": 7.915285334000146,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY p.winner_rank_points DESC\nLIMIT 1;",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;",
        "input_tokens": 1878,
        "output_tokens": 282,
        "time": 9.387866334000137,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY m.winner_rank_points DESC\nLIMIT 1;",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;",
        "input_tokens": 1845,
        "output_tokens": 259,
        "time": 609.3745880839997,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT m.loser_name, m.winner_name\nFROM matches m\nWHERE m.minutes = (SELECT MAX(minutes) FROM matches);",
        "final_sql": "SELECT m.loser_name, m.winner_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches);",
        "input_tokens": 1669,
        "output_tokens": 130,
        "time": 5.188524708000841,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT m.winner_name, m.loser_name\nFROM matches m\nWHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "final_sql": "SELECT m.winner_name, m.loser_name FROM matches m WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "input_tokens": 1763,
        "output_tokens": 195,
        "time": 7.982915958999001,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name;",
        "final_sql": "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;",
        "input_tokens": 1795,
        "output_tokens": 237,
        "time": 7.412136500000997,
        "question": "Find the average ranking for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name;",
        "final_sql": "SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id;",
        "input_tokens": 1713,
        "output_tokens": 169,
        "time": 6.420518584000092,
        "question": "What are the first names of all players, and their average rankings?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name;",
        "final_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name;",
        "input_tokens": 1780,
        "output_tokens": 226,
        "time": 7.339135542000804,
        "question": "Find the total ranking points for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.first_name;",
        "final_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name;",
        "input_tokens": 1727,
        "output_tokens": 183,
        "time": 5.4843092920000345,
        "question": "What are the first names of all players, and their total ranking points?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT country_code, COUNT(*) AS player_count\nFROM players\nGROUP BY country_code;",
        "final_sql": "SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;",
        "input_tokens": 1799,
        "output_tokens": 237,
        "time": 6.418580749999819,
        "question": "find the number of players for each country.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code, COUNT(*) AS num_players\nFROM players\nGROUP BY country_code;",
        "final_sql": "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;",
        "input_tokens": 1798,
        "output_tokens": 240,
        "time": 7.0295760839999275,
        "question": "How many players are from each country?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(*) = (\n    SELECT MAX(player_count)\n    FROM (\n        SELECT COUNT(*) as player_count\n        FROM players\n        GROUP BY country_code\n    )\n);",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (   SELECT MAX(player_count)   FROM (     SELECT COUNT(*) as player_count     FROM players     GROUP BY country_code   ) );",
        "input_tokens": 1869,
        "output_tokens": 288,
        "time": 8.56992154100044,
        "question": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code\nFROM players\nGROUP BY country_code\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1792,
        "output_tokens": 224,
        "time": 6.727652792000299,
        "question": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(*) > 50;",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "input_tokens": 1717,
        "output_tokens": 173,
        "time": 5.21187262499916,
        "question": "Find the codes of countries that have more than 50 players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT country_code\nFROM players\nGROUP BY country_code\nHAVING COUNT(*) > 50;",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "input_tokens": 1688,
        "output_tokens": 150,
        "time": 5.174578750000364,
        "question": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT ranking_date, SUM(tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;",
        "final_sql": "SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1761,
        "output_tokens": 207,
        "time": 6.3927514999995765,
        "question": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT ranking_date, SUM(tours) AS total_tours\nFROM rankings\nGROUP BY ranking_date;",
        "final_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1631,
        "output_tokens": 114,
        "time": 4.153377167000144,
        "question": "How many total tours were there for each ranking date?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year;",
        "final_sql": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
        "input_tokens": 1682,
        "output_tokens": 151,
        "time": 5.022652874999039,
        "question": "Find the number of matches happened in each year.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT year, COUNT(*) AS num_matches\nFROM matches\nGROUP BY year;",
        "final_sql": "SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;",
        "input_tokens": 1678,
        "output_tokens": 149,
        "time": 7.134780665999642,
        "question": "How many matches were played in each year?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT winner_name, winner_rank\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nORDER BY winner_age ASC\nLIMIT 3;",
        "final_sql": "SELECT m.winner_name, p.winner_rank FROM matches m JOIN players p ON m.winner_id = p.player_id ORDER BY m.winner_age ASC LIMIT 3;",
        "input_tokens": 1830,
        "output_tokens": 253,
        "time": 7.029603209000925,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT winner_name, winner_rank\nFROM matches\nJOIN players ON matches.winner_id = players.player_id\nORDER BY winner_age ASC\nLIMIT 3;",
        "final_sql": "SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id ORDER BY winner_age ASC LIMIT 3;",
        "input_tokens": 1842,
        "output_tokens": 255,
        "time": 8.158746416000213,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT m.winner_id) \nFROM matches m \nJOIN players p ON m.winner_id = p.player_id \nWHERE m.tourney_name = 'WTA Championships' AND p.hand = 'left'",
        "final_sql": "SELECT COUNT(DISTINCT m.winner_id) FROM matches m JOIN players p ON m.winner_id = p.player_id WHERE m.tourney_level = 'WTA Championships' AND p.hand = 'left'",
        "input_tokens": 1767,
        "output_tokens": 218,
        "time": 7.549274875000265,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT winner_id)\nFROM matches\nWHERE winner_hand = 'L'\nAND tourney_name = 'WTA Championships';",
        "final_sql": "SELECT COUNT(DISTINCT winner_id) FROM matches WHERE winner_hand = 'L' AND tourney_name = 'WTA Championships';",
        "input_tokens": 1816,
        "output_tokens": 242,
        "time": 8.056093416000294,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "final_sql": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "input_tokens": 1858,
        "output_tokens": 262,
        "time": 7.954064583000218,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.winner_rank_points = (\n    SELECT MAX(winner_rank_points)\n    FROM matches\n)",
        "final_sql": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches )",
        "input_tokens": 1825,
        "output_tokens": 243,
        "time": 8.67104020899933,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT hand, COUNT(*) AS num_players\nFROM players\nGROUP BY hand;",
        "final_sql": "SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;",
        "input_tokens": 1643,
        "output_tokens": 121,
        "time": 4.82548400000087,
        "question": "Find the number of players for each hand type.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT hand, COUNT(*) AS count\nFROM players\nGROUP BY hand;",
        "final_sql": "SELECT hand, COUNT(*) AS count FROM players GROUP BY hand;",
        "input_tokens": 1756,
        "output_tokens": 199,
        "time": 6.214038416999756,
        "question": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "final_sql": "SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "input_tokens": 1129,
        "output_tokens": 96,
        "time": 4.576629375000266,
        "question": "How many ships ended up being 'Captured'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
        "baseline_sql": "SELECT name, tonnage\nFROM ship\nORDER BY name DESC;",
        "final_sql": "SELECT name, tonnage FROM ship ORDER BY name ASC;",
        "input_tokens": 1133,
        "output_tokens": 86,
        "time": 4.064864915999351,
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
        "baseline_sql": "SELECT name, date, result\nFROM battle;",
        "final_sql": "SELECT name, date, result FROM battle;",
        "input_tokens": 1145,
        "output_tokens": 102,
        "time": 4.880919208000705,
        "question": "List the name, date and result of each battle.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  date FROM battle"
    },
    {
        "baseline_sql": "SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll\nFROM death;",
        "final_sql": "SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death;",
        "input_tokens": 1118,
        "output_tokens": 94,
        "time": 4.778536165998958,
        "question": "What is maximum and minimum death toll caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT max(killed) ,  min(killed) FROM death"
    },
    {
        "baseline_sql": "SELECT AVG(injured) FROM death;",
        "final_sql": "SELECT AVG(injured) FROM death;",
        "input_tokens": 1061,
        "output_tokens": 45,
        "time": 2.9340531249999913,
        "question": "What is the average number of injuries caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT avg(injured) FROM death"
    },
    {
        "baseline_sql": "SELECT d.note, d.killed, d.injured\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nWHERE s.tonnage = 't';",
        "final_sql": "SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't';",
        "input_tokens": 1278,
        "output_tokens": 201,
        "time": 6.562567417000537,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    {
        "baseline_sql": "SELECT name, result\nFROM battle\nWHERE bulgarian_commander <> 'Boril';",
        "final_sql": "SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';",
        "input_tokens": 1314,
        "output_tokens": 208,
        "time": 6.584280915998534,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
        "baseline_sql": "SELECT DISTINCT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.ship_type = 'Brig';",
        "final_sql": "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig';",
        "input_tokens": 1382,
        "output_tokens": 260,
        "time": 8.049783582999225,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "gold_query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
        "baseline_sql": "SELECT b.id, b.name\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nJOIN death d ON s.id = d.caused_by_ship_id\nGROUP BY b.id, b.name\nHAVING SUM(d.killed) > 10;",
        "final_sql": "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;",
        "input_tokens": 1646,
        "output_tokens": 454,
        "time": 12.565809458999865,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    {
        "baseline_sql": "SELECT d.caused_by_ship_id, s.name\nFROM death d\nJOIN ship s ON d.caused_by_ship_id = s.id\nGROUP BY d.caused_by_ship_id, s.name\nORDER BY SUM(d.injured) DESC\nLIMIT 1;",
        "final_sql": "SELECT s.id, s.name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;",
        "input_tokens": 1546,
        "output_tokens": 394,
        "time": 11.948764416998529,
        "question": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "gold_query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT name\nFROM battle\nWHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
        "final_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';",
        "input_tokens": 1390,
        "output_tokens": 254,
        "time": 7.96203633299956,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "gold_query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT result) FROM battle;",
        "final_sql": "SELECT COUNT(DISTINCT result) FROM battle;",
        "input_tokens": 1089,
        "output_tokens": 70,
        "time": 3.858686083000066,
        "question": "How many different results are there for the battles?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(DISTINCT RESULT) FROM battle"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM battle\nWHERE id NOT IN (\n    SELECT lost_in_battle FROM ship\n    WHERE tonnage = '225'\n);",
        "final_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (   SELECT lost_in_battle FROM ship   WHERE tonnage = '225' );",
        "input_tokens": 1339,
        "output_tokens": 244,
        "time": 7.440005750000637,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    {
        "baseline_sql": "SELECT b.name, b.date\nFROM battle b\nJOIN ship s1 ON b.id = s1.lost_in_battle\nJOIN ship s2 ON b.id = s2.lost_in_battle\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';",
        "final_sql": "SELECT b.name, b.date FROM battle b JOIN ship s1 ON b.id = s1.lost_in_battle JOIN ship s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta';",
        "input_tokens": 1473,
        "output_tokens": 324,
        "time": 8.8155995420002,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
    },
    {
        "baseline_sql": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle b\nLEFT JOIN ship s ON b.id = s.lost_in_battle\nWHERE s.location <> 'English Channel' OR s.location IS NULL;",
        "final_sql": "SELECT b.name, b.result, b.bulgarian_commander FROM battle b LEFT JOIN ship s ON b.id = s.lost_in_battle WHERE s.location = 'English Channel' AND s.lost_in_battle IS NULL;",
        "input_tokens": 1456,
        "output_tokens": 326,
        "time": 9.741051082999547,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    {
        "baseline_sql": "SELECT note\nFROM death\nWHERE note LIKE '%East%';",
        "final_sql": "SELECT note FROM death WHERE note LIKE '%East%';",
        "input_tokens": 1157,
        "output_tokens": 104,
        "time": 4.190252583999609,
        "question": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "gold_query": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "baseline_sql": "SELECT line_1, line_2\nFROM Addresses;",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2757,
        "output_tokens": 84,
        "time": 4.159190750000562,
        "question": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT line_1, line_2\nFROM Addresses;",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2719,
        "output_tokens": 65,
        "time": 4.269836124998619,
        "question": "What is the first and second line for all addresses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Courses;",
        "final_sql": "SELECT COUNT(*) FROM Courses;",
        "input_tokens": 2712,
        "output_tokens": 63,
        "time": 3.6470058750001044,
        "question": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Courses;",
        "final_sql": "SELECT COUNT(*) FROM Courses;",
        "input_tokens": 2699,
        "output_tokens": 58,
        "time": 2.935221249999813,
        "question": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT course_description\nFROM Courses\nWHERE course_name = 'Math';",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name = 'Math';",
        "input_tokens": 2788,
        "output_tokens": 122,
        "time": 5.501814165998439,
        "question": "How is the math course described?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT course_description\nFROM Courses\nWHERE course_name LIKE '%math%';",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%';",
        "input_tokens": 2811,
        "output_tokens": 132,
        "time": 5.394334417000209,
        "question": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT zip_postcode\nFROM Addresses\nWHERE city = 'Port Chelsea';",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "input_tokens": 2814,
        "output_tokens": 126,
        "time": 5.292521499999566,
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT zip_postcode\nFROM Addresses\nWHERE city = 'Port Chelsea';",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "input_tokens": 2793,
        "output_tokens": 122,
        "time": 4.568694667001182,
        "question": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT d.department_id, d.department_name\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nHAVING COUNT(dp.degree_program_id) = (\n    SELECT MAX(degree_count)\n    FROM (\n        SELECT COUNT(*) as degree_count\n        FROM Degree_Programs\n        GROUP BY department_id\n    )\n)",
        "final_sql": "SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(dp.degree_program_id) = (   SELECT MAX(degree_count)   FROM (     SELECT COUNT(*) as degree_count     FROM Degree_Programs     GROUP BY department_id   ) )",
        "input_tokens": 3133,
        "output_tokens": 383,
        "time": 11.025426625001273,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.department_id, d.department_name\nFROM Departments d\nJOIN Degree_Programs dp ON d.department_id = dp.department_id\nGROUP BY d.department_id, d.department_name\nHAVING COUNT(dp.degree_program_id) = (\n    SELECT MAX(degree_count)\n    FROM (\n        SELECT COUNT(degree_program_id) as degree_count\n        FROM Degree_Programs\n        GROUP BY department_id\n    )\n);",
        "final_sql": "SELECT d.department_id, d.department_name FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id, d.department_name HAVING COUNT(dp.degree_program_id) = (   SELECT MAX(degree_count)   FROM (     SELECT COUNT(degree_program_id) as degree_count     FROM Degree_Programs     GROUP BY department_id   ) AS subquery );",
        "input_tokens": 3084,
        "output_tokens": 356,
        "time": 10.20954533299846,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "input_tokens": 2686,
        "output_tokens": 52,
        "time": 2.621261416999914,
        "question": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "input_tokens": 2686,
        "output_tokens": 52,
        "time": 3.251972832998945,
        "question": "How many different departments offer degrees?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT degree_summary_name) AS num_degree_names\nFROM Degree_Programs;",
        "final_sql": "SELECT COUNT(degree_summary_name) AS num_degree_names FROM Degree_Programs;",
        "input_tokens": 2734,
        "output_tokens": 84,
        "time": 4.178853000001254,
        "question": "How many different degree names are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT degree_program_id) AS num_degrees\nFROM Degree_Programs;",
        "final_sql": "SELECT COUNT(DISTINCT degree_program_id) AS num_degrees FROM Degree_Programs;",
        "input_tokens": 2737,
        "output_tokens": 91,
        "time": 4.3710035830008565,
        "question": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Degree_Programs \nWHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');",
        "final_sql": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';",
        "input_tokens": 2797,
        "output_tokens": 137,
        "time": 5.1874249590000545,
        "question": "How many degrees does the engineering department offer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Degree_Programs \nWHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'engineering');",
        "final_sql": "SELECT COUNT(*) FROM Degree_Programs JOIN Departments ON Degree_Programs.department_id = Departments.department_id WHERE Departments.department_name = 'engineering';",
        "input_tokens": 2797,
        "output_tokens": 137,
        "time": 5.597481167000296,
        "question": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT section_name, section_description\nFROM Sections;",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2691,
        "output_tokens": 45,
        "time": 3.18631166600062,
        "question": "What are the names and descriptions of all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT section_name, section_description\nFROM Sections;",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2691,
        "output_tokens": 45,
        "time": 3.6527470000000903,
        "question": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT c.course_id, c.course_name\nFROM Courses c\nJOIN Sections s ON c.course_id = s.course_id\nGROUP BY c.course_id, c.course_name\nHAVING COUNT(s.section_id) <= 2;",
        "final_sql": "SELECT c.course_id, c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id GROUP BY c.course_id, c.course_name HAVING COUNT(s.section_id) <= 2;",
        "input_tokens": 3008,
        "output_tokens": 278,
        "time": 8.974538709000626,
        "question": "What are the names and id of courses having at most 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT course_id, course_name\nFROM Courses\nWHERE course_id IN (\n    SELECT course_id\n    FROM Sections\n    GROUP BY course_id\n    HAVING COUNT(*) < 2\n);",
        "final_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) < 2 );",
        "input_tokens": 2982,
        "output_tokens": 268,
        "time": 8.058418874999916,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "input_tokens": 2865,
        "output_tokens": 165,
        "time": 6.5185745829985535,
        "question": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT section_name\nFROM Sections\nORDER BY section_name DESC;",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "input_tokens": 2814,
        "output_tokens": 130,
        "time": 5.188355124999362,
        "question": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT Semesters.semester_id, Semesters.semester_name\nFROM Semesters\nJOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id\nGROUP BY Semesters.semester_id, Semesters.semester_name\nORDER BY COUNT(Student_Enrolment.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT Semesters.semester_id, Semesters.semester_name FROM Semesters JOIN Student_Enrolment ON Semesters.semester_id = Student_Enrolment.semester_id GROUP BY Semesters.semester_id, Semesters.semester_name ORDER BY COUNT(Student_Enrolment.student_id) DESC LIMIT 1;",
        "input_tokens": 3061,
        "output_tokens": 316,
        "time": 9.90267379099896,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.semester_id, s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nGROUP BY s.semester_id, s.semester_name\nHAVING COUNT(se.student_id) = (\n    SELECT MAX(student_count)\n    FROM (\n        SELECT se.semester_id, COUNT(se.student_id) AS student_count\n        FROM Student_Enrolment se\n        GROUP BY se.semester_id\n    ) AS counts\n);",
        "final_sql": "SELECT s.semester_id, s.semester_name, COUNT(se.student_id) AS student_count FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name HAVING COUNT(se.student_id) = (   SELECT MAX(student_count)   FROM (     SELECT se.semester_id, COUNT(se.student_id) AS student_count     FROM Student_Enrolment se     GROUP BY se.semester_id   ) AS counts );",
        "input_tokens": 3149,
        "output_tokens": 411,
        "time": 12.29759070900036,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT department_description\nFROM Departments\nWHERE department_name LIKE '%computer%';",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
        "input_tokens": 2799,
        "output_tokens": 114,
        "time": 4.841624084001523,
        "question": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT department_description\nFROM Departments\nWHERE department_name LIKE '%computer%';",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';",
        "input_tokens": 2782,
        "output_tokens": 102,
        "time": 4.471661708999818,
        "question": "What is the department description for the one whose name has the word computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nGROUP BY s.student_id\nHAVING COUNT(DISTINCT se.degree_program_id) = 2\nAND COUNT(DISTINCT sem.semester_id) = 1;",
        "final_sql": "SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Semesters sem ON se.semester_id = sem.semester_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2 AND COUNT(DISTINCT sem.semester_id) = 1;",
        "input_tokens": 3376,
        "output_tokens": 530,
        "time": 14.816904290999446,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Semesters sem ON se.semester_id = sem.semester_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nHAVING COUNT(DISTINCT se.degree_program_id) = 2\nAND COUNT(DISTINCT sem.semester_id) = 1;",
        "final_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name HAVING COUNT(DISTINCT se.degree_program_id) = 2;",
        "input_tokens": 3412,
        "output_tokens": 519,
        "time": 14.543613583000479,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name\nFROM Students S\nJOIN Student_Enrolment SE ON S.student_id = SE.student_id\nJOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id\nWHERE DP.degree_summary_name = 'Bachelor';",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id JOIN Degree_Programs DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelor';",
        "input_tokens": 3096,
        "output_tokens": 331,
        "time": 10.06911187499827,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name = 'Bachelors';",
        "final_sql": "SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Bachelors';",
        "input_tokens": 3104,
        "output_tokens": 338,
        "time": 10.306540833000327,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;",
        "input_tokens": 3007,
        "output_tokens": 283,
        "time": 8.936525916000392,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC;",
        "input_tokens": 3010,
        "output_tokens": 279,
        "time": 10.042698082999777,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT dp.degree_program_id, dp.degree_summary_name\nFROM Degree_Programs dp\nJOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id\nGROUP BY dp.degree_program_id, dp.degree_summary_name\nORDER BY COUNT(se.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;",
        "input_tokens": 3069,
        "output_tokens": 319,
        "time": 9.89972358399973,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DEP.degree_program_id, DEP.degree_summary_name\nFROM Degree_Programs DEP\nJOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id\nGROUP BY DEP.degree_program_id, DEP.degree_summary_name\nHAVING COUNT(SE.student_id) = (\n    SELECT MAX(student_count)\n    FROM (\n        SELECT DEP.degree_program_id, COUNT(SE.student_id) AS student_count\n        FROM Degree_Programs DEP\n        JOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id\n        GROUP BY DEP.degree_program_id\n    )\n);",
        "final_sql": "SELECT DEP.degree_program_id, DEP.degree_summary_name FROM Degree_Programs DEP JOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id GROUP BY DEP.degree_program_id, DEP.degree_summary_name HAVING COUNT(SE.student_id) = (   SELECT MAX(student_count)   FROM (     SELECT DEP.degree_program_id, COUNT(SE.student_id) AS student_count     FROM Degree_Programs DEP     JOIN Student_Enrolment SE ON DEP.degree_program_id = SE.degree_program_id     GROUP BY DEP.degree_program_id   ) );",
        "input_tokens": 3152,
        "output_tokens": 421,
        "time": 11.743136458000663,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id\nORDER BY num_enrollments DESC\nLIMIT 1;",
        "final_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3196,
        "output_tokens": 386,
        "time": 10.71963491600036,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nGROUP BY s.student_id, s.first_name, s.middle_name, s.last_name\nORDER BY num_enrollments DESC\nLIMIT 1;",
        "final_sql": "SELECT s.student_id, s.first_name, s.middle_name, s.last_name, COUNT(se.student_enrolment_id) AS num_enrollments FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id, s.first_name, s.middle_name, s.last_name ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3178,
        "output_tokens": 380,
        "time": 12.5401311659989,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.semester_name\nFROM Semesters s\nLEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id\nWHERE se.semester_id IS NULL;",
        "final_sql": "SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.semester_id IS NULL;",
        "input_tokens": 3086,
        "output_tokens": 347,
        "time": 11.662299540999811,
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT semester_name\nFROM Semesters\nWHERE semester_id NOT IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n)",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (   SELECT semester_id   FROM Student_Enrolment )",
        "input_tokens": 2917,
        "output_tokens": 207,
        "time": 6.926200042000346,
        "question": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Sections s ON c.course_id = s.course_id\nJOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id;",
        "final_sql": "SELECT DISTINCT c.course_name FROM Courses c JOIN Sections s ON c.course_id = s.course_id JOIN Student_Enrolment_Courses sec ON s.section_id = sec.course_id;",
        "input_tokens": 3036,
        "output_tokens": 287,
        "time": 8.766978334000669,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT DISTINCT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;",
        "final_sql": "SELECT DISTINCT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id;",
        "input_tokens": 2880,
        "output_tokens": 180,
        "time": 6.467197666001084,
        "question": "What are the names of all courses that have some students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_name\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3058,
        "output_tokens": 309,
        "time": 9.343360667000525,
        "question": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.course_name\nFROM Courses c\nJOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id\nGROUP BY c.course_name\nORDER BY COUNT(sec.student_course_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_name ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;",
        "input_tokens": 3061,
        "output_tokens": 316,
        "time": 9.394958374999987,
        "question": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Students.last_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina'\nAND Students.student_id NOT IN (\n    SELECT student_id\n    FROM Student_Enrolment\n)",
        "final_sql": "SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment )",
        "input_tokens": 3148,
        "output_tokens": 358,
        "time": 10.416186333999576,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT Students.last_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Addresses.state_province_county = 'North Carolina'\nAND Students.student_id NOT IN (\n    SELECT student_id\n    FROM Student_Enrolment\n)",
        "final_sql": "SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (   SELECT student_id   FROM Student_Enrolment )",
        "input_tokens": 3002,
        "output_tokens": 261,
        "time": 8.330011625001134,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT t.transcript_date, t.transcript_id\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_date, t.transcript_id\nHAVING COUNT(tc.student_course_id) >= 2;",
        "final_sql": "SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IN (   SELECT student_course_id   FROM Student_Enrolment_Courses   GROUP BY student_course_id   HAVING COUNT(*) >= 2 );",
        "input_tokens": 2982,
        "output_tokens": 280,
        "time": 8.190998333999232,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT t.transcript_date, t.transcript_id\nFROM Transcripts t\nJOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id\nGROUP BY t.transcript_date, t.transcript_id\nHAVING COUNT(tc.student_course_id) >= 2;",
        "final_sql": "SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id WHERE tc.student_course_id IN (   SELECT student_course_id   FROM Student_Enrolment_Courses   GROUP BY student_course_id   HAVING COUNT(*) >= 2 );",
        "input_tokens": 2985,
        "output_tokens": 280,
        "time": 8.56787287500083,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT s.cell_mobile_number\nFROM Students s\nWHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
        "final_sql": "SELECT s.cell_mobile_number FROM Students s WHERE s.first_name = 'Timmothy' AND s.last_name = 'Ward';",
        "input_tokens": 2862,
        "output_tokens": 153,
        "time": 6.006235791999643,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    {
        "baseline_sql": "SELECT Students.cell_mobile_number\nFROM Students\nWHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';",
        "final_sql": "SELECT Students.cell_mobile_number FROM Students WHERE Students.first_name = 'Timmothy' AND Students.last_name = 'Ward';",
        "input_tokens": 2885,
        "output_tokens": 180,
        "time": 6.116851916000087,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name\nFROM Students\nORDER BY date_first_registered\nLIMIT 1;",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;",
        "input_tokens": 2905,
        "output_tokens": 185,
        "time": 6.4165080830007355,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name\nFROM Students\nWHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students)\nLIMIT 1;",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE date_first_registered = (SELECT MIN(date_first_registered) FROM Students) LIMIT 1;",
        "input_tokens": 2900,
        "output_tokens": 196,
        "time": 7.033264583000346,
        "question": "What is the first, middle, and last name of the first student to register?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.first_name, s.middle_name, s.last_name\nFROM Students s\nJOIN Student_Enrolment se ON s.student_id = se.student_id\nJOIN Transcript_Contents tc ON se.student_enrolment_id = tc.student_course_id\nJOIN Transcripts t ON tc.transcript_id = t.transcript_id\nORDER BY t.transcript_date ASC\nLIMIT 1;",
        "final_sql": "SELECT s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id JOIN Transcript_Contents tc ON se.student_enrolment_id = tc.student_course_id JOIN Transcripts t ON tc.transcript_id = t.transcript_id ORDER BY t.transcript_date ASC LIMIT 1;",
        "input_tokens": 3267,
        "output_tokens": 463,
        "time": 12.253385915999388,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Students.first_name, Students.middle_name, Students.last_name\nFROM Students\nJOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id\nJOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_course_id\nJOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id\nORDER BY Transcripts.transcript_date ASC\nLIMIT 1;",
        "final_sql": "SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Transcript_Contents ON Student_Enrolment.student_enrolment_id = Transcript_Contents.student_enrolment_id JOIN Transcripts ON Transcript_Contents.transcript_id = Transcripts.transcript_id ORDER BY Transcripts.transcript_date ASC LIMIT 1;",
        "input_tokens": 3260,
        "output_tokens": 469,
        "time": 12.974519542000053,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Students.first_name\nFROM Students\nJOIN Addresses ON Students.current_address_id = Addresses.address_id\nWHERE Students.permanent_address_id <> Students.current_address_id;",
        "final_sql": "SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Students.current_address_id <> Students.permanent_address_id;",
        "input_tokens": 2928,
        "output_tokens": 204,
        "time": 7.032840958998349,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT Students.first_name\nFROM Students\nJOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id\nJOIN Addresses AS permanent_address ON Students.permanent_address_id = permanent_address.address_id\nWHERE current_address.line_1 <> permanent_address.line_1;",
        "final_sql": "SELECT Students.first_name FROM Students JOIN Addresses AS current_address ON Students.current_address_id = current_address.address_id JOIN Addresses AS permanent_address ON Students.permanent_address_id = permanent_address.address_id WHERE current_address.address_id <> permanent_address.address_id;",
        "input_tokens": 3001,
        "output_tokens": 268,
        "time": 8.259057499999471,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT a.address_id, a.line_1, a.line_2, a.line_3\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1;",
        "input_tokens": 3088,
        "output_tokens": 342,
        "time": 9.746463749999748,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT a.address_id, a.line_1, a.line_2\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id\nGROUP BY a.address_id, a.line_1, a.line_2\nORDER BY COUNT(s.student_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2 ORDER BY COUNT(s.student_id) DESC LIMIT 1;",
        "input_tokens": 3081,
        "output_tokens": 323,
        "time": 9.389110750000327,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(transcript_date) FROM Transcripts;",
        "final_sql": "SELECT AVG(transcript_date) FROM Transcripts;",
        "input_tokens": 2702,
        "output_tokens": 57,
        "time": 3.8561309999986406,
        "question": "On average, when were the transcripts printed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT AVG(transcript_date) FROM Transcripts;",
        "final_sql": "SELECT AVG(transcript_date) FROM Transcripts;",
        "input_tokens": 2731,
        "output_tokens": 80,
        "time": 3.9602976250007487,
        "question": "What is the average transcript date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT transcript_date, other_details\nFROM Transcripts\nORDER BY transcript_date ASC\nLIMIT 1;",
        "final_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
        "input_tokens": 2966,
        "output_tokens": 237,
        "time": 7.541570249999495,
        "question": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(transcript_date), other_details\nFROM Transcripts;",
        "final_sql": "SELECT MIN(transcript_date), other_details FROM Transcripts;",
        "input_tokens": 2777,
        "output_tokens": 91,
        "time": 4.057838250000714,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Transcripts;",
        "final_sql": "SELECT COUNT(*) FROM Transcripts;",
        "input_tokens": 2757,
        "output_tokens": 98,
        "time": 4.777492625000377,
        "question": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Transcripts;",
        "final_sql": "SELECT COUNT(*) FROM Transcripts;",
        "input_tokens": 4348,
        "output_tokens": 1002,
        "time": 26.388026583001192,
        "question": "How many transcripts are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "final_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "input_tokens": 2723,
        "output_tokens": 73,
        "time": 3.755432750000182,
        "question": "What is the last transcript release date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "final_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "input_tokens": 2848,
        "output_tokens": 171,
        "time": 5.70160075000058,
        "question": "When was the last transcript released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SEC.course_id, SEC.section_id, COUNT(TEC.transcript_id) AS enrollment_count\nFROM Sections SEC\nJOIN Student_Enrolment_Courses SEC ON SEC.course_id = SEC.course_id\nJOIN Transcript_Contents TEC ON TEC.student_course_id = SEC.student_course_id\nGROUP BY SEC.course_id, SEC.section_id\nORDER BY enrollment_count DESC\nLIMIT 1;",
        "final_sql": "SELECT SEC.course_id, SEC.section_id, COUNT(TEC.transcript_id) AS enrollment_count FROM Sections SEC JOIN Student_Enrolment_Courses SEC ON SEC.course_id = SEC.course_id JOIN Transcript_Contents TEC ON TEC.student_course_id = SEC.student_course_id GROUP BY SEC.course_id, SEC.section_id ORDER BY enrollment_count DESC LIMIT 1;",
        "input_tokens": 3174,
        "output_tokens": 401,
        "time": 11.431130000000849,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SEC.course_id, COUNT(*) AS num_transcripts\nFROM Student_Enrolment_Courses SEC\nJOIN Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id\nGROUP BY SEC.course_id\nORDER BY num_transcripts DESC\nLIMIT 1;",
        "final_sql": "SELECT SEC.student_course_id AS enrollment_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses SEC JOIN Transcript_Contents TC ON SEC.student_course_id = TC.student_course_id GROUP BY SEC.student_course_id ORDER BY num_transcripts DESC LIMIT 1;",
        "input_tokens": 3122,
        "output_tokens": 360,
        "time": 10.291620292000516,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date\nFROM Transcripts\nORDER BY transcript_id\nLIMIT 1;",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 2870,
        "output_tokens": 165,
        "time": 6.75765841700013,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date\nFROM Transcripts\nWHERE transcript_id = (\n    SELECT transcript_id\n    FROM Transcript_Contents\n    GROUP BY transcript_id\n    ORDER BY COUNT(*) ASC\n    LIMIT 1\n);",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id = (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 );",
        "input_tokens": 3051,
        "output_tokens": 300,
        "time": 8.481374458000573,
        "question": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.semester_name\nFROM Semesters s\nJOIN Student_Enrolment se ON s.semester_id = se.semester_id\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nWHERE dp.degree_summary_name = 'Master' AND s.semester_id IN (\n    SELECT s.semester_id\n    FROM Semesters s\n    JOIN Student_Enrolment se ON s.semester_id = se.semester_id\n    JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\n    WHERE dp.degree_summary_name = 'Bachelor'\n)",
        "final_sql": "SELECT s.semester_name FROM Semesters s JOIN Student_Enrolment se ON s.semester_id = se.semester_id JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id WHERE dp.degree_summary_name = 'Master' AND s.semester_id IN (   SELECT s.semester_id   FROM Semesters s   JOIN Student_Enrolment se ON s.semester_id = se.semester_id   JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id   WHERE dp.degree_summary_name = 'Bachelor' )",
        "input_tokens": 3459,
        "output_tokens": 631,
        "time": 17.465783792000366,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT se.semester_id\nFROM Student_Enrolment se\nJOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\nJOIN Departments d ON dp.department_id = d.department_id\nWHERE d.department_name = 'Masters' AND se.semester_id IN (\n    SELECT se.semester_id\n    FROM Student_Enrolment se\n    JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id\n    JOIN Departments d ON dp.department_id = d.department_id\n    WHERE d.department_name = 'Bachelors'\n)\nGROUP BY se.semester_id\nHAVING COUNT(DISTINCT d.department_name) = 2;",
        "final_sql": "SELECT se.semester_id FROM Student_Enrolment se JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'Masters' AND se.semester_id IN (   SELECT se.semester_id   FROM Student_Enrolment se   JOIN Degree_Programs dp ON se.degree_program_id = dp.degree_program_id   JOIN Departments d ON dp.department_id = d.department_id   WHERE d.department_name = 'Bachelors' ) GROUP BY se.semester_id HAVING COUNT(DISTINCT d.department_name) = 2;",
        "input_tokens": 3291,
        "output_tokens": 531,
        "time": 14.19702554200012,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT current_address_id) AS num_addresses\nFROM Students;",
        "final_sql": "SELECT COUNT(DISTINCT current_address_id) AS num_addresses FROM Students;",
        "input_tokens": 2755,
        "output_tokens": 95,
        "time": 4.5073960829995485,
        "question": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT DISTINCT a.*\nFROM Addresses a\nJOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;",
        "final_sql": "SELECT DISTINCT a.* FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;",
        "input_tokens": 2867,
        "output_tokens": 178,
        "time": 6.170325082999625,
        "question": "What are the different addresses that have students living there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;",
        "final_sql": "SELECT * FROM Students ORDER BY last_name DESC;",
        "input_tokens": 2916,
        "output_tokens": 202,
        "time": 6.7245823749999545,
        "question": "List all the student details in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT * FROM Students ORDER BY last_name DESC;",
        "final_sql": "SELECT * FROM Students ORDER BY last_name DESC;",
        "input_tokens": 2819,
        "output_tokens": 151,
        "time": 5.594699000001128,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT * FROM Sections WHERE section_name = 'h';",
        "final_sql": "SELECT * FROM Sections WHERE section_name = 'h';",
        "input_tokens": 2803,
        "output_tokens": 142,
        "time": 5.500891707999472,
        "question": "Describe the section h.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT section_description\nFROM Sections\nWHERE section_name = 'h';",
        "final_sql": "SELECT section_description FROM Sections WHERE section_name = 'h';",
        "input_tokens": 2779,
        "output_tokens": 110,
        "time": 4.674210625000342,
        "question": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT Students.first_name\nFROM Students\nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id\nWHERE Addresses.country = 'Haiti'\nOR Students.cell_mobile_number = '09700166582';",
        "final_sql": "SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';",
        "input_tokens": 3085,
        "output_tokens": 302,
        "time": 8.67584291699859,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT Students.first_name\nFROM Students\nJOIN Addresses ON Students.permanent_address_id = Addresses.address_id\nWHERE Addresses.country = 'Haiti'\nOR Students.cell_mobile_number = '09700166582';",
        "final_sql": "SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti';",
        "input_tokens": 3070,
        "output_tokens": 283,
        "time": 8.98681708299955,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT Title\nFROM Cartoon\nORDER BY Title ASC;",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "input_tokens": 1338,
        "output_tokens": 145,
        "time": 5.8202036670008965,
        "question": "List the title of all cartoons in alphabetical order.",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title\nFROM Cartoon\nORDER BY Title ASC;",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "input_tokens": 1309,
        "output_tokens": 123,
        "time": 4.65591837500142,
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = \"Ben Jones\";",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "input_tokens": 1303,
        "output_tokens": 124,
        "time": 5.188310625000668,
        "question": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones';",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "input_tokens": 1300,
        "output_tokens": 116,
        "time": 4.768006166001214,
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "final_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "input_tokens": 1296,
        "output_tokens": 113,
        "time": 4.76572374999887,
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';",
        "final_sql": "SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';",
        "input_tokens": 1276,
        "output_tokens": 95,
        "time": 3.9799860840012116,
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title, Cartoon.Directed_by\nFROM Cartoon\nORDER BY Cartoon.Original_air_date;",
        "final_sql": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;",
        "input_tokens": 1329,
        "output_tokens": 138,
        "time": 4.878307625000161,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title, Cartoon.Directed_by\nFROM Cartoon\nORDER BY Cartoon.Original_air_date;",
        "final_sql": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;",
        "input_tokens": 1306,
        "output_tokens": 114,
        "time": 4.037765375000163,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Brandon Vietti\";",
        "final_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = \"Ben Jones\" OR Cartoon.Directed_by = \"Brandon Vietti\";",
        "input_tokens": 1493,
        "output_tokens": 250,
        "time": 7.674843208000311,
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Title\nFROM Cartoon\nWHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "input_tokens": 1342,
        "output_tokens": 142,
        "time": 5.3916768330000195,
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY Number_of_TV_Channels DESC\nLIMIT 1;",
        "final_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;",
        "input_tokens": 1495,
        "output_tokens": 246,
        "time": 7.3405587500001275,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Num_Channels\nFROM TV_Channel\nGROUP BY Country\nORDER BY Num_Channels DESC\nLIMIT 1;",
        "final_sql": "SELECT Country, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Country ORDER BY Num_Channels DESC LIMIT 1;",
        "input_tokens": 1409,
        "output_tokens": 191,
        "time": 6.761976167001194,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents\nFROM TV_Channel;",
        "final_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id;",
        "input_tokens": 1389,
        "output_tokens": 197,
        "time": 7.133350457999768,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents\nFROM TV_Channel;",
        "final_sql": "SELECT COUNT(DISTINCT Channel) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id;",
        "input_tokens": 1359,
        "output_tokens": 175,
        "time": 6.3237077920002775,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT Content\nFROM TV_Channel\nWHERE series_name = \"Sky Radio\";",
        "final_sql": "SELECT Content FROM TV_Channel WHERE id IN (   SELECT Channel   FROM TV_series   WHERE id IN (     SELECT Channel     FROM Cartoon     WHERE Title = \"Sky Radio\"   ) );",
        "input_tokens": 1313,
        "output_tokens": 154,
        "time": 5.800273333001314,
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Content\nFROM TV_Channel\nWHERE series_name = 'Sky Radio';",
        "final_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "input_tokens": 1282,
        "output_tokens": 108,
        "time": 5.6003639999998995,
        "question": "What is the content of the series Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Package_Option\nFROM TV_Channel\nWHERE series_name = \"Sky Radio\";",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE id IN (   SELECT Channel   FROM TV_series   WHERE series_name = \"Sky Radio\" ) OR id IN (   SELECT Channel   FROM Cartoon   WHERE Title = \"Sky Radio\" );",
        "input_tokens": 1314,
        "output_tokens": 161,
        "time": 5.939994500000466,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.series_name = 'Sky Radio';",
        "final_sql": "SELECT TV_Channel.Package_Option FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.series_name = 'Sky Radio';",
        "input_tokens": 1461,
        "output_tokens": 232,
        "time": 7.513521124999897,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';",
        "final_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';",
        "input_tokens": 1344,
        "output_tokens": 151,
        "time": 5.799660791999486,
        "question": "How many TV Channel using language English?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';",
        "final_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English';",
        "input_tokens": 1286,
        "output_tokens": 110,
        "time": 4.6779681669995625,
        "question": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Num_TV_Channel\nFROM TV_Channel\nGROUP BY Language\nORDER BY Num_TV_Channel\nLIMIT 1;",
        "final_sql": "SELECT Language, COUNT(*) AS Num_TV_Channel FROM TV_Channel GROUP BY Language ORDER BY Num_TV_Channel ASC LIMIT 1;",
        "input_tokens": 1447,
        "output_tokens": 217,
        "time": 7.748693625000669,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Num_Channels\nFROM TV_Channel\nGROUP BY Language\nHAVING COUNT(*) = (SELECT MIN(Num_Channels)\n                  FROM (SELECT COUNT(*) AS Num_Channels\n                        FROM TV_Channel\n                        GROUP BY Language))",
        "final_sql": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(Num_Channels)          FROM (SELECT COUNT(*) AS Num_Channels             FROM TV_Channel             GROUP BY Language) AS T)",
        "input_tokens": 1632,
        "output_tokens": 399,
        "time": 13.257031584000288,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Language;",
        "final_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;",
        "input_tokens": 1315,
        "output_tokens": 135,
        "time": 5.421475208000629,
        "question": "List each language and the number of TV Channels using it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels\nFROM TV_Channel\nGROUP BY Language;",
        "final_sql": "SELECT Language, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Language;",
        "input_tokens": 1297,
        "output_tokens": 115,
        "time": 4.775313541998912,
        "question": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
        "final_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
        "input_tokens": 1465,
        "output_tokens": 211,
        "time": 6.730059749999782,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Title = \"The Rise of the Blue Beetle\";",
        "final_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle';",
        "input_tokens": 1449,
        "output_tokens": 211,
        "time": 7.342352834000849,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = \"Sky Radio\";",
        "final_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id;",
        "input_tokens": 1455,
        "output_tokens": 207,
        "time": 6.931694292001339,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title\nFROM Cartoon\nJOIN TV_Channel ON Cartoon.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = \"Sky Radio\";",
        "final_sql": "SELECT Cartoon.Title FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.series_name = \"Sky Radio\";",
        "input_tokens": 1465,
        "output_tokens": 226,
        "time": 7.4440609169996605,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT TV_series.Episode\nFROM TV_series\nORDER BY TV_series.Rating;",
        "final_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC;",
        "input_tokens": 1459,
        "output_tokens": 241,
        "time": 8.247537124998416,
        "question": "List the Episode of all TV series sorted by rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT TV_series.Episode\nFROM TV_series\nORDER BY TV_series.Rating;",
        "final_sql": "SELECT Episode FROM TV_series ORDER BY Rating;",
        "input_tokens": 1323,
        "output_tokens": 138,
        "time": 6.429803209000966,
        "question": "What are all of the episodes ordered by ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT Episode, Rating\nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3;",
        "final_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "input_tokens": 1361,
        "output_tokens": 143,
        "time": 5.600394790999417,
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT Episode, Rating\nFROM TV_series\nORDER BY Rating DESC\nLIMIT 3;",
        "final_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "input_tokens": 1315,
        "output_tokens": 120,
        "time": 4.974685125000178,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT MIN(Share), MAX(Share) FROM TV_series;",
        "final_sql": "SELECT MIN(Share), MAX(Share) FROM TV_series;",
        "input_tokens": 1206,
        "output_tokens": 55,
        "time": 3.4490987500012125,
        "question": "What is minimum and maximum share of TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share\nFROM TV_series;",
        "final_sql": "SELECT MAX(Share) AS Maximum_Share, MIN(Share) AS Minimum_Share FROM TV_series;",
        "input_tokens": 1226,
        "output_tokens": 71,
        "time": 4.05711008399885,
        "question": "What is the maximum and minimum share for the TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT Air_Date\nFROM TV_series\nWHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1319,
        "output_tokens": 122,
        "time": 5.151535583001532,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Air_Date\nFROM TV_series\nWHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1293,
        "output_tokens": 112,
        "time": 4.913249791999988,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank\nFROM TV_series\nWHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1326,
        "output_tokens": 128,
        "time": 4.785388666001381,
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank\nFROM TV_series\nWHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1371,
        "output_tokens": 164,
        "time": 6.4179489580001245,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1495,
        "output_tokens": 241,
        "time": 7.853837458000271,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT TV_series.series_name\nFROM TV_series\nWHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_series.Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1339,
        "output_tokens": 148,
        "time": 5.702410459000021,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT TV_series.Episode\nFROM TV_series\nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id\nWHERE TV_Channel.series_name = \"Sky Radio\";",
        "final_sql": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\";",
        "input_tokens": 1525,
        "output_tokens": 270,
        "time": 8.035804667000775,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Episode\nFROM TV_series\nWHERE Channel IN (\n    SELECT id\n    FROM TV_Channel\n    WHERE series_name = \"Sky Radio\"\n);",
        "final_sql": "SELECT Episode FROM TV_series WHERE Channel IN (   SELECT id   FROM TV_Channel   WHERE series_name = \"Sky Radio\" );",
        "input_tokens": 1452,
        "output_tokens": 230,
        "time": 7.268340417000218,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons\nFROM Cartoon\nGROUP BY Directed_by;",
        "final_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;",
        "input_tokens": 1379,
        "output_tokens": 176,
        "time": 6.461138374999791,
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons\nFROM Cartoon\nGROUP BY Directed_by;",
        "final_sql": "SELECT Directed_by, COUNT(Title) AS num_cartoons FROM Cartoon GROUP BY Directed_by;",
        "input_tokens": 1360,
        "output_tokens": 180,
        "time": 6.168353291999665,
        "question": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Cartoon.Production_code, Cartoon.Channel\nFROM Cartoon\nWHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",
        "input_tokens": 1395,
        "output_tokens": 184,
        "time": 5.883547749999707,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT Cartoon.Production_code, Cartoon.Channel\nFROM Cartoon\nWHERE Cartoon.Original_air_date = (SELECT MAX(Cartoon.Original_air_date) FROM Cartoon)",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",
        "input_tokens": 1398,
        "output_tokens": 182,
        "time": 5.3114296669991745,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 'Yes';",
        "final_sql": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';",
        "input_tokens": 1327,
        "output_tokens": 126,
        "time": 4.8800928330001625,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 'Yes';",
        "final_sql": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes';",
        "input_tokens": 1342,
        "output_tokens": 128,
        "time": 4.474505916999988,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey';",
        "final_sql": "SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';",
        "input_tokens": 1465,
        "output_tokens": 235,
        "time": 7.452513791000456,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Written_by = 'Todd Casey';",
        "final_sql": "SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';",
        "input_tokens": 1461,
        "output_tokens": 228,
        "time": 6.75064087499959,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Written_by = 'Todd Casey'\n);",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );",
        "input_tokens": 1458,
        "output_tokens": 229,
        "time": 7.2103782079993834,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country\nFROM TV_Channel\nWHERE id NOT IN (\n    SELECT Channel\n    FROM Cartoon\n    WHERE Written_by = 'Todd Casey'\n);",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Written_by = 'Todd Casey' );",
        "input_tokens": 1455,
        "output_tokens": 229,
        "time": 7.142189916999996,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');",
        "final_sql": "SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by IN ('Ben Jones', 'Michael Chang');",
        "input_tokens": 1496,
        "output_tokens": 242,
        "time": 8.554597500000455,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name, TV_Channel.Country\nFROM TV_Channel\nJOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';",
        "final_sql": "SELECT Cartoon.Title, TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';",
        "input_tokens": 1479,
        "output_tokens": 231,
        "time": 6.995809791000283,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT TV_Channel.Pixel_aspect_ratio_PAR, TV_Channel.Country\nFROM TV_Channel\nWHERE TV_Channel.Language <> 'English'",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
        "input_tokens": 1306,
        "output_tokens": 110,
        "time": 4.047137625000687,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT Pixel_aspect_ratio_PAR, Country\nFROM TV_Channel\nWHERE Language <> 'English'",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> 'English'",
        "input_tokens": 1303,
        "output_tokens": 104,
        "time": 4.607070375001058,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT TV_Channel.id\nFROM TV_Channel\nWHERE TV_Channel.Country IN (\n    SELECT TV_Channel.Country\n    FROM TV_Channel\n    GROUP BY TV_Channel.Country\n    HAVING COUNT(TV_Channel.id) > 2\n);",
        "final_sql": "SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.Country IN (   SELECT TV_Channel.Country   FROM TV_Channel   GROUP BY TV_Channel.Country   HAVING COUNT(TV_Channel.id) > 2 );",
        "input_tokens": 1460,
        "output_tokens": 232,
        "time": 8.047863542000414,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT TV_Channel.id\nFROM TV_Channel\nGROUP BY TV_Channel.id\nHAVING COUNT(*) > 2;",
        "final_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2;",
        "input_tokens": 1389,
        "output_tokens": 170,
        "time": 5.198916834000556,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT DISTINCT TC.id\nFROM TV_Channel TC\nLEFT JOIN Cartoon C ON TC.id = C.Channel\nWHERE C.Directed_by <> 'Ben Jones' OR C.Directed_by IS NULL;",
        "final_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT DISTINCT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');",
        "input_tokens": 1483,
        "output_tokens": 243,
        "time": 8.181229125000755,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT DISTINCT TC.id\nFROM TV_Channel TC\nLEFT JOIN Cartoon C ON TC.id = C.Channel\nWHERE C.Directed_by <> 'Ben Jones' OR C.Directed_by IS NULL;",
        "final_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');",
        "input_tokens": 1508,
        "output_tokens": 258,
        "time": 8.022696999998516,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT DISTINCT TC.\"Package_Option\"\nFROM \"TV_Channel\" TC\nLEFT JOIN \"Cartoon\" C ON TC.\"id\" = C.\"Channel\"\nWHERE C.\"Directed_by\" != 'Ben Jones' OR C.\"Directed_by\" IS NULL;",
        "final_sql": "SELECT DISTINCT TC.\"Package_Option\" FROM \"TV_Channel\" TC LEFT JOIN \"Cartoon\" C ON TC.\"id\" = C.\"Channel\" WHERE C.\"Directed_by\" != 'Ben Jones' OR C.\"Directed_by\" IS NULL;",
        "input_tokens": 1550,
        "output_tokens": 292,
        "time": 8.56958079099968,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT DISTINCT TV_Channel.Package_Option\nFROM TV_Channel\nLEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel\nWHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;",
        "final_sql": "SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Directed_by IS NULL;",
        "input_tokens": 1497,
        "output_tokens": 257,
        "time": 7.649855209001544,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM poker_player;",
        "final_sql": "SELECT COUNT(DISTINCT People_ID) FROM poker_player;",
        "input_tokens": 901,
        "output_tokens": 74,
        "time": 4.200303499999791,
        "question": "How many poker players are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM poker_player;",
        "final_sql": "SELECT COUNT(DISTINCT People_ID) FROM poker_player;",
        "input_tokens": 920,
        "output_tokens": 86,
        "time": 4.125220709000132,
        "question": "Count the number of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Earnings\nFROM poker_player\nORDER BY Earnings DESC;",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "input_tokens": 1046,
        "output_tokens": 167,
        "time": 6.211682375000237,
        "question": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Earnings\nFROM poker_player\nORDER BY Earnings DESC;",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "input_tokens": 1157,
        "output_tokens": 240,
        "time": 8.060221082998396,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Poker_Player_ID, Final_Table_Made, Best_Finish\nFROM poker_player;",
        "final_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player;",
        "input_tokens": 949,
        "output_tokens": 91,
        "time": 3.9689568339999823,
        "question": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Poker_Player_ID, Final_Table_Made, Best_Finish\nFROM poker_player;",
        "final_sql": "SELECT Poker_Player_ID, Final_Table_Made, Best_Finish FROM poker_player;",
        "input_tokens": 952,
        "output_tokens": 95,
        "time": 4.266284749999613,
        "question": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) FROM poker_player;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player;",
        "input_tokens": 872,
        "output_tokens": 47,
        "time": 3.242442792001384,
        "question": "What is the average earnings of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) FROM poker_player;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player;",
        "input_tokens": 880,
        "output_tokens": 51,
        "time": 3.2483048750000307,
        "question": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Money_Rank\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);",
        "input_tokens": 1074,
        "output_tokens": 186,
        "time": 5.586869709000894,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Money_Rank\nFROM poker_player\nWHERE Earnings = (SELECT MAX(Earnings) FROM poker_player);",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player) ORDER BY Money_Rank DESC LIMIT 1;",
        "input_tokens": 1007,
        "output_tokens": 151,
        "time": 4.996114416000637,
        "question": "Return the money rank of the player with the greatest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;",
        "final_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1059,
        "output_tokens": 158,
        "time": 5.010668082999473,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT MAX(Final_Table_Made) \nFROM poker_player \nWHERE Earnings < 200000;",
        "final_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1050,
        "output_tokens": 156,
        "time": 5.500928542000111,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID;",
        "final_sql": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;",
        "input_tokens": 972,
        "output_tokens": 125,
        "time": 5.141082250000181,
        "question": "What are the names of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT Name\nFROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID;",
        "final_sql": "SELECT people.Name FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID;",
        "input_tokens": 1014,
        "output_tokens": 151,
        "time": 5.002332791998924,
        "question": "Return the names of all the poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;",
        "input_tokens": 1095,
        "output_tokens": 201,
        "time": 7.265045250000185,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nWHERE pp.Earnings > 300000;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;",
        "input_tokens": 1086,
        "output_tokens": 199,
        "time": 6.576710542000001,
        "question": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
        "input_tokens": 1148,
        "output_tokens": 239,
        "time": 7.0814653750003345,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Final_Table_Made ASC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
        "input_tokens": 1110,
        "output_tokens": 204,
        "time": 5.833107374999599,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT p.\"Birth_Date\"\nFROM \"poker_player\" pp\nJOIN \"people\" p ON pp.\"People_ID\" = p.\"People_ID\"\nWHERE pp.\"Earnings\" = (SELECT MIN(\"Earnings\") FROM \"poker_player\")",
        "final_sql": "SELECT p.\"Birth_Date\" FROM \"poker_player\" pp JOIN \"people\" p ON pp.\"People_ID\" = p.\"People_ID\" WHERE pp.\"Earnings\" = (SELECT MIN(\"Earnings\") FROM \"poker_player\")",
        "input_tokens": 1168,
        "output_tokens": 276,
        "time": 7.822331375000431,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.\"Birth_Date\"\nFROM \"poker_player\" pp\nJOIN \"people\" p ON pp.\"People_ID\" = p.\"People_ID\"\nWHERE pp.\"Earnings\" = (SELECT MIN(\"Earnings\") FROM \"poker_player\")",
        "final_sql": "SELECT p.\"Birth_Date\" FROM \"poker_player\" pp JOIN \"people\" p ON pp.\"People_ID\" = p.\"People_ID\" WHERE pp.\"Earnings\" = (SELECT MIN(\"Earnings\") FROM \"poker_player\")",
        "input_tokens": 1126,
        "output_tokens": 238,
        "time": 5.903818374999901,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.Money_Rank\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height = (SELECT MAX(Height) FROM people)",
        "final_sql": "SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE p.People_ID = (SELECT People_ID FROM people WHERE Height = (SELECT MAX(Height) FROM people))",
        "input_tokens": 1127,
        "output_tokens": 253,
        "time": 5.881563250000909,
        "question": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.Money_Rank\nFROM poker_player p\nJOIN people pe ON p.People_ID = pe.People_ID\nWHERE pe.Height = (SELECT MAX(Height) FROM people)",
        "final_sql": "SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID WHERE pe.Height = (SELECT MAX(Height) FROM people);",
        "input_tokens": 1109,
        "output_tokens": 218,
        "time": 6.237522542000079,
        "question": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;",
        "input_tokens": 1174,
        "output_tokens": 257,
        "time": 6.210474792000241,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) \nFROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nWHERE Height > 200;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;",
        "input_tokens": 1144,
        "output_tokens": 238,
        "time": 7.038399832999858,
        "question": "Give average earnings of poker players who are taller than 200.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;",
        "input_tokens": 1109,
        "output_tokens": 217,
        "time": 6.568727500000023,
        "question": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM poker_player pp\nJOIN people p ON pp.People_ID = p.People_ID\nORDER BY pp.Earnings DESC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC;",
        "input_tokens": 1091,
        "output_tokens": 203,
        "time": 5.906444416999875,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Nationality, COUNT(*) AS Count\nFROM people\nGROUP BY Nationality;",
        "final_sql": "SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;",
        "input_tokens": 1008,
        "output_tokens": 127,
        "time": 4.271348166999815,
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT Nationality, COUNT(*) AS Count\nFROM people\nGROUP BY Nationality;",
        "final_sql": "SELECT Nationality, COUNT(*) AS Count FROM people GROUP BY Nationality;",
        "input_tokens": 970,
        "output_tokens": 118,
        "time": 4.058809709000343,
        "question": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1057,
        "output_tokens": 180,
        "time": 5.604396708999047,
        "question": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1077,
        "output_tokens": 187,
        "time": 5.587023542000679,
        "question": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2;",
        "input_tokens": 1079,
        "output_tokens": 182,
        "time": 5.5046750839992455,
        "question": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Nationality\nFROM people\nGROUP BY Nationality\nHAVING COUNT(*) >= 2;",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(DISTINCT People_ID) >= 2;",
        "input_tokens": 1039,
        "output_tokens": 164,
        "time": 5.007421041998896,
        "question": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date\nFROM people\nORDER BY Name ASC;",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
        "input_tokens": 1084,
        "output_tokens": 179,
        "time": 5.36986429100034,
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date\nFROM people\nORDER BY Name ASC;",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name COLLATE NOCASE ASC;",
        "input_tokens": 1010,
        "output_tokens": 127,
        "time": 4.16366087499955,
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM people\nWHERE Nationality <> 'Russia';",
        "final_sql": "SELECT Name FROM people WHERE Nationality <> 'Russia';",
        "input_tokens": 992,
        "output_tokens": 126,
        "time": 4.467534749999686,
        "question": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM people\nWHERE Nationality <> 'Russia';",
        "final_sql": "SELECT Name FROM people WHERE Nationality <> 'Russia';",
        "input_tokens": 992,
        "output_tokens": 124,
        "time": 4.739689833999364,
        "question": "What are the names of people who are not from Russia?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM people\nWHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
        "final_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);",
        "input_tokens": 1060,
        "output_tokens": 176,
        "time": 5.437399917000221,
        "question": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT p.Name\nFROM people p\nLEFT JOIN poker_player pp ON p.People_ID = pp.People_ID\nWHERE pp.People_ID IS NULL;",
        "final_sql": "SELECT p.Name FROM people p LEFT JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.People_ID IS NULL;",
        "input_tokens": 1144,
        "output_tokens": 240,
        "time": 6.217325999999957,
        "question": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Nationality) AS NumDistinctNationalities\nFROM people;",
        "final_sql": "SELECT COUNT(DISTINCT Nationality) AS NumDistinctNationalities FROM people;",
        "input_tokens": 887,
        "output_tokens": 63,
        "time": 3.5531182499998977,
        "question": "How many distinct nationalities are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities\nFROM people;",
        "final_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM people;",
        "input_tokens": 887,
        "output_tokens": 63,
        "time": 3.4476852090010652,
        "question": "Count the number of different nationalities.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM AREA_CODE_STATE;",
        "final_sql": "SELECT COUNT(DISTINCT state) FROM AREA_CODE_STATE;",
        "input_tokens": 972,
        "output_tokens": 80,
        "time": 3.393514958999731,
        "question": "How many states are there?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name\nFROM CONTESTANTS\nORDER BY contestant_name DESC;",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;",
        "input_tokens": 1054,
        "output_tokens": 122,
        "time": 4.121286666999367,
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "baseline_sql": "SELECT vote_id, phone_number, state\nFROM VOTES;",
        "final_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
        "input_tokens": 1019,
        "output_tokens": 94,
        "time": 3.7535423329991318,
        "question": "List the vote ids, phone numbers and states of all votes.",
        "db_id": "voter_1",
        "gold_query": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    {
        "baseline_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;",
        "final_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;",
        "input_tokens": 969,
        "output_tokens": 72,
        "time": 3.060818083000413,
        "question": "What are the maximum and minimum values of area codes?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA';",
        "final_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA';",
        "input_tokens": 1051,
        "output_tokens": 116,
        "time": 4.25563691699972,
        "question": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT contestant_name\nFROM CONTESTANTS\nWHERE contestant_name <> 'Jessie Alloway';",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name <> 'Jessie Alloway';",
        "input_tokens": 1070,
        "output_tokens": 126,
        "time": 4.462220334000449,
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    {
        "baseline_sql": "SELECT DISTINCT state, created\nFROM VOTES;",
        "final_sql": "SELECT DISTINCT state, created FROM VOTES;",
        "input_tokens": 960,
        "output_tokens": 55,
        "time": 3.6790064590004476,
        "question": "What are the distinct states and create time of all votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT DISTINCT state ,  created FROM votes"
    },
    {
        "baseline_sql": "SELECT c.contestant_number, c.contestant_name\nFROM CONTESTANTS c\nJOIN VOTES v ON c.contestant_number = v.contestant_number\nGROUP BY c.contestant_number, c.contestant_name\nHAVING COUNT(v.vote_id) >= 2;",
        "final_sql": "SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) >= 2;",
        "input_tokens": 1235,
        "output_tokens": 267,
        "time": 7.224552875000882,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT c.contestant_number, c.contestant_name\nFROM CONTESTANTS c\nJOIN VOTES v ON c.contestant_number = v.contestant_number\nGROUP BY c.contestant_number, c.contestant_name\nHAVING COUNT(v.vote_id) = (\n    SELECT MIN(vote_count)\n    FROM (\n        SELECT COUNT(vote_id) as vote_count\n        FROM VOTES\n        GROUP BY contestant_number\n    ) t\n);",
        "final_sql": "SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS c JOIN VOTES v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name HAVING COUNT(v.vote_id) = (   SELECT MIN(vote_count)   FROM (     SELECT COUNT(vote_id) as vote_count     FROM VOTES     GROUP BY contestant_number   ) t );",
        "input_tokens": 1356,
        "output_tokens": 362,
        "time": 10.186248250000062,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) AS num_votes\nFROM VOTES\nWHERE state = 'NY' OR state = 'CA';",
        "final_sql": "SELECT COUNT(*) AS num_votes FROM VOTES WHERE state = 'NY' OR state = 'CA';",
        "input_tokens": 1066,
        "output_tokens": 127,
        "time": 4.812733415999901,
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);",
        "final_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);",
        "input_tokens": 1094,
        "output_tokens": 161,
        "time": 5.700579125001241,
        "question": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
    },
    {
        "baseline_sql": "SELECT state, COUNT(*) AS vote_count\nFROM VOTES\nGROUP BY state\nORDER BY vote_count DESC\nLIMIT 1;",
        "final_sql": "SELECT state, COUNT(*) AS vote_count FROM VOTES GROUP BY state ORDER BY vote_count DESC LIMIT 1;",
        "input_tokens": 1162,
        "output_tokens": 207,
        "time": 6.731808541999271,
        "question": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT V.created, V.state, V.phone_number\nFROM VOTES V\nJOIN CONTESTANTS C ON V.contestant_number = C.contestant_number\nWHERE C.contestant_name = 'Tabatha Gehling';",
        "final_sql": "SELECT V.created, V.state, V.phone_number FROM VOTES V JOIN CONTESTANTS C ON V.contestant_number = C.contestant_number WHERE C.contestant_name = 'Tabatha Gehling';",
        "input_tokens": 1243,
        "output_tokens": 245,
        "time": 7.859122875001049,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "gold_query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    {
        "baseline_sql": "SELECT a.area_code\nFROM AREA_CODE_STATE a\nJOIN VOTES v1 ON a.state = v1.state\nJOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number\nJOIN VOTES v2 ON v1.phone_number = v2.phone_number\nJOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number\nWHERE c1.contestant_name = 'Tabatha Gehling'\nAND c2.contestant_name = 'Kelly Clauss';",
        "final_sql": "SELECT a.area_code FROM AREA_CODE_STATE a JOIN VOTES v1 ON a.state = v1.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN VOTES v2 ON v1.phone_number = v2.phone_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';",
        "input_tokens": 1587,
        "output_tokens": 516,
        "time": 13.782401374999608,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "gold_query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    {
        "baseline_sql": "SELECT contestant_name\nFROM CONTESTANTS\nWHERE contestant_name LIKE '%Al%';",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';",
        "input_tokens": 1025,
        "output_tokens": 98,
        "time": 4.16406866699981,
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "db_id": "voter_1",
        "gold_query": "select contestant_name from contestants where contestant_name like \"%al%\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nWHERE IndepYear > 1950;",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950;",
        "input_tokens": 1397,
        "output_tokens": 175,
        "time": 6.005301499999405,
        "question": "What are the names of all the countries that became independent after 1950?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nWHERE IndepYear > 1950;",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950;",
        "input_tokens": 1388,
        "output_tokens": 174,
        "time": 6.111460083999191,
        "question": "Give the names of the nations that were founded after 1950.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';",
        "final_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';",
        "input_tokens": 1370,
        "output_tokens": 163,
        "time": 5.59904008400008,
        "question": "How many countries have a republic as their form of government?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm = 'Republic';",
        "final_sql": "SELECT COUNT(*) FROM country WHERE GovernmentForm LIKE '%Republic%';",
        "input_tokens": 1344,
        "output_tokens": 145,
        "time": 5.496559750001325,
        "question": "How many countries have governments that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Region = 'Caribbean';",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Region = 'Caribbean';",
        "input_tokens": 1321,
        "output_tokens": 124,
        "time": 5.08691354199982,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Caribbean';",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Caribbean';",
        "input_tokens": 1447,
        "output_tokens": 219,
        "time": 7.241733042001215,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT Continent\nFROM country\nWHERE Code = 'AIA';",
        "final_sql": "SELECT Continent FROM country WHERE Code = 'AIA';",
        "input_tokens": 1295,
        "output_tokens": 116,
        "time": 4.490991832999498,
        "question": "Which continent is Anguilla in?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT c.Continent\nFROM country c\nWHERE c.Code = 'AIA';",
        "final_sql": "SELECT c.Continent FROM country c WHERE c.Code = 'AIA';",
        "input_tokens": 1373,
        "output_tokens": 164,
        "time": 4.8918194580001,
        "question": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT c.Region\nFROM city AS ct\nJOIN country AS c ON ct.CountryCode = c.Code\nWHERE ct.Name = 'Kabul';",
        "final_sql": "SELECT c.Region FROM city AS ct JOIN country AS c ON ct.CountryCode = c.Code WHERE ct.Name = 'Kabul';",
        "input_tokens": 1480,
        "output_tokens": 252,
        "time": 6.644639375001134,
        "question": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT c.Region\nFROM city AS c\nJOIN country AS co ON c.CountryCode = co.Code\nWHERE c.Name = 'Kabul';",
        "final_sql": "SELECT co.Region FROM city AS c JOIN country AS co ON c.CountryCode = co.Code WHERE c.Name = 'Kabul';",
        "input_tokens": 1367,
        "output_tokens": 182,
        "time": 5.527401790999647,
        "question": "What region is Kabul in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW'\nORDER BY Percentage DESC\nLIMIT 1;",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;",
        "input_tokens": 1424,
        "output_tokens": 211,
        "time": 5.3607047499990585,
        "question": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode = 'ABW'\nAND IsOfficial = 'T';",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T';",
        "input_tokens": 1341,
        "output_tokens": 151,
        "time": 5.109559082999112,
        "question": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil';",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';",
        "input_tokens": 1272,
        "output_tokens": 96,
        "time": 4.658664290998786,
        "question": "What are the population and life expectancies in Brazil?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy\nFROM country\nWHERE Name = 'Brazil';",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil';",
        "input_tokens": 1275,
        "output_tokens": 100,
        "time": 4.266469041998789,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Region, Population\nFROM country\nWHERE Name = 'Angola';",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';",
        "input_tokens": 1258,
        "output_tokens": 90,
        "time": 3.5491452500009473,
        "question": "What are the region and population of Angola?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT country.Region, country.Population\nFROM country\nWHERE country.Name = 'Angola';",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola';",
        "input_tokens": 1275,
        "output_tokens": 94,
        "time": 4.261637875000815,
        "question": "What region does Angola belong to and what is its population?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Region = 'Central Africa';",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa';",
        "input_tokens": 1344,
        "output_tokens": 136,
        "time": 5.2948937920009485,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND Region = 'Central Africa';",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';",
        "input_tokens": 1336,
        "output_tokens": 141,
        "time": 4.784082166999724,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.LifeExpectancy ASC\nLIMIT 1;",
        "final_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;",
        "input_tokens": 1536,
        "output_tokens": 281,
        "time": 8.057373999999982,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.LifeExpectancy ASC\nLIMIT 1;",
        "final_sql": "SELECT c.Name FROM country c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1;",
        "input_tokens": 1480,
        "output_tokens": 239,
        "time": 7.363797125000929,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SUM(Population), MAX(GNP) \nFROM country \nWHERE Continent = 'Asia';",
        "final_sql": "SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1283,
        "output_tokens": 104,
        "time": 4.755535249998502,
        "question": "What is the total population and maximum GNP in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP\nFROM country\nWHERE Continent = 'Asia';",
        "final_sql": "SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1355,
        "output_tokens": 148,
        "time": 5.90571141700093,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
        "input_tokens": 1476,
        "output_tokens": 233,
        "time": 7.0320820410015585,
        "question": "What is the average life expectancy in African countries that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';",
        "input_tokens": 1473,
        "output_tokens": 231,
        "time": 7.859170666999489,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia' OR Continent = 'Europe';",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';",
        "input_tokens": 1291,
        "output_tokens": 109,
        "time": 4.669966875000682,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) \nFROM country \nWHERE Continent = 'Asia' OR Continent = 'Europe';",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe';",
        "input_tokens": 1340,
        "output_tokens": 142,
        "time": 5.8023941249994095,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT SUM(Population) \nFROM city \nWHERE District = 'Gelderland';",
        "final_sql": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland';",
        "input_tokens": 1430,
        "output_tokens": 215,
        "time": 6.7081586660006,
        "question": "How many people live in Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT SUM(Population) \nFROM city \nWHERE District = 'Gelderland';",
        "final_sql": "SELECT SUM(Population) FROM city WHERE District = 'Gelderland';",
        "input_tokens": 1317,
        "output_tokens": 130,
        "time": 5.684471958000358,
        "question": "What is the total population of Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population\nFROM country\nWHERE GovernmentForm = 'US territory';",
        "final_sql": "SELECT AVG(GNP) AS Average_GNP, SUM(Population) AS Total_Population FROM country WHERE GovernmentForm = 'US territory';",
        "input_tokens": 1319,
        "output_tokens": 123,
        "time": 4.682545666999431,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population\nFROM country\nWHERE Region = 'US Territory';",
        "final_sql": "SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Region = 'US Territory';",
        "input_tokens": 1320,
        "output_tokens": 128,
        "time": 5.211923041000773,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT \"Language\") FROM \"countrylanguage\";",
        "final_sql": "SELECT COUNT(DISTINCT \"Language\") FROM \"countrylanguage\";",
        "input_tokens": 1317,
        "output_tokens": 131,
        "time": 5.292851999998675,
        "question": "How many unique languages are spoken in the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT \"Language\") AS \"Distinct Languages\"\nFROM \"countrylanguage\";",
        "final_sql": "SELECT COUNT(DISTINCT \"Language\") AS \"Distinct Languages\" FROM \"countrylanguage\";",
        "input_tokens": 1297,
        "output_tokens": 113,
        "time": 6.0065728339995985,
        "question": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
        "final_sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';",
        "input_tokens": 1374,
        "output_tokens": 171,
        "time": 5.801200041001721,
        "question": "How many type of governments are in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT GovernmentForm) \nFROM country \nWHERE Continent = 'Africa';",
        "final_sql": "SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa';",
        "input_tokens": 1271,
        "output_tokens": 97,
        "time": 4.67558283300059,
        "question": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';",
        "final_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';",
        "input_tokens": 1289,
        "output_tokens": 109,
        "time": 4.485637666999537,
        "question": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'ABW';",
        "final_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW';",
        "input_tokens": 1244,
        "output_tokens": 85,
        "time": 3.745635041999776,
        "question": "How many languages are spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE CountryCode = 'AFG' AND IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';",
        "input_tokens": 1315,
        "output_tokens": 137,
        "time": 4.884318250000433,
        "question": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE CountryCode = 'AFG' AND IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';",
        "input_tokens": 1318,
        "output_tokens": 137,
        "time": 4.881790625000576,
        "question": "How many official languages are spoken in Afghanistan?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN (\n    SELECT CountryCode, COUNT(Language) AS NumLanguages\n    FROM countrylanguage\n    GROUP BY CountryCode\n    ORDER BY NumLanguages DESC\n    LIMIT 1\n) cl ON c.Code = cl.CountryCode;",
        "final_sql": "SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(Language) AS NumLanguages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY NumLanguages DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;",
        "input_tokens": 1622,
        "output_tokens": 360,
        "time": 9.285742666999795,
        "question": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN (\n    SELECT CountryCode, COUNT(*) AS num_languages\n    FROM countrylanguage\n    GROUP BY CountryCode\n    ORDER BY num_languages DESC\n    LIMIT 1\n) cl ON c.Code = cl.CountryCode;",
        "final_sql": "SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(*) AS num_languages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY num_languages DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;",
        "input_tokens": 1603,
        "output_tokens": 334,
        "time": 609.9820312499996,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Continent\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY COUNT(DISTINCT cl.Language) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;",
        "input_tokens": 1544,
        "output_tokens": 305,
        "time": 10.511037083000701,
        "question": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Continent\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Continent\nORDER BY COUNT(cl.Language) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Continent FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY COUNT(cl.Language) DESC LIMIT 1;",
        "input_tokens": 1532,
        "output_tokens": 297,
        "time": 10.208782582998538,
        "question": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM countrylanguage\nWHERE Language = 'English' AND CountryCode IN (\n    SELECT CountryCode FROM countrylanguage\n    WHERE Language = 'Dutch'\n);",
        "final_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (   SELECT CountryCode FROM countrylanguage   WHERE Language = 'Dutch' );",
        "input_tokens": 1397,
        "output_tokens": 199,
        "time": 6.491484833000868,
        "question": "How many countries speak both English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS Number_of_Nations\nFROM countrylanguage cl\nWHERE cl.Language IN ('English', 'Dutch')\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(DISTINCT cl.CountryCode) AS Number_of_Nations FROM countrylanguage cl WHERE cl.Language IN ('English', 'Dutch') AND cl.IsOfficial = 'T';",
        "input_tokens": 1469,
        "output_tokens": 257,
        "time": 9.234487499999886,
        "question": "What is the number of nations that use English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T';",
        "input_tokens": 1583,
        "output_tokens": 342,
        "time": 8.774322166000275,
        "question": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French' AND cl1.IsOfficial = 'T' AND cl2.IsOfficial = 'T'",
        "input_tokens": 1590,
        "output_tokens": 343,
        "time": 10.350552916001106,
        "question": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T'\nAND cl2.Language = 'French' AND cl2.IsOfficial = 'T';",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode AND cl1.Language = 'English' AND cl1.IsOfficial = 'T' JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';",
        "input_tokens": 1537,
        "output_tokens": 302,
        "time": 8.118810459000088,
        "question": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM country c\nJOIN countrylanguage cl1 ON c.Code = cl1.CountryCode\nJOIN countrylanguage cl2 ON c.Code = cl2.CountryCode\nWHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T'\nAND cl2.Language = 'French' AND cl2.IsOfficial = 'T';",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';",
        "input_tokens": 1521,
        "output_tokens": 297,
        "time": 8.15285374999985,
        "question": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT c.Continent) AS NumContinents\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Chinese';",
        "final_sql": "SELECT COUNT(DISTINCT c.Continent) AS NumContinents FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';",
        "input_tokens": 1549,
        "output_tokens": 297,
        "time": 9.254814291000002,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT c.Continent) AS NumContinents\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(DISTINCT c.Continent) AS NumContinents FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese' AND cl.IsOfficial = 'T';",
        "input_tokens": 1488,
        "output_tokens": 271,
        "time": 9.014574207998521,
        "question": "How many continents speak Chinese?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('English', 'Dutch');",
        "final_sql": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');",
        "input_tokens": 1454,
        "output_tokens": 237,
        "time": 7.381618957999308,
        "question": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.Region\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language IN ('Dutch', 'English')",
        "final_sql": "SELECT DISTINCT c.Region FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English')",
        "input_tokens": 1445,
        "output_tokens": 237,
        "time": 7.303385332999824,
        "question": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'English' OR cl.Language = 'Dutch'\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T';",
        "input_tokens": 1507,
        "output_tokens": 268,
        "time": 8.872638000000734,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "gold_query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.Name\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Language = 'English' OR cl.Language = 'Dutch'\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch')",
        "input_tokens": 1448,
        "output_tokens": 224,
        "time": 6.500930792000872,
        "question": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "gold_query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nJOIN country ON countrylanguage.CountryCode = country.Code\nWHERE country.Continent = 'Asia'\nORDER BY Percentage DESC\nLIMIT 1;",
        "final_sql": "SELECT Language FROM countrylanguage JOIN country ON countrylanguage.CountryCode = country.Code WHERE country.Continent = 'Asia' ORDER BY Percentage DESC LIMIT 1;",
        "input_tokens": 1426,
        "output_tokens": 227,
        "time": 6.640595374999975,
        "question": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.Continent = 'Asia'\nGROUP BY cl.Language\nHAVING COUNT(DISTINCT cl.CountryCode) = (\n    SELECT MAX(num_countries)\n    FROM (\n        SELECT COUNT(DISTINCT cl.CountryCode) AS num_countries\n        FROM countrylanguage cl\n        JOIN country c ON cl.CountryCode = c.Code\n        WHERE c.Continent = 'Asia'\n        GROUP BY cl.Language\n    )\n);",
        "final_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language HAVING COUNT(DISTINCT c.Code) = (   SELECT MAX(num_countries)   FROM (     SELECT COUNT(DISTINCT c.Code) AS num_countries     FROM countrylanguage cl     JOIN country c ON cl.CountryCode = c.Code     WHERE c.Continent = 'Asia'     GROUP BY cl.Language   ) );",
        "input_tokens": 1572,
        "output_tokens": 351,
        "time": 9.291127167000013,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.GovernmentForm = 'Republic'\nGROUP BY cl.Language\nHAVING COUNT(DISTINCT cl.CountryCode) = 1;",
        "final_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;",
        "input_tokens": 1475,
        "output_tokens": 254,
        "time": 7.247853750001013,
        "question": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.GovernmentForm = 'Republic'\nGROUP BY cl.Language\nHAVING COUNT(DISTINCT cl.CountryCode) = 1;",
        "final_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(DISTINCT cl.CountryCode) = 1;",
        "input_tokens": 1542,
        "output_tokens": 294,
        "time": 8.250957250000283,
        "question": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM city c\nJOIN countrylanguage cl ON c.CountryCode = cl.CountryCode\nWHERE cl.Language = 'English'\nORDER BY c.Population DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Name FROM city c JOIN countrylanguage cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "input_tokens": 1587,
        "output_tokens": 326,
        "time": 10.534474415999284,
        "question": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT city.Name\nFROM city\nJOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode\nJOIN country ON city.CountryCode = country.Code\nWHERE countrylanguage.Language = 'English'\nORDER BY city.Population DESC\nLIMIT 1;",
        "final_sql": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode JOIN country ON city.CountryCode = country.Code WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;",
        "input_tokens": 1595,
        "output_tokens": 346,
        "time": 10.404668708999452,
        "question": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, c.Population, c.LifeExpectancy\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.SurfaceArea DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1537,
        "output_tokens": 287,
        "time": 7.729429541999707,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, c.Population, c.LifeExpectancy\nFROM country c\nWHERE c.Continent = 'Asia'\nORDER BY c.SurfaceArea DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC;",
        "input_tokens": 1520,
        "output_tokens": 254,
        "time": 7.03479679100019,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' AND IsOfficial = 'T'\n);",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' );",
        "input_tokens": 1596,
        "output_tokens": 322,
        "time": 9.076484125000206,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' \n    AND IsOfficial = 'T'\n);",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );",
        "input_tokens": 1591,
        "output_tokens": 320,
        "time": 9.696526666999489,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT SUM(Population) \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English'\n);",
        "final_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language <> 'English' );",
        "input_tokens": 1518,
        "output_tokens": 264,
        "time": 8.259386790999997,
        "question": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT SUM(Population) \nFROM country \nWHERE Code NOT IN (\n    SELECT CountryCode \n    FROM countrylanguage \n    WHERE Language = 'English' \n    AND IsOfficial = 'T'\n);",
        "final_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );",
        "input_tokens": 1599,
        "output_tokens": 333,
        "time": 9.38430949999929,
        "question": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.HeadOfState = 'Beatrix'\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';",
        "input_tokens": 1446,
        "output_tokens": 218,
        "time": 6.821714458001225,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT cl.Language\nFROM countrylanguage cl\nJOIN country c ON cl.CountryCode = c.Code\nWHERE c.HeadOfState = 'Beatrix'\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT cl.Language FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';",
        "input_tokens": 1454,
        "output_tokens": 226,
        "time": 6.6467322499993315,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < 1930\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
        "input_tokens": 1577,
        "output_tokens": 314,
        "time": 9.385638540999935,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalDistinctLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE c.IndepYear < 1930\nAND cl.IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(DISTINCT cl.Language) AS TotalDistinctLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';",
        "input_tokens": 1622,
        "output_tokens": 338,
        "time": 9.110885415999292,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nWHERE c1.SurfaceArea > (\n    SELECT MAX(c2.SurfaceArea)\n    FROM country c2\n    WHERE c2.Continent = 'Europe'\n)",
        "final_sql": "SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (   SELECT MAX(c2.SurfaceArea)   FROM country c2   WHERE c2.Continent = 'Europe' )",
        "input_tokens": 1472,
        "output_tokens": 241,
        "time": 7.6208602499991684,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nWHERE c1.SurfaceArea > (\n    SELECT MAX(c2.SurfaceArea)\n    FROM country c2\n    WHERE c2.Continent = 'Europe'\n)",
        "final_sql": "SELECT c1.Name FROM country c1 WHERE c1.SurfaceArea > (   SELECT MAX(c2.SurfaceArea)   FROM country c2   WHERE c2.Continent = 'Europe' )",
        "input_tokens": 1419,
        "output_tokens": 208,
        "time": 7.07864999999947,
        "question": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nJOIN country c2 ON c1.Continent = 'Africa' AND c2.Continent = 'Asia'\nWHERE c1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "final_sql": "SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Africa' AND c2.Continent = 'Asia' WHERE c1.Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "input_tokens": 1538,
        "output_tokens": 288,
        "time": 8.616757082998447,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nWHERE c1.Continent = 'Africa'\nAND c1.Population < (SELECT MIN(c2.Population)\n                     FROM country c2\n                     WHERE c2.Continent = 'Asia')",
        "final_sql": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population)           FROM country c2           WHERE c2.Continent = 'Asia')",
        "input_tokens": 1535,
        "output_tokens": 287,
        "time": 8.258184792000975,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nJOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa'\nWHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "final_sql": "SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa' WHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "input_tokens": 1532,
        "output_tokens": 288,
        "time": 7.9568913750008505,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT c1.Name\nFROM country c1\nJOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa'\nWHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "final_sql": "SELECT c1.Name FROM country c1 JOIN country c2 ON c1.Continent = 'Asia' AND c2.Continent = 'Africa' WHERE c1.Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "input_tokens": 1541,
        "output_tokens": 288,
        "time": 9.384005207999508,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT DISTINCT c.\"Code\"\nFROM \"country\" c\nWHERE c.\"Code\" NOT IN (\n    SELECT cl.\"CountryCode\"\n    FROM \"countrylanguage\" cl\n    WHERE cl.\"Language\" = 'English'\n);",
        "final_sql": "SELECT DISTINCT c.\"Code\" FROM \"country\" c WHERE c.\"Code\" NOT IN (   SELECT cl.\"CountryCode\"   FROM \"countrylanguage\" cl   WHERE cl.\"Language\" = 'English' );",
        "input_tokens": 1511,
        "output_tokens": 273,
        "time": 8.567539458999818,
        "question": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.\"Code\"\nFROM \"country\" c\nLEFT JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\"\nWHERE cl.\"Language\" <> 'English' OR cl.\"Language\" IS NULL;",
        "final_sql": "SELECT DISTINCT c.\"Code\" FROM \"country\" c LEFT JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\" WHERE cl.\"Language\" <> 'English' OR cl.\"Language\" IS NULL;",
        "input_tokens": 1479,
        "output_tokens": 265,
        "time": 8.673842500000319,
        "question": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT DISTINCT c.\"Code\"\nFROM \"country\" c\nJOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\"\nWHERE cl.\"Language\" <> 'English';",
        "final_sql": "SELECT DISTINCT c.\"Code\" FROM \"country\" c JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\" WHERE cl.\"Language\" <> 'English';",
        "input_tokens": 1534,
        "output_tokens": 303,
        "time": 7.427465999999185,
        "question": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT DISTINCT cl.\"CountryCode\"\nFROM \"countrylanguage\" cl\nWHERE cl.\"Language\" <> 'English';",
        "final_sql": "SELECT DISTINCT cl.\"CountryCode\" FROM \"countrylanguage\" cl WHERE cl.\"Language\" <> 'English';",
        "input_tokens": 1357,
        "output_tokens": 144,
        "time": 4.8888865419994545,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT c.\"Code\"\nFROM \"country\" c\nJOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\"\nWHERE cl.\"Language\" != 'English' AND c.\"GovernmentForm\" != 'Republic';",
        "final_sql": "SELECT c.\"Code\" FROM \"country\" c JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\" WHERE cl.\"Language\" != 'English' AND c.\"GovernmentForm\" != 'Republic';",
        "input_tokens": 1510,
        "output_tokens": 267,
        "time": 7.780699917000675,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT c.\"Code\"\nFROM \"country\" c\nLEFT JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\"\nWHERE cl.\"Language\" != 'English'\nAND c.\"GovernmentForm\" != 'Republic'",
        "final_sql": "SELECT c.\"Code\" FROM \"country\" c LEFT JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\" WHERE cl.\"Language\" != 'English' AND c.\"GovernmentForm\" != 'Republic'",
        "input_tokens": 1599,
        "output_tokens": 351,
        "time": 10.99180187499951,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T';",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T';",
        "input_tokens": 1612,
        "output_tokens": 347,
        "time": 9.593564500000866,
        "question": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T'\nGROUP BY city.Name;",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial <> 'T';",
        "input_tokens": 1658,
        "output_tokens": 368,
        "time": 10.25083049999921,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT DISTINCT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';",
        "final_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';",
        "input_tokens": 1650,
        "output_tokens": 372,
        "time": 11.025762249999389,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "gold_query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
    },
    {
        "baseline_sql": "SELECT DISTINCT city.Name\nFROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';",
        "final_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T';",
        "input_tokens": 1701,
        "output_tokens": 415,
        "time": 12.125120540998978,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea\nFROM country c\nWHERE c.Population = (SELECT MIN(Population) FROM country);",
        "final_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c WHERE c.Population = (SELECT MIN(Population) FROM country);",
        "input_tokens": 1384,
        "output_tokens": 171,
        "time": 5.931690792000154,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea\nFROM country c\nWHERE c.Population = (SELECT MIN(Population) FROM country);",
        "final_sql": "SELECT c.Name, c.IndepYear, c.SurfaceArea FROM country c ORDER BY c.Population ASC LIMIT 1;",
        "input_tokens": 1387,
        "output_tokens": 167,
        "time": 6.237172625000312,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Population, c.Name, c.HeadOfState\nFROM country c\nWHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "final_sql": "SELECT c.Population, c.Name, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "input_tokens": 1325,
        "output_tokens": 131,
        "time": 5.163595874999373,
        "question": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, c.Population, c.HeadOfState\nFROM country c\nWHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "final_sql": "SELECT c.Name, c.Population, c.HeadOfState FROM country c WHERE c.SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "input_tokens": 1395,
        "output_tokens": 177,
        "time": 6.212543917001312,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3;",
        "final_sql": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;",
        "input_tokens": 1571,
        "output_tokens": 297,
        "time": 9.081926666998697,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) > 2;",
        "final_sql": "SELECT c.Name, COUNT(cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) > 2;",
        "input_tokens": 1589,
        "output_tokens": 305,
        "time": 9.49054624999917,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT District, COUNT(*) AS NumCities\nFROM city\nWHERE Population > (SELECT AVG(Population) FROM city)\nGROUP BY District;",
        "final_sql": "SELECT District, COUNT(*) AS NumCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;",
        "input_tokens": 1421,
        "output_tokens": 196,
        "time": 6.588545708000311,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT district, COUNT(*) AS num_cities\nFROM city\nWHERE population > (SELECT AVG(population) FROM city)\nGROUP BY district;",
        "final_sql": "SELECT COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city);",
        "input_tokens": 1456,
        "output_tokens": 210,
        "time": 7.0694295419998525,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.GovernmentForm IN (\n    SELECT c2.GovernmentForm\n    FROM country c2\n    WHERE c2.LifeExpectancy > 72\n    GROUP BY c2.GovernmentForm\n)\nGROUP BY c.GovernmentForm;",
        "final_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.GovernmentForm IN (   SELECT c2.GovernmentForm   FROM country c2   WHERE c2.LifeExpectancy > 72   GROUP BY c2.GovernmentForm ) GROUP BY c.GovernmentForm;",
        "input_tokens": 1625,
        "output_tokens": 342,
        "time": 9.999495499998375,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT governmentform, SUM(population) AS total_population\nFROM country\nWHERE lifeexpectancy > 72\nGROUP BY governmentform;",
        "final_sql": "SELECT GovernmentForm, SUM(Population) AS total_population FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;",
        "input_tokens": 1410,
        "output_tokens": 164,
        "time": 5.787803541001267,
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation\nFROM country c\nWHERE c.LifeExpectancy < 72\nGROUP BY c.Continent;",
        "final_sql": "SELECT c.Continent, AVG(c.LifeExpectancy) AS AverageLifeExpectancy, SUM(c.Population) AS TotalPopulation FROM country c WHERE c.LifeExpectancy < 72 GROUP BY c.Continent;",
        "input_tokens": 1550,
        "output_tokens": 291,
        "time": 8.466935874999763,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy\nFROM country c\nWHERE c.Continent IN (\n    SELECT c1.Continent\n    FROM country c1\n    GROUP BY c1.Continent\n    HAVING AVG(c1.LifeExpectancy) < 72\n)\nGROUP BY c.Continent;",
        "final_sql": "SELECT c.Continent, SUM(c.Population) AS TotalPopulation, AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c WHERE c.Continent IN (   SELECT c1.Continent   FROM country c1   GROUP BY c1.Continent   HAVING AVG(c1.LifeExpectancy) < 72 ) GROUP BY c.Continent;",
        "input_tokens": 1598,
        "output_tokens": 316,
        "time": 9.499943791999613,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 5;",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1386,
        "output_tokens": 165,
        "time": 5.902447832999314,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea\nFROM country\nORDER BY SurfaceArea DESC\nLIMIT 5;",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1376,
        "output_tokens": 164,
        "time": 5.612505249999231,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nORDER BY Population DESC\nLIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "input_tokens": 1387,
        "output_tokens": 174,
        "time": 6.824520874999507,
        "question": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nORDER BY Population DESC\nLIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "input_tokens": 1397,
        "output_tokens": 182,
        "time": 7.186721792000753,
        "question": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nORDER BY Population ASC\nLIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
        "input_tokens": 1350,
        "output_tokens": 143,
        "time": 4.747346000000107,
        "question": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nORDER BY Population\nLIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;",
        "input_tokens": 1339,
        "output_tokens": 136,
        "time": 4.243008165998617,
        "question": "Return the names of the 3 countries with the fewest people.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
        "final_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1250,
        "output_tokens": 86,
        "time": 3.140697208000347,
        "question": "how many countries are in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
        "final_sql": "SELECT COUNT(*) FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1254,
        "output_tokens": 87,
        "time": 3.7860436660012056,
        "question": "Count the number of countries in Asia.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nWHERE Continent = 'Europe' AND Population = 80000;",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "input_tokens": 1455,
        "output_tokens": 197,
        "time": 6.590737041999091,
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM country\nWHERE Continent = 'Europe' AND Population = 80000;",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "input_tokens": 1450,
        "output_tokens": 203,
        "time": 6.042868042000919,
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_area\nFROM country c\nWHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;",
        "final_sql": "SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;",
        "input_tokens": 1415,
        "output_tokens": 179,
        "time": 6.280317250000735,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_surface_area\nFROM country c\nWHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;",
        "final_sql": "SELECT SUM(c.Population) AS total_population, AVG(c.SurfaceArea) AS average_surface_area FROM country c WHERE c.Continent = 'North America' AND c.SurfaceArea > 3000;",
        "input_tokens": 1447,
        "output_tokens": 202,
        "time": 6.418422374999864,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT Name\nFROM city\nWHERE Population BETWEEN 160000 AND 900000;",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1378,
        "output_tokens": 160,
        "time": 6.211960417000228,
        "question": "What are the cities whose population is between 160000 and 900000?",
        "db_id": "world_1",
        "gold_query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "baseline_sql": "SELECT Name\nFROM city\nWHERE Population BETWEEN 160000 AND 900000;",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1354,
        "output_tokens": 138,
        "time": 5.3966755000001285,
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "db_id": "world_1",
        "gold_query": "select name from city where population between 160000 and 900000"
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nGROUP BY Language\nHAVING COUNT(DISTINCT CountryCode) = (\n    SELECT MAX(country_count)\n    FROM (\n        SELECT COUNT(DISTINCT CountryCode) AS country_count\n        FROM countrylanguage\n        GROUP BY Language\n    )\n);",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(country_count)   FROM (     SELECT COUNT(DISTINCT CountryCode) AS country_count     FROM countrylanguage     GROUP BY Language   ) );",
        "input_tokens": 1435,
        "output_tokens": 235,
        "time": 7.465041499999643,
        "question": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nGROUP BY Language\nHAVING COUNT(DISTINCT CountryCode) = (\n    SELECT MAX(country_count)\n    FROM (\n        SELECT COUNT(DISTINCT CountryCode) AS country_count\n        FROM countrylanguage\n        GROUP BY Language\n    )\n);",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(country_count)   FROM (     SELECT COUNT(DISTINCT CountryCode) AS country_count     FROM countrylanguage     GROUP BY Language   ) );",
        "input_tokens": 1402,
        "output_tokens": 213,
        "time": 6.802517792000799,
        "question": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, cl.Language\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nWHERE cl.Percentage = (\n    SELECT MAX(Percentage)\n    FROM countrylanguage\n    WHERE CountryCode = c.Code\n)\nORDER BY c.Name;",
        "final_sql": "SELECT c.Name, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = c.Code ) GROUP BY c.Name ORDER BY c.Name;",
        "input_tokens": 2104,
        "output_tokens": 713,
        "time": 19.320687583000108,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT c.\"Code\", cl.\"Language\"\nFROM \"country\" c\nJOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\"\nWHERE cl.\"Percentage\" = (\n    SELECT MAX(\"Percentage\")\n    FROM \"countrylanguage\"\n    WHERE \"CountryCode\" = c.\"Code\"\n)\nORDER BY c.\"Code\";",
        "final_sql": "SELECT c.\"Code\", cl.\"Language\" FROM \"country\" c JOIN \"countrylanguage\" cl ON c.\"Code\" = cl.\"CountryCode\" WHERE cl.\"Percentage\" = (   SELECT MAX(\"Percentage\")   FROM \"countrylanguage\"   WHERE \"CountryCode\" = c.\"Code\" ) ORDER BY c.\"Code\";",
        "input_tokens": 1629,
        "output_tokens": 343,
        "time": 10.73706145899996,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND Percentage = (\n    SELECT MAX(Percentage) \n    FROM countrylanguage \n    WHERE Language = 'Spanish'\n);",
        "final_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE Language = 'Spanish' );",
        "input_tokens": 1451,
        "output_tokens": 218,
        "time": 7.7216884999998,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM countrylanguage \nWHERE Language = 'Spanish' AND IsOfficial = 'T';",
        "final_sql": "SELECT COUNT(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T';",
        "input_tokens": 1418,
        "output_tokens": 197,
        "time": 7.0393524169994635,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT cl.CountryCode\nFROM countrylanguage cl\nWHERE cl.Language = 'Spanish'\nORDER BY cl.Percentage DESC\nLIMIT 1;",
        "final_sql": "SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC LIMIT 1;",
        "input_tokens": 1421,
        "output_tokens": 194,
        "time": 5.930731000000378,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT cl.CountryCode\nFROM countrylanguage cl\nWHERE cl.Language = 'Spanish' AND cl.Percentage > 50;",
        "final_sql": "SELECT cl.CountryCode FROM countrylanguage cl WHERE cl.Language = 'Spanish' AND cl.Percentage > 50;",
        "input_tokens": 1503,
        "output_tokens": 254,
        "time": 8.172795041000427,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM conductor;",
        "final_sql": "SELECT COUNT(*) FROM conductor;",
        "input_tokens": 1309,
        "output_tokens": 70,
        "time": 3.5774364579992834,
        "question": "How many conductors are there?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM conductor;",
        "final_sql": "SELECT COUNT(*) FROM conductor;",
        "input_tokens": 1329,
        "output_tokens": 81,
        "time": 3.895491958999628,
        "question": "Count the number of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nORDER BY Age ASC;",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age ASC;",
        "input_tokens": 1408,
        "output_tokens": 129,
        "time": 5.231473374999041,
        "question": "List the names of conductors in ascending order of age.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nORDER BY Age;",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age;",
        "input_tokens": 1465,
        "output_tokens": 173,
        "time": 6.116953124999782,
        "question": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nWHERE Nationality <> \"USA\";",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality <> \"USA\";",
        "input_tokens": 1407,
        "output_tokens": 122,
        "time": 4.672400208999534,
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nWHERE Nationality <> 'USA';",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality <> 'USA';",
        "input_tokens": 1400,
        "output_tokens": 118,
        "time": 4.890684207999584,
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT o.Record_Company\nFROM orchestra o\nORDER BY o.Year_of_Founded DESC;",
        "final_sql": "SELECT o.Record_Company FROM orchestra o ORDER BY o.Year_of_Founded DESC;",
        "input_tokens": 1533,
        "output_tokens": 205,
        "time": 6.8272240000005695,
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT Orchestra.Record_Company\nFROM orchestra\nORDER BY Orchestra.Year_of_Founded DESC;",
        "final_sql": "SELECT Orchestra.Record_Company FROM orchestra ORDER BY Orchestra.Year_of_Founded DESC;",
        "input_tokens": 1554,
        "output_tokens": 217,
        "time": 7.33418787499977,
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT AVG(Attendance) FROM show;",
        "final_sql": "SELECT AVG(Attendance) FROM show;",
        "input_tokens": 1274,
        "output_tokens": 43,
        "time": 3.35020650000115,
        "question": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT AVG(Attendance) FROM show;",
        "final_sql": "SELECT AVG(Attendance) FROM show;",
        "input_tokens": 1274,
        "output_tokens": 43,
        "time": 3.468282125000769,
        "question": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT MAX(p.Share), MIN(p.Share)\nFROM performance p\nWHERE p.Type <> \"Live final\";",
        "final_sql": "SELECT MAX(p.Share), MIN(p.Share) FROM performance p WHERE p.Type <> \"Live final\";",
        "input_tokens": 1417,
        "output_tokens": 132,
        "time": 5.064572582999972,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT MAX(p.Share), MIN(p.Share)\nFROM performance p\nWHERE p.Type <> 'Live final';",
        "final_sql": "SELECT MAX(p.Share), MIN(p.Share) FROM performance p WHERE p.Type <> 'Live final';",
        "input_tokens": 1423,
        "output_tokens": 134,
        "time": 5.103333040999132,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities\nFROM conductor;",
        "final_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor;",
        "input_tokens": 1292,
        "output_tokens": 57,
        "time": 2.814696333000029,
        "question": "How many different nationalities do conductors have?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities\nFROM conductor;",
        "final_sql": "SELECT COUNT(DISTINCT Nationality) AS Num_Nationalities FROM conductor;",
        "input_tokens": 1352,
        "output_tokens": 98,
        "time": 4.1691137910002,
        "question": "Count the number of different nationalities of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;",
        "input_tokens": 1437,
        "output_tokens": 148,
        "time": 5.4913320830000885,
        "question": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM conductor\nORDER BY Year_of_Work DESC;",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;",
        "input_tokens": 1428,
        "output_tokens": 129,
        "time": 4.982551750001221,
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nWHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "final_sql": "SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "input_tokens": 1502,
        "output_tokens": 199,
        "time": 7.644966583000496,
        "question": "List the name of the conductor with the most years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nWHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "final_sql": "SELECT c.Name FROM conductor c WHERE c.Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor)",
        "input_tokens": 1503,
        "output_tokens": 201,
        "time": 7.233029250000982,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;",
        "final_sql": "SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;",
        "input_tokens": 1405,
        "output_tokens": 132,
        "time": 4.696145583999169,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;",
        "final_sql": "SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID;",
        "input_tokens": 1426,
        "output_tokens": 132,
        "time": 606.0872371250007,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
        "input_tokens": 1602,
        "output_tokens": 273,
        "time": 8.88623241699861,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Name\nHAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(DISTINCT o.Orchestra_ID) > 1;",
        "input_tokens": 1541,
        "output_tokens": 232,
        "time": 7.9356309169997985,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;",
        "input_tokens": 1626,
        "output_tokens": 287,
        "time": 8.970001457999388,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nGROUP BY c.Conductor_ID\nORDER BY COUNT(o.Orchestra_ID) DESC\nLIMIT 1;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;",
        "input_tokens": 1650,
        "output_tokens": 305,
        "time": 9.716474999999264,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
        "input_tokens": 1543,
        "output_tokens": 223,
        "time": 8.854153666999991,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT c.Name\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID\nWHERE o.Year_of_Founded > 2008;",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
        "input_tokens": 1551,
        "output_tokens": 226,
        "time": 8.363761083999634,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras\nFROM orchestra\nGROUP BY Record_Company;",
        "final_sql": "SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;",
        "input_tokens": 1528,
        "output_tokens": 216,
        "time": 9.694561833999614,
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras\nFROM orchestra\nGROUP BY Record_Company;",
        "final_sql": "SELECT Record_Company, COUNT(DISTINCT Orchestra_ID) AS Num_Of_Orchestras FROM orchestra GROUP BY Record_Company;",
        "input_tokens": 1394,
        "output_tokens": 133,
        "time": 5.29032449999977,
        "question": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format, COUNT(*) AS Count\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Count ASC;",
        "final_sql": "SELECT Major_Record_Format, COUNT(*) AS Count FROM orchestra GROUP BY Major_Record_Format ORDER BY Count ASC;",
        "input_tokens": 1439,
        "output_tokens": 153,
        "time": 5.8981116249997285,
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency\nFROM orchestra\nGROUP BY Major_Record_Format\nORDER BY Frequency DESC;",
        "final_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",
        "input_tokens": 1482,
        "output_tokens": 187,
        "time": 6.413764958000684,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nHAVING COUNT(Orchestra_ID) = (\n    SELECT MAX(CountOrchestra)\n    FROM (\n        SELECT COUNT(Orchestra_ID) AS CountOrchestra\n        FROM orchestra\n        GROUP BY Record_Company\n    )\n);",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (   SELECT MAX(CountOrchestra)   FROM (     SELECT COUNT(Orchestra_ID) AS CountOrchestra     FROM orchestra     GROUP BY Record_Company   ) );",
        "input_tokens": 1765,
        "output_tokens": 408,
        "time": 11.845322541999849,
        "question": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Record_Company\nFROM orchestra\nGROUP BY Record_Company\nHAVING COUNT(Orchestra_ID) = (\n    SELECT MAX(CountOrchestra)\n    FROM (\n        SELECT Record_Company, COUNT(Orchestra_ID) AS CountOrchestra\n        FROM orchestra\n        GROUP BY Record_Company\n    )\n);",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company HAVING COUNT(Orchestra_ID) = (   SELECT MAX(CountOrchestra)   FROM (     SELECT Record_Company, COUNT(Orchestra_ID) AS CountOrchestra     FROM orchestra     GROUP BY Record_Company   ) );",
        "input_tokens": 1546,
        "output_tokens": 255,
        "time": 8.16656783399958,
        "question": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1479,
        "output_tokens": 179,
        "time": 6.4119835830006195,
        "question": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT Orchestra\nFROM orchestra\nWHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1383,
        "output_tokens": 116,
        "time": 4.980812292000337,
        "question": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003\nAND o2.Year_of_Founded > 2003;",
        "final_sql": "SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;",
        "input_tokens": 1619,
        "output_tokens": 295,
        "time": 9.089019791999817,
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT DISTINCT o1.Record_Company\nFROM orchestra o1\nJOIN orchestra o2 ON o1.Record_Company = o2.Record_Company\nWHERE o1.Year_of_Founded < 2003\nAND o2.Year_of_Founded > 2003;",
        "final_sql": "SELECT DISTINCT o1.Record_Company FROM orchestra o1 JOIN orchestra o2 ON o1.Record_Company = o2.Record_Company WHERE o1.Year_of_Founded < 2003 AND o2.Year_of_Founded > 2003;",
        "input_tokens": 1649,
        "output_tokens": 296,
        "time": 9.224562999999762,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Orchestra_ID) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';",
        "final_sql": "SELECT COUNT(DISTINCT Orchestra_ID) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';",
        "input_tokens": 1532,
        "output_tokens": 213,
        "time": 7.919574292000107,
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM orchestra \nWHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';",
        "final_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';",
        "input_tokens": 1397,
        "output_tokens": 119,
        "time": 4.200573666999844,
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT o.\"Year_of_Founded\"\nFROM \"orchestra\" o\nJOIN \"performance\" p ON o.\"Orchestra_ID\" = p.\"Orchestra_ID\"\nGROUP BY o.\"Orchestra_ID\"\nHAVING COUNT(p.\"Performance_ID\") > 1;",
        "final_sql": "SELECT DISTINCT o.\"Year_of_Founded\" FROM \"orchestra\" o JOIN \"performance\" p ON o.\"Orchestra_ID\" = p.\"Orchestra_ID\" GROUP BY o.\"Orchestra_ID\" HAVING COUNT(p.\"Performance_ID\") > 1;",
        "input_tokens": 1659,
        "output_tokens": 317,
        "time": 9.901246958001138,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT o.\"Year_of_Founded\"\nFROM \"orchestra\" o\nJOIN \"performance\" p ON o.\"Orchestra_ID\" = p.\"Orchestra_ID\"\nGROUP BY o.\"Orchestra_ID\"\nHAVING COUNT(p.\"Performance_ID\") > 1;",
        "final_sql": "SELECT o.\"Year_of_Founded\" FROM \"orchestra\" o JOIN \"performance\" p ON o.\"Orchestra_ID\" = p.\"Orchestra_ID\" GROUP BY o.\"Orchestra_ID\" HAVING COUNT(p.\"Performance_ID\") > 1;",
        "input_tokens": 1648,
        "output_tokens": 303,
        "time": 10.819854999999734,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Highschooler;",
        "final_sql": "SELECT COUNT(*) FROM Highschooler;",
        "input_tokens": 1010,
        "output_tokens": 77,
        "time": 4.878502292000121,
        "question": "How many high schoolers are there?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Highschooler;",
        "final_sql": "SELECT COUNT(*) FROM Highschooler;",
        "input_tokens": 1012,
        "output_tokens": 80,
        "time": 3.611312375000125,
        "question": "Count the number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade\nFROM Highschooler;",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1025,
        "output_tokens": 82,
        "time": 4.110893291999673,
        "question": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade\nFROM Highschooler;",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1103,
        "output_tokens": 132,
        "time": 5.609626749999734,
        "question": "What are the names and grades for each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler;",
        "final_sql": "SELECT grade FROM Highschooler;",
        "input_tokens": 1019,
        "output_tokens": 79,
        "time": 3.632051250000586,
        "question": "Show all the grades of the high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT ID, grade FROM Highschooler;",
        "final_sql": "SELECT grade FROM Highschooler;",
        "input_tokens": 982,
        "output_tokens": 53,
        "time": 4.056951124999614,
        "question": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nWHERE name = 'Kyle';",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';",
        "input_tokens": 1045,
        "output_tokens": 110,
        "time": 5.12461649999932,
        "question": "What grade is Kyle in?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nWHERE name = 'Kyle';",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle';",
        "input_tokens": 1066,
        "output_tokens": 114,
        "time": 5.039684583998678,
        "question": "Return the grade for the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT name\nFROM Highschooler\nWHERE grade = 10;",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10;",
        "input_tokens": 1144,
        "output_tokens": 163,
        "time": 6.729403792000085,
        "question": "Show the names of all high schoolers in grade 10.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT name\nFROM Highschooler\nWHERE grade = 10;",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10;",
        "input_tokens": 1069,
        "output_tokens": 110,
        "time": 5.082177082998896,
        "question": "What are the names of all high schoolers in grade 10?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';",
        "input_tokens": 1070,
        "output_tokens": 116,
        "time": 4.670084958001098,
        "question": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT ID\nFROM Highschooler\nWHERE name = 'Kyle';",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle';",
        "input_tokens": 1078,
        "output_tokens": 133,
        "time": 5.60443404200123,
        "question": "What is Kyle's id?",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
        "final_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
        "input_tokens": 1044,
        "output_tokens": 91,
        "time": 4.163649832998999,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
        "final_sql": "SELECT COUNT(*) FROM Highschooler WHERE grade IN (9, 10);",
        "input_tokens": 1086,
        "output_tokens": 119,
        "time": 5.08737416599979,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT grade, COUNT(*) AS count\nFROM Highschooler\nGROUP BY grade;",
        "final_sql": "SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;",
        "input_tokens": 1081,
        "output_tokens": 126,
        "time": 4.884424333000425,
        "question": "Show the number of high schoolers for each grade.",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade, COUNT(*) AS count\nFROM Highschooler\nGROUP BY grade;",
        "final_sql": "SELECT grade, COUNT(*) AS count FROM Highschooler GROUP BY grade;",
        "input_tokens": 1144,
        "output_tokens": 172,
        "time": 6.214221791000455,
        "question": "How many high schoolers are in each grade?",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1218,
        "output_tokens": 223,
        "time": 7.345607332999862,
        "question": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) = (   SELECT MAX(count)   FROM (     SELECT grade, COUNT(*) as count     FROM Highschooler     GROUP BY grade   ) );",
        "input_tokens": 1144,
        "output_tokens": 195,
        "time": 7.533483166998849,
        "question": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(*) >= 4;",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
        "input_tokens": 1118,
        "output_tokens": 150,
        "time": 5.289600124999197,
        "question": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT grade\nFROM Highschooler\nGROUP BY grade\nHAVING COUNT(*) >= 4;",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;",
        "input_tokens": 1151,
        "output_tokens": 181,
        "time": 7.549385541999072,
        "question": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT f.student_id, COUNT(f.friend_id) AS num_friends\nFROM Friend f\nGROUP BY f.student_id;",
        "final_sql": "SELECT f.student_id, COUNT(f.friend_id) AS num_friends FROM Friend f GROUP BY f.student_id;",
        "input_tokens": 1204,
        "output_tokens": 208,
        "time": 7.546407499999987,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, COUNT(friend_id) AS num_friends\nFROM Friend\nGROUP BY student_id;",
        "final_sql": "SELECT student_id, COUNT(*) AS num_friends FROM Friend GROUP BY student_id;",
        "input_tokens": 1099,
        "output_tokens": 150,
        "time": 5.908115457999884,
        "question": "How many friends does each student have?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT h.name, COUNT(f.friend_id) AS num_friends\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID;",
        "final_sql": "SELECT h.name, COUNT(f.friend_id) AS num_friends FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY f.student_id;",
        "input_tokens": 1223,
        "output_tokens": 231,
        "time": 8.059030374999566,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nGROUP BY H.ID;",
        "final_sql": "SELECT H.name, COUNT(F.student_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID;",
        "input_tokens": 1245,
        "output_tokens": 236,
        "time": 8.569929041999785,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN (\n    SELECT student_id, COUNT(friend_id) AS num_friends\n    FROM Friend\n    GROUP BY student_id\n) f ON h.ID = f.student_id\nWHERE f.num_friends = (\n    SELECT MAX(num_friends)\n    FROM (\n        SELECT student_id, COUNT(friend_id) AS num_friends\n        FROM Friend\n        GROUP BY student_id\n    )\n);",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN (   SELECT student_id, COUNT(friend_id) AS num_friends   FROM Friend   GROUP BY student_id ) f ON h.ID = f.student_id WHERE f.num_friends = (   SELECT MAX(num_friends)   FROM (     SELECT student_id, COUNT(friend_id) AS num_friends     FROM Friend     GROUP BY student_id   ) );",
        "input_tokens": 1425,
        "output_tokens": 392,
        "time": 11.640648832999432,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT H.name\nFROM Highschooler H\nJOIN (\n    SELECT student_id, COUNT(friend_id) AS num_friends\n    FROM Friend\n    GROUP BY student_id\n    ORDER BY num_friends DESC\n    LIMIT 1\n) AS F ON H.ID = F.student_id;",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN (   SELECT student_id, COUNT(friend_id) AS num_friends   FROM Friend   GROUP BY student_id   ORDER BY num_friends DESC   LIMIT 1 ) AS F ON H.ID = F.student_id;",
        "input_tokens": 1392,
        "output_tokens": 357,
        "time": 10.334229457999754,
        "question": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID\nHAVING COUNT(f.friend_id) >= 3;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;",
        "input_tokens": 1239,
        "output_tokens": 237,
        "time": 6.800767957998687,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID\nHAVING COUNT(f.friend_id) >= 3;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID HAVING COUNT(f.friend_id) >= 3;",
        "input_tokens": 1242,
        "output_tokens": 237,
        "time": 7.336424208000608,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT H2.name\nFROM Highschooler H1, Highschooler H2, Friend F\nWHERE H1.name = 'Kyle'\nAND H1.ID = F.student_id\nAND H2.ID = F.friend_id;",
        "final_sql": "SELECT H2.name FROM Highschooler H1, Highschooler H2, Friend F WHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;",
        "input_tokens": 1266,
        "output_tokens": 265,
        "time": 8.46408558300027,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT H2.name\nFROM Highschooler H1, Highschooler H2, Friend F\nWHERE H1.name = 'Kyle'\nAND H1.ID = F.student_id\nAND H2.ID = F.friend_id;",
        "final_sql": "SELECT H2.name FROM Highschooler H1, Highschooler H2, Friend F WHERE H1.name = 'Kyle' AND H1.ID = F.student_id AND H2.ID = F.friend_id;",
        "input_tokens": 1263,
        "output_tokens": 267,
        "time": 8.574596791999284,
        "question": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "final_sql": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "input_tokens": 1176,
        "output_tokens": 197,
        "time": 7.184690916001273,
        "question": "How many friends does the high school student Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Friend \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "final_sql": "SELECT COUNT(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "input_tokens": 1135,
        "output_tokens": 173,
        "time": 6.002311666999958,
        "question": "Count the number of friends Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT h.ID\nFROM Highschooler h\nWHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "final_sql": "SELECT h.ID FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;",
        "input_tokens": 1137,
        "output_tokens": 171,
        "time": 6.3476370420012245,
        "question": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT h.ID\nFROM Highschooler h\nWHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "final_sql": "SELECT h.ID FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id WHERE f.student_id IS NULL;",
        "input_tokens": 1152,
        "output_tokens": 177,
        "time": 6.487241875000109,
        "question": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nWHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "final_sql": "SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "input_tokens": 1145,
        "output_tokens": 168,
        "time": 5.90628070800085,
        "question": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nWHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "final_sql": "SELECT h.name FROM Highschooler h WHERE h.ID NOT IN (SELECT f.student_id FROM Friend f)",
        "input_tokens": 1097,
        "output_tokens": 141,
        "time": 5.098502165999889,
        "question": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT DISTINCT f.student_id\nFROM Friend f\nJOIN Likes l ON f.student_id = l.student_id\nWHERE EXISTS (SELECT 1 FROM Friend WHERE student_id = f.student_id)\nAND EXISTS (SELECT 1 FROM Likes WHERE student_id = f.student_id);",
        "final_sql": "SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id;",
        "input_tokens": 1252,
        "output_tokens": 222,
        "time": 7.323347749999812,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT DISTINCT f.student_id\nFROM Friend f\nJOIN Likes l ON f.student_id = l.student_id;",
        "final_sql": "SELECT DISTINCT f.student_id FROM Friend f JOIN Likes l ON f.student_id = l.student_id;",
        "input_tokens": 1083,
        "output_tokens": 125,
        "time": 4.575010832999396,
        "question": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT DISTINCT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.student_id;",
        "final_sql": "SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;",
        "input_tokens": 1191,
        "output_tokens": 199,
        "time": 6.721712792001199,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT DISTINCT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Likes l ON h.ID = l.student_id;",
        "final_sql": "SELECT DISTINCT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id JOIN Likes l ON h.ID = l.student_id;",
        "input_tokens": 1188,
        "output_tokens": 199,
        "time": 8.680048749998605,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT student_id, COUNT(*) AS num_likes\nFROM Likes\nGROUP BY student_id;",
        "final_sql": "SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;",
        "input_tokens": 1122,
        "output_tokens": 157,
        "time": 6.210167042001558,
        "question": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, COUNT(*) AS num_likes\nFROM Likes\nGROUP BY student_id;",
        "final_sql": "SELECT student_id, COUNT(*) AS num_likes FROM Likes GROUP BY student_id;",
        "input_tokens": 1119,
        "output_tokens": 157,
        "time": 5.49569849999898,
        "question": "How many likes correspond to each student id?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(L.student_id) AS num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name;",
        "final_sql": "SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;",
        "input_tokens": 1330,
        "output_tokens": 292,
        "time": 9.186660540999583,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(L.liked_id) AS num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.name;",
        "final_sql": "SELECT H.name, COUNT(L.liked_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.name;",
        "input_tokens": 1255,
        "output_tokens": 243,
        "time": 7.849968040998647,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID\nORDER BY COUNT(L.liked_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;",
        "input_tokens": 1230,
        "output_tokens": 231,
        "time": 7.646480500003236,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT H.name\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID\nORDER BY COUNT(L.liked_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID ORDER BY COUNT(L.liked_id) DESC LIMIT 1;",
        "input_tokens": 1269,
        "output_tokens": 285,
        "time": 9.079892041998392,
        "question": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID\nHAVING COUNT(l.liked_id) >= 2;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) >= 2;",
        "input_tokens": 1243,
        "output_tokens": 245,
        "time": 8.362698458000523,
        "question": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Likes l ON h.ID = l.student_id\nGROUP BY h.ID\nHAVING COUNT(l.liked_id) >= 2;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name HAVING COUNT(l.liked_id) >= 2;",
        "input_tokens": 1325,
        "output_tokens": 302,
        "time": 9.190053541999077,
        "question": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID\nHAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;",
        "input_tokens": 1289,
        "output_tokens": 265,
        "time": 7.929833624999446,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nGROUP BY h.ID\nHAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.name HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2;",
        "input_tokens": 1338,
        "output_tokens": 294,
        "time": 9.214827625000908,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "final_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "input_tokens": 1122,
        "output_tokens": 167,
        "time": 6.316776542000298,
        "question": "How many likes does Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Likes \nWHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "final_sql": "SELECT COUNT(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle');",
        "input_tokens": 1169,
        "output_tokens": 183,
        "time": 6.928957290998369,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT AVG(grade) \nFROM Highschooler \nWHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1151,
        "output_tokens": 174,
        "time": 7.249299834002159,
        "question": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1156,
        "output_tokens": 180,
        "time": 6.312868665998394,
        "question": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
        "input_tokens": 1146,
        "output_tokens": 172,
        "time": 6.419797209000535,
        "question": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend);",
        "input_tokens": 1080,
        "output_tokens": 121,
        "time": 5.4945790830024634,
        "question": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT DISTINCT o.state\nFROM Owners o\nINNER JOIN Professionals p ON o.state = p.state;",
        "final_sql": "SELECT DISTINCT o.state FROM Owners o WHERE EXISTS (   SELECT 1   FROM Professionals p   WHERE o.state = p.state );",
        "input_tokens": 2302,
        "output_tokens": 167,
        "time": 6.423106457998074,
        "question": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT DISTINCT o.state\nFROM Owners o\nINNER JOIN Professionals p ON o.state = p.state;",
        "final_sql": "SELECT DISTINCT o.state FROM Owners o INNER JOIN Dogs d ON o.owner_id = d.owner_id INNER JOIN Professionals p ON d.professional_id = p.professional_id;",
        "input_tokens": 2302,
        "output_tokens": 173,
        "time": 6.212957667001319,
        "question": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2268,
        "output_tokens": 118,
        "time": 5.3246683750003285,
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2259,
        "output_tokens": 118,
        "time": 5.052182457999152,
        "question": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana'\nOR professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) > 2\n);",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 );",
        "input_tokens": 2483,
        "output_tokens": 251,
        "time": 8.365427000000636,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number\nFROM Professionals\nWHERE state = 'Indiana' OR professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) > 2\n);",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 );",
        "input_tokens": 2545,
        "output_tokens": 300,
        "time": 9.386470834000647,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT d.name\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY d.name\nHAVING SUM(t.cost_of_treatment) <= 1000;",
        "final_sql": "SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000;",
        "input_tokens": 2461,
        "output_tokens": 254,
        "time": 8.363994332998118,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT d.name\nFROM Dogs d\nJOIN Owners o ON d.owner_id = o.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nWHERE t.cost_of_treatment <= 1000;",
        "final_sql": "SELECT d.name FROM Dogs d JOIN Owners o ON d.owner_id = o.owner_id JOIN Treatments t ON d.dog_id = t.dog_id WHERE t.cost_of_treatment <= 1000;",
        "input_tokens": 2529,
        "output_tokens": 302,
        "time": 9.502717917002883,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT DISTINCT first_name\nFROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS P\nWHERE first_name NOT IN (\n    SELECT name FROM Dogs\n);",
        "final_sql": "SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS P WHERE first_name NOT IN (   SELECT name FROM Dogs );",
        "input_tokens": 2401,
        "output_tokens": 223,
        "time": 7.014752791001229,
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT first_name\nFROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS names\nWHERE first_name NOT IN (\n    SELECT name FROM Dogs\n);",
        "final_sql": "SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS names WHERE first_name NOT IN (   SELECT name FROM Dogs );",
        "input_tokens": 2412,
        "output_tokens": 224,
        "time": 7.7575897090027865,
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT P.professional_id, P.role_code, P.email_address\nFROM Professionals P\nWHERE P.professional_id NOT IN (\n    SELECT T.professional_id\n    FROM Treatments T\n)",
        "final_sql": "SELECT P.professional_id, P.role_code, P.email_address FROM Professionals P WHERE P.professional_id NOT IN (   SELECT T.professional_id   FROM Treatments T )",
        "input_tokens": 2334,
        "output_tokens": 167,
        "time": 6.3057822920018225,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, email_address\nFROM Professionals\nWHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2300,
        "output_tokens": 136,
        "time": 6.930743500000972,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nGROUP BY o.owner_id, o.first_name, o.last_name\nHAVING COUNT(d.dog_id) = (\n    SELECT MAX(dog_count)\n    FROM (\n        SELECT COUNT(dog_id) as dog_count\n        FROM Dogs\n        GROUP BY owner_id\n    )\n);",
        "final_sql": "SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id, o.first_name, o.last_name HAVING COUNT(d.dog_id) = (   SELECT MAX(dog_count)   FROM (     SELECT COUNT(dog_id) as dog_count     FROM Dogs     GROUP BY owner_id   ) );",
        "input_tokens": 2597,
        "output_tokens": 379,
        "time": 10.721917792001477,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT o.owner_id, o.first_name, o.last_name\nFROM Owners o\nWHERE o.owner_id = (\n    SELECT d.owner_id\n    FROM Dogs d\n    GROUP BY d.owner_id\n    ORDER BY COUNT(d.dog_id) DESC\n    LIMIT 1\n);",
        "final_sql": "SELECT o.owner_id, o.first_name, o.last_name FROM Owners o WHERE o.owner_id = (   SELECT d.owner_id   FROM Dogs d   GROUP BY d.owner_id   ORDER BY COUNT(d.dog_id) DESC   LIMIT 1 );",
        "input_tokens": 2510,
        "output_tokens": 309,
        "time": 10.206976792000205,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT P.professional_id, P.role_code, P.first_name\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nGROUP BY P.professional_id, P.role_code, P.first_name\nHAVING COUNT(T.treatment_id) >= 2;",
        "final_sql": "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.role_code, P.first_name HAVING COUNT(T.treatment_id) >= 2;",
        "input_tokens": 2492,
        "output_tokens": 291,
        "time": 9.502289457999723,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, first_name\nFROM Professionals\nWHERE professional_id IN (\n    SELECT professional_id\n    FROM Treatments\n    GROUP BY professional_id\n    HAVING COUNT(*) >= 2\n);",
        "final_sql": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) >= 2 );",
        "input_tokens": 2519,
        "output_tokens": 290,
        "time": 8.806527084001573,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;",
        "input_tokens": 2537,
        "output_tokens": 324,
        "time": 10.518485583001166,
        "question": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT b.breed_name\nFROM Breeds b\nJOIN Dogs d ON b.breed_code = d.breed_code\nGROUP BY b.breed_name\nORDER BY COUNT(d.dog_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;",
        "input_tokens": 2542,
        "output_tokens": 324,
        "time": 10.414229792000697,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t.owner_id, o.last_name\nFROM Treatments t\nJOIN Dogs d ON t.dog_id = d.dog_id\nJOIN Owners o ON d.owner_id = o.owner_id\nGROUP BY t.owner_id, o.last_name\nORDER BY COUNT(t.treatment_id) DESC\nLIMIT 1;",
        "final_sql": "SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;",
        "input_tokens": 2562,
        "output_tokens": 336,
        "time": 11.845905624999432,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT o.owner_id, o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.last_name\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;",
        "final_sql": "SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2584,
        "output_tokens": 347,
        "time": 10.623513415997877,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT treatment_type_description\nFROM Treatment_Types\nWHERE treatment_type_code = (\n    SELECT treatment_type_code\n    FROM Treatments\n    GROUP BY treatment_type_code\n    ORDER BY SUM(cost_of_treatment) ASC\n    LIMIT 1\n);",
        "final_sql": "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );",
        "input_tokens": 2435,
        "output_tokens": 256,
        "time": 8.769507332999638,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT treatment_type_description\nFROM Treatment_Types\nWHERE treatment_type_code = (\n    SELECT treatment_type_code\n    FROM Treatments\n    GROUP BY treatment_type_code\n    ORDER BY SUM(cost_of_treatment) ASC\n    LIMIT 1\n);",
        "final_sql": "SELECT treatment_type_description FROM Treatment_Types WHERE treatment_type_code = (   SELECT treatment_type_code   FROM Treatments   GROUP BY treatment_type_code   ORDER BY SUM(cost_of_treatment) ASC   LIMIT 1 );",
        "input_tokens": 2409,
        "output_tokens": 237,
        "time": 7.853278416001558,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT O.owner_id, O.zip_code\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Treatments T ON D.dog_id = T.dog_id\nGROUP BY O.owner_id, O.zip_code\nORDER BY SUM(T.cost_of_treatment) DESC\nLIMIT 1;",
        "final_sql": "SELECT O.owner_id, O.zip_code FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Treatments T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2695,
        "output_tokens": 423,
        "time": 12.256720458997734,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT o.owner_id, o.zip_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nJOIN Treatments t ON d.dog_id = t.dog_id\nGROUP BY o.owner_id, o.zip_code\nORDER BY SUM(t.cost_of_treatment) DESC\nLIMIT 1;",
        "final_sql": "SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2695,
        "output_tokens": 423,
        "time": 11.84533250000095,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT P.professional_id, P.cell_number\nFROM Professionals P\nINNER JOIN Treatments T ON P.professional_id = T.professional_id\nGROUP BY P.professional_id, P.cell_number\nHAVING COUNT(DISTINCT T.treatment_type_code) >= 2;",
        "final_sql": "SELECT P.professional_id, P.cell_number FROM Professionals P INNER JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;",
        "input_tokens": 2446,
        "output_tokens": 257,
        "time": 11.339608207999845,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT P.professional_id, P.cell_number\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nGROUP BY P.professional_id, P.cell_number\nHAVING COUNT(DISTINCT T.treatment_type_code) >= 2;",
        "final_sql": "SELECT P.professional_id, P.cell_number FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id GROUP BY P.professional_id, P.cell_number HAVING COUNT(DISTINCT T.treatment_type_code) >= 2;",
        "input_tokens": 2447,
        "output_tokens": 256,
        "time": 8.254768083999807,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT P.first_name, P.last_name\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nWHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "final_sql": "SELECT P.first_name, P.last_name FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "input_tokens": 2438,
        "output_tokens": 241,
        "time": 11.027548624999326,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT DISTINCT p.first_name, p.last_name\nFROM Professionals p\nJOIN Treatments t ON p.professional_id = t.professional_id\nWHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "final_sql": "SELECT DISTINCT p.first_name, p.last_name FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE t.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "input_tokens": 2471,
        "output_tokens": 260,
        "time": 9.385654749999958,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "final_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "input_tokens": 2311,
        "output_tokens": 146,
        "time": 5.701561500001844,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name\nFROM Treatments\nJOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "final_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "input_tokens": 2287,
        "output_tokens": 139,
        "time": 5.907824749996507,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT t.cost_of_treatment, tt.treatment_type_description\nFROM Treatments t\nJOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;",
        "final_sql": "SELECT t.cost_of_treatment, tt.treatment_type_description FROM Treatments t JOIN Treatment_Types tt ON t.treatment_type_code = tt.treatment_type_code;",
        "input_tokens": 2310,
        "output_tokens": 163,
        "time": 5.911627500001487,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description\nFROM Treatments\nJOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "final_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "input_tokens": 2331,
        "output_tokens": 180,
        "time": 7.038233457999013,
        "question": "What are the cost and treatment type description of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT O.first_name, O.last_name, S.size_description\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Sizes S ON D.size_code = S.size_code;",
        "final_sql": "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;",
        "input_tokens": 2399,
        "output_tokens": 213,
        "time": 7.749108416002855,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id\nJOIN Sizes ON Dogs.size_code = Sizes.size_code;",
        "final_sql": "SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;",
        "input_tokens": 2390,
        "output_tokens": 207,
        "time": 7.10907883300024,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "final_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "input_tokens": 2291,
        "output_tokens": 138,
        "time": 4.827308749998338,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT Owners.first_name, Dogs.name\nFROM Owners\nJOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "final_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;",
        "input_tokens": 2303,
        "output_tokens": 148,
        "time": 5.262231208998855,
        "question": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment\nFROM Dogs D\nJOIN Breeds B ON D.breed_code = B.breed_code\nJOIN Treatments T ON D.dog_id = T.dog_id\nWHERE B.breed_code = (\n    SELECT breed_code\n    FROM Breeds\n    ORDER BY breed_code DESC\n    LIMIT 1\n);",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_code = (   SELECT breed_code   FROM Breeds   ORDER BY breed_code DESC   LIMIT 1 );",
        "input_tokens": 2620,
        "output_tokens": 388,
        "time": 11.165352500000154,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment\nFROM Dogs D\nJOIN Breeds B ON D.breed_code = B.breed_code\nJOIN Treatments T ON D.dog_id = T.dog_id\nWHERE B.breed_name = (\n    SELECT breed_name\n    FROM Breeds\n    ORDER BY breed_code DESC\n    LIMIT 1\n);",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs D JOIN Breeds B ON D.breed_code = B.breed_code JOIN Treatments T ON D.dog_id = T.dog_id WHERE B.breed_name = (   SELECT breed_name   FROM Breeds   ORDER BY breed_code ASC   LIMIT 1 );",
        "input_tokens": 2538,
        "output_tokens": 334,
        "time": 9.883444374998362,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';",
        "final_sql": "SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';",
        "input_tokens": 2343,
        "output_tokens": 161,
        "time": 6.920698999998422,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nWHERE O.state = 'Virginia';",
        "final_sql": "SELECT O.first_name, D.name FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id;",
        "input_tokens": 2388,
        "output_tokens": 202,
        "time": 7.000201957998797,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;",
        "final_sql": "SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;",
        "input_tokens": 2311,
        "output_tokens": 146,
        "time": 6.003775166998821,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT d.date_arrived, d.date_departed\nFROM Dogs d\nJOIN Treatments t ON d.dog_id = t.dog_id;",
        "final_sql": "SELECT d.date_arrived, d.date_departed FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id;",
        "input_tokens": 2302,
        "output_tokens": 146,
        "time": 5.394060167000134,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.age = (SELECT MIN(age) FROM Dogs)",
        "final_sql": "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs)",
        "input_tokens": 2414,
        "output_tokens": 234,
        "time": 8.778576749999047,
        "question": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT o.last_name\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id\nWHERE d.age = (SELECT MIN(age) FROM Dogs)",
        "final_sql": "SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.dog_id = (SELECT dog_id FROM Dogs ORDER BY date_of_birth ASC LIMIT 1)",
        "input_tokens": 2373,
        "output_tokens": 214,
        "time": 7.436251500002982,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT email_address\nFROM Professionals\nWHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "input_tokens": 2319,
        "output_tokens": 146,
        "time": 5.089866875001462,
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT email_address\nFROM Professionals\nWHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';",
        "input_tokens": 2367,
        "output_tokens": 177,
        "time": 6.4172445410004,
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed\nFROM Dogs;",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs;",
        "input_tokens": 2197,
        "output_tokens": 67,
        "time": 3.549817625000287,
        "question": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed\nFROM Dogs;",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs;",
        "input_tokens": 2237,
        "output_tokens": 96,
        "time": 4.180848790998425,
        "question": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "final_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "input_tokens": 2185,
        "output_tokens": 71,
        "time": 3.7394506669988914,
        "question": "How many dogs went through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "final_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "input_tokens": 2235,
        "output_tokens": 99,
        "time": 4.516039000001911,
        "question": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;",
        "final_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments JOIN Dogs ON Treatments.dog_id = Dogs.dog_id;",
        "input_tokens": 2268,
        "output_tokens": 140,
        "time": 5.391873917000339,
        "question": "How many professionals have performed any treatment to dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;",
        "final_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments;",
        "input_tokens": 2245,
        "output_tokens": 105,
        "time": 4.4739784999983385,
        "question": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "input_tokens": 2297,
        "output_tokens": 124,
        "time": 4.677643625000201,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT role_code, street, city, state\nFROM Professionals\nWHERE city LIKE '%West%';",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "input_tokens": 2320,
        "output_tokens": 138,
        "time": 4.993476540999836,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%';",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';",
        "input_tokens": 2347,
        "output_tokens": 154,
        "time": 5.397338208000292,
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT first_name, last_name, email_address\nFROM Owners\nWHERE state LIKE '%North%';",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';",
        "input_tokens": 2322,
        "output_tokens": 137,
        "time": 5.599130334001529,
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
        "input_tokens": 2336,
        "output_tokens": 178,
        "time": 6.007246832999954,
        "question": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE age < (SELECT AVG(age) FROM Dogs);",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);",
        "input_tokens": 2561,
        "output_tokens": 325,
        "time": 9.287828124997759,
        "question": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "input_tokens": 2391,
        "output_tokens": 221,
        "time": 6.31282020800063,
        "question": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment\nFROM Treatments\nORDER BY date_of_treatment DESC\nLIMIT 1;",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "input_tokens": 2372,
        "output_tokens": 198,
        "time": 6.331004333002056,
        "question": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Dogs \nWHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
        "input_tokens": 2309,
        "output_tokens": 157,
        "time": 5.485377249999146,
        "question": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);",
        "input_tokens": 2314,
        "output_tokens": 155,
        "time": 5.3954272079972725,
        "question": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "gold_query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "final_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
        "input_tokens": 2418,
        "output_tokens": 228,
        "time": 8.051642457998241,
        "question": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) \nFROM Owners \nWHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL);",
        "final_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);",
        "input_tokens": 2427,
        "output_tokens": 224,
        "time": 7.035705333000806,
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT professional_id) \nFROM Professionals \nWHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);",
        "final_sql": "SELECT COUNT(DISTINCT professional_id) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);",
        "input_tokens": 2373,
        "output_tokens": 198,
        "time": 6.420765917002427,
        "question": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments);",
        "final_sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM Treatments) AND role_code = 'VET';",
        "input_tokens": 2305,
        "output_tokens": 156,
        "time": 5.653248124999664,
        "question": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT d.name, d.age, d.weight\nFROM Dogs d\nWHERE d.abandoned_yn = '1';",
        "final_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
        "input_tokens": 2391,
        "output_tokens": 168,
        "time": 5.545398041998851,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT d.name, d.age, d.weight\nFROM Dogs d\nWHERE d.abandoned_yn = '1';",
        "final_sql": "SELECT d.name, d.age, d.weight FROM Dogs d WHERE d.abandoned_yn = '1';",
        "input_tokens": 2338,
        "output_tokens": 129,
        "time": 4.5960290000002715,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs;",
        "final_sql": "SELECT AVG(age) FROM Dogs;",
        "input_tokens": 2154,
        "output_tokens": 43,
        "time": 2.8767097079980886,
        "question": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs;",
        "final_sql": "SELECT AVG(age) FROM Dogs;",
        "input_tokens": 2151,
        "output_tokens": 43,
        "time": 3.9956749160010077,
        "question": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT MAX(age) FROM Dogs;",
        "final_sql": "SELECT MAX(age) FROM Dogs;",
        "input_tokens": 2151,
        "output_tokens": 43,
        "time": 2.9556516660013585,
        "question": "What is the age of the oldest dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT MAX(age) FROM Dogs;",
        "final_sql": "SELECT MAX(age) FROM Dogs;",
        "input_tokens": 2151,
        "output_tokens": 43,
        "time": 2.6054619169990474,
        "question": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT charge_type, charge_amount\nFROM Charges;",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2190,
        "output_tokens": 59,
        "time": 3.6681196669997007,
        "question": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT charge_type, charge_amount\nFROM Charges;",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2267,
        "output_tokens": 124,
        "time": 5.074497249999695,
        "question": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "final_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "input_tokens": 2187,
        "output_tokens": 67,
        "time": 3.348062666998885,
        "question": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "final_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "input_tokens": 2215,
        "output_tokens": 82,
        "time": 4.084845125002175,
        "question": "What is the charge amount of the most expensive charge type?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone\nFROM Professionals;",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2249,
        "output_tokens": 103,
        "time": 3.9385354170008213,
        "question": "List the email, cell phone and home phone of all the professionals.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone\nFROM Professionals;",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2208,
        "output_tokens": 75,
        "time": 3.5555745839992596,
        "question": "What are the email, cell phone and home phone of each professional?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT b.breed_name, s.size_description\nFROM Breeds b, Sizes s;",
        "final_sql": "SELECT b.breed_name, s.size_description FROM Breeds b, Sizes s JOIN Dogs d ON b.breed_code = d.breed_code JOIN Sizes s ON s.size_code = d.size_code;",
        "input_tokens": 2395,
        "output_tokens": 273,
        "time": 8.060373791999154,
        "question": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code\nFROM Dogs;",
        "final_sql": "SELECT DISTINCT Dogs.breed_code, Dogs.size_code FROM Dogs;",
        "input_tokens": 2407,
        "output_tokens": 251,
        "time": 7.847146082996915,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "final_sql": "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "input_tokens": 2452,
        "output_tokens": 253,
        "time": 8.363284916998964,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "final_sql": "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "input_tokens": 2427,
        "output_tokens": 243,
        "time": 7.767320792001556,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer;",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 886,
        "output_tokens": 68,
        "time": 3.3278141249975306,
        "question": "How many singers are there?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer;",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 896,
        "output_tokens": 69,
        "time": 3.8450062079973577,
        "question": "What is the count of singers?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "input_tokens": 1028,
        "output_tokens": 156,
        "time": 5.916707125001267,
        "question": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions ASC;",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "input_tokens": 1073,
        "output_tokens": 186,
        "time": 6.722081708001497,
        "question": "What are the names of singers ordered by ascending net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 921,
        "output_tokens": 82,
        "time": 4.044675500001176,
        "question": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship\nFROM singer;",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 929,
        "output_tokens": 84,
        "time": 3.538393916001951,
        "question": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Citizenship <> 'France';",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship <> 'France';",
        "input_tokens": 1044,
        "output_tokens": 165,
        "time": 5.583537124999566,
        "question": "List the name of singers whose citizenship is not \"France\".",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Citizenship <> 'French';",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship <> 'French';",
        "input_tokens": 987,
        "output_tokens": 125,
        "time": 5.3937779999978375,
        "question": "What are the names of the singers who are not French citizens?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1015,
        "output_tokens": 140,
        "time": 5.333011874998192,
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1021,
        "output_tokens": 140,
        "time": 5.37028066700077,
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "final_sql": "SELECT Name FROM singer WHERE Net_Worth_Millions = (SELECT MAX(Net_Worth_Millions) FROM singer);",
        "input_tokens": 1006,
        "output_tokens": 146,
        "time": 5.395476583002164,
        "question": "What is the name of the singer with the largest net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nORDER BY Net_Worth_Millions DESC\nLIMIT 1;",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "input_tokens": 1084,
        "output_tokens": 192,
        "time": 6.53979425000216,
        "question": "What is the name of the singer who is worth the most?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) AS Num_Singers\nFROM singer\nGROUP BY Citizenship;",
        "final_sql": "SELECT Citizenship, COUNT(*) AS Num_Singers FROM singer GROUP BY Citizenship;",
        "input_tokens": 1160,
        "output_tokens": 250,
        "time": 8.550951707999047,
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) AS Singer_Count\nFROM singer\nGROUP BY Citizenship;",
        "final_sql": "SELECT Citizenship, COUNT(*) AS Singer_Count FROM singer GROUP BY Citizenship;",
        "input_tokens": 1040,
        "output_tokens": 165,
        "time": 5.922450666999794,
        "question": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) AS Count\nFROM singer\nGROUP BY Citizenship\nORDER BY Count DESC\nLIMIT 1;",
        "final_sql": "SELECT Citizenship, COUNT(*) AS Count FROM singer GROUP BY Citizenship ORDER BY Count DESC LIMIT 1;",
        "input_tokens": 1107,
        "output_tokens": 233,
        "time": 7.648182834000181,
        "question": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship\nFROM singer\nGROUP BY Citizenship\nORDER BY COUNT(*) DESC\nLIMIT 1;",
        "final_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1109,
        "output_tokens": 236,
        "time": 7.744563749998633,
        "question": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "gold_query": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT s.\"Citizenship\", MAX(s.\"Net_Worth_Millions\") AS \"Max_Net_Worth\"\nFROM \"singer\" s\nGROUP BY s.\"Citizenship\";",
        "final_sql": "SELECT \"Citizenship\", MAX(\"Net_Worth_Millions\") AS \"Max_Net_Worth\" FROM \"singer\" GROUP BY \"Citizenship\";",
        "input_tokens": 1071,
        "output_tokens": 189,
        "time": 7.339464666998538,
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth\nFROM singer\nGROUP BY Citizenship;",
        "final_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;",
        "input_tokens": 1022,
        "output_tokens": 161,
        "time": 5.904053958001896,
        "question": "For each citizenship, what is the maximum net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "input_tokens": 1003,
        "output_tokens": 150,
        "time": 5.291950958002417,
        "question": "Show titles of songs and names of singers.",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT song.Title, singer.Name\nFROM song\nJOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "input_tokens": 1003,
        "output_tokens": 150,
        "time": 5.703054375000647,
        "question": "What are the song titles and singer names?",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;",
        "final_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
        "input_tokens": 1117,
        "output_tokens": 213,
        "time": 8.262821541997255,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Sales > 300000;",
        "final_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
        "input_tokens": 1115,
        "output_tokens": 215,
        "time": 7.241804124998453,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(so.Song_ID) > 1;",
        "final_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name HAVING COUNT(so.Song_ID) > 1;",
        "input_tokens": 1089,
        "output_tokens": 216,
        "time": 7.160781582999334,
        "question": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name\nHAVING COUNT(so.Song_ID) > 1;",
        "final_sql": "SELECT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;",
        "input_tokens": 1122,
        "output_tokens": 236,
        "time": 9.759217083999829,
        "question": "What are the names of the singers that have more than one songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT s.Name, SUM(so.Sales) AS Total_Sales\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name;",
        "final_sql": "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
        "input_tokens": 1031,
        "output_tokens": 170,
        "time": 8.169181208002556,
        "question": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT s.Name, SUM(so.Sales) AS Total_Sales\nFROM singer s\nJOIN song so ON s.Singer_ID = so.Singer_ID\nGROUP BY s.Name;",
        "final_sql": "SELECT s.Name, SUM(so.Sales) AS Total_Sales FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID GROUP BY s.Name;",
        "input_tokens": 1053,
        "output_tokens": 185,
        "time": 6.106402208002692,
        "question": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT Name\nFROM singer\nWHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);",
        "input_tokens": 998,
        "output_tokens": 138,
        "time": 5.083994249998796,
        "question": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT s.Name\nFROM singer s\nLEFT JOIN song so ON s.Singer_ID = so.Singer_ID\nWHERE so.Singer_ID IS NULL;",
        "final_sql": "SELECT s.Name FROM singer s LEFT JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Singer_ID IS NULL;",
        "input_tokens": 1070,
        "output_tokens": 190,
        "time": 7.138157916000637,
        "question": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT s1.Citizenship\nFROM singer s1\nJOIN singer s2 ON s1.Citizenship = s2.Citizenship\nWHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;",
        "final_sql": "SELECT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;",
        "input_tokens": 1123,
        "output_tokens": 228,
        "time": 7.442612292001286,
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT DISTINCT s1.Citizenship\nFROM singer s1\nJOIN singer s2 ON s1.Citizenship = s2.Citizenship\nWHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;",
        "final_sql": "SELECT DISTINCT s1.Citizenship FROM singer s1 JOIN singer s2 ON s1.Citizenship = s2.Citizenship WHERE s1.Birth_Year < 1945 AND s2.Birth_Year > 1955;",
        "input_tokens": 1237,
        "output_tokens": 303,
        "time": 9.321982541998295,
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Other_Available_Features;",
        "final_sql": "SELECT COUNT(*) FROM Other_Available_Features;",
        "input_tokens": 1902,
        "output_tokens": 113,
        "time": 4.9524647500002175,
        "question": "How many available features are there in total?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT count(*) FROM Other_Available_Features"
    },
    {
        "baseline_sql": "SELECT feature_type_name\nFROM Ref_Feature_Types\nWHERE feature_type_code = (\n    SELECT feature_type_code\n    FROM Other_Available_Features\n    WHERE feature_name = 'AirCon'\n);",
        "final_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code = (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' );",
        "input_tokens": 2094,
        "output_tokens": 260,
        "time": 7.9512880420006695,
        "question": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    {
        "baseline_sql": "SELECT p.property_type_description\nFROM Ref_Property_Types p\nJOIN Properties prop ON p.property_type_code = prop.property_type_code\nWHERE prop.property_type_code = 'code';",
        "final_sql": "SELECT p.property_type_description FROM Ref_Property_Types p JOIN Properties prop ON p.property_type_code = prop.property_type_code WHERE prop.property_type_code = 'code';",
        "input_tokens": 1988,
        "output_tokens": 184,
        "time": 6.01080649999858,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
    },
    {
        "baseline_sql": "SELECT p.property_name\nFROM Properties p\nJOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code\nWHERE (pt.property_type_description = 'House' OR pt.property_type_description = 'Apartment') AND p.room_count > 1;",
        "final_sql": "SELECT p.property_name FROM Properties p JOIN Ref_Property_Types pt ON p.property_type_code = pt.property_type_code WHERE (pt.property_type_description = 'House' OR pt.property_type_description = 'Apartment') AND p.room_count > 1;",
        "input_tokens": 2166,
        "output_tokens": 306,
        "time": 8.542336875001638,
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    }
]