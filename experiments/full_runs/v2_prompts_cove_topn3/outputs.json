[
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT count(*) FROM singer;",
        "input_tokens": 1300,
        "output_tokens": 71,
        "time": 3.9272715830000005,
        "question": "How many singers do we have?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 1319,
        "output_tokens": 77,
        "time": 4.570836625,
        "question": "What is the total number of singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1485,
        "output_tokens": 114,
        "time": 4.556629375,
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1542,
        "output_tokens": 141,
        "time": 5.210689083000002,
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
        "final_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
        "input_tokens": 1519,
        "output_tokens": 171,
        "time": 6.1006381659999995,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = \"France\"",
        "final_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = \"France\"",
        "input_tokens": 1487,
        "output_tokens": 154,
        "time": 6.201535292000003,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "final_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "input_tokens": 1591,
        "output_tokens": 149,
        "time": 5.482669083000005,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "final_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "input_tokens": 1542,
        "output_tokens": 133,
        "time": 5.488596333999993,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1542,
        "output_tokens": 142,
        "time": 5.7050589999999985,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1453,
        "output_tokens": 115,
        "time": 5.1690439999999995,
        "question": "What are  the different countries with singers above age 20?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "final_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "input_tokens": 1590,
        "output_tokens": 231,
        "time": 7.488147291000004,
        "question": "Show all countries and the number of singers in each country.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "final_sql": "SELECT Country, COUNT(Name) FROM singer GROUP BY Country",
        "input_tokens": 1459,
        "output_tokens": 142,
        "time": 4.817373208999996,
        "question": "How many singers are from each country?",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "final_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "input_tokens": 1430,
        "output_tokens": 138,
        "time": 5.078798208999999,
        "question": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "final_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "input_tokens": 1579,
        "output_tokens": 140,
        "time": 5.135942291999996,
        "question": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1507,
        "output_tokens": 127,
        "time": 4.711302665999995,
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT location, name FROM station WHERE capacity BETWEEN 5000 AND 10000",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1539,
        "output_tokens": 97,
        "time": 4.1582043330000005,
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT max(Capacity), avg(Capacity) FROM stadium",
        "final_sql": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium;",
        "input_tokens": 1337,
        "output_tokens": 56,
        "time": 3.071285415999995,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select max(capacity), average from stadium"
    },
    {
        "baseline_sql": "SELECT avg(Capacity), max(Capacity) FROM stadium",
        "final_sql": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium;",
        "input_tokens": 1324,
        "output_tokens": 56,
        "time": 3.2986519579999936,
        "question": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "baseline_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium)",
        "input_tokens": 1452,
        "output_tokens": 116,
        "time": 4.872868374999996,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (SELECT Stadium_ID FROM (SELECT Stadium_ID, AVG(Average) AS avg_attendance FROM stadium GROUP BY Stadium_ID) AS subquery ORDER BY avg_attendance DESC LIMIT 1)",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID = (   SELECT Stadium_ID   FROM (     SELECT Stadium_ID, AVG(Average) AS avg_attendance     FROM stadium     GROUP BY Stadium_ID   ) AS subquery   ORDER BY avg_attendance DESC   LIMIT 1 )",
        "input_tokens": 1679,
        "output_tokens": 250,
        "time": 8.663678000000004,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "input_tokens": 1441,
        "output_tokens": 123,
        "time": 5.181935459000002,
        "question": "How many concerts are there in year 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "input_tokens": 1558,
        "output_tokens": 125,
        "time": 5.260610665999991,
        "question": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts\nFROM stadium\nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID\nGROUP BY stadium.Name",
        "final_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) AS num_concerts FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;",
        "input_tokens": 1793,
        "output_tokens": 301,
        "time": 9.299208625000006,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) \nFROM stadium \nLEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID \nGROUP BY stadium.Name;",
        "final_sql": "SELECT stadium.Name, COUNT(concert.concert_ID) FROM stadium LEFT JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;",
        "input_tokens": 1608,
        "output_tokens": 222,
        "time": 8.048503624999995,
        "question": "For each stadium, how many concerts play there?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= '2014'\nGROUP BY s.Name, s.Capacity\nHAVING COUNT(c.concert_ID) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT s.Name, s.Capacity, COUNT(c.concert_ID) AS concert_count\n        FROM stadium s\n        JOIN concert c ON s.Stadium_ID = c.Stadium_ID\n        WHERE c.Year >= '2014'\n        GROUP BY s.Name, s.Capacity\n    ) AS subquery\n)",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
        "input_tokens": 1836,
        "output_tokens": 346,
        "time": 10.811546916999987,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT name, capacity FROM stadium WHERE stadium_id IN (SELECT stadium_id FROM concert WHERE year > 2013) ORDER BY (SELECT COUNT(*) FROM concert WHERE stadium_id = stadium.stadium_id) DESC LIMIT 1",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Stadium_ID IN (   SELECT Stadium_ID   FROM concert   WHERE Year > 2013 )",
        "input_tokens": 1673,
        "output_tokens": 261,
        "time": 8.47227487500001,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1519,
        "output_tokens": 175,
        "time": 6.512989250000004,
        "question": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1522,
        "output_tokens": 164,
        "time": 6.104330916000009,
        "question": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "input_tokens": 1419,
        "output_tokens": 131,
        "time": 5.07917412499998,
        "question": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "input_tokens": 1465,
        "output_tokens": 131,
        "time": 4.976998750000007,
        "question": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "final_sql": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30;",
        "input_tokens": 1552,
        "output_tokens": 182,
        "time": 6.202276082999987,
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');",
        "input_tokens": 1625,
        "output_tokens": 213,
        "time": 7.125327667000022,
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014' OR Year IS NULL)",
        "input_tokens": 1672,
        "output_tokens": 224,
        "time": 7.330723167000002,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID) AS Singer_Count\nFROM concert AS C\nLEFT JOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID\nGROUP BY C.concert_ID, C.concert_Name, C.Theme",
        "final_sql": "SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID) AS Singer_Count FROM concert AS C LEFT JOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID GROUP BY C.concert_ID, C.concert_Name, C.Theme;",
        "input_tokens": 1810,
        "output_tokens": 394,
        "time": 10.500983040999984,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "baseline_sql": "SELECT concert_Name ,  Theme ,  COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID",
        "final_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;",
        "input_tokens": 1553,
        "output_tokens": 211,
        "time": 6.613402583999999,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
    },
    {
        "baseline_sql": "SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "final_sql": "SELECT s.Name, COUNT(c.concert_ID) FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID JOIN concert AS c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;",
        "input_tokens": 1667,
        "output_tokens": 258,
        "time": 7.230395291999997,
        "question": "List singer names and number of concerts for each singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts\nFROM singer\nLEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID\nGROUP BY singer.Name",
        "final_sql": "SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS num_concerts FROM singer LEFT JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1724,
        "output_tokens": 325,
        "time": 9.475629916000003,
        "question": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.Year = 2014",
        "final_sql": "SELECT singer.Name FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = 2014;",
        "input_tokens": 1814,
        "output_tokens": 322,
        "time": 9.993955666000005,
        "question": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT DISTINCT Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = \"2014\"",
        "final_sql": "SELECT DISTINCT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = \"2014\"",
        "input_tokens": 1734,
        "output_tokens": 285,
        "time": 8.261262749999986,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "final_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "input_tokens": 1582,
        "output_tokens": 116,
        "time": 4.869090207999989,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT Name, Country FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM singer_in_concert WHERE concert_ID IN (SELECT concert_ID FROM concert WHERE concert_ID IN (SELECT concert_ID FROM singer_in_concert WHERE Singer_ID IN (SELECT Singer_ID FROM singer WHERE Song_Name LIKE '%Hey%'))))",
        "final_sql": "SELECT Name, Country FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM singer_in_concert   WHERE concert_ID IN (     SELECT concert_ID     FROM concert     WHERE concert_ID IN (       SELECT concert_ID       FROM singer_in_concert       WHERE Singer_ID IN (         SELECT Singer_ID         FROM singer         WHERE Song_Name LIKE '%Hey%'       )     )   ) )",
        "input_tokens": 1817,
        "output_tokens": 330,
        "time": 8.517736875000026,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT t1.Name, t1.Location FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year = '2014' AND t1.Stadium_ID IN (SELECT t2.Stadium_ID FROM concert AS t2 WHERE t2.Year = '2015')",
        "final_sql": "SELECT t1.Name, t1.Location FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year = '2014' AND t1.Stadium_ID IN (SELECT t2.Stadium_ID FROM concert AS t2 WHERE t2.Year = '2015')",
        "input_tokens": 1795,
        "output_tokens": 307,
        "time": 9.136937541000009,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
        "final_sql": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
        "input_tokens": 1986,
        "output_tokens": 312,
        "time": 9.768654208999976,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT MAX(Capacity) FROM stadium))",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT MAX(Capacity)                    FROM stadium))",
        "input_tokens": 1654,
        "output_tokens": 269,
        "time": 8.092534875000013,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium WHERE Capacity = (SELECT max(Capacity) FROM stadium))",
        "final_sql": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID           FROM stadium           WHERE Capacity = (SELECT max(Highest)                    FROM stadium))",
        "input_tokens": 1635,
        "output_tokens": 265,
        "time": 8.04734879199998,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE weight > 10",
        "final_sql": "SELECT count(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1325,
        "output_tokens": 137,
        "time": 5.485706665999999,
        "question": "Find the number of pets whose weight is heavier than 10.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE weight > 10",
        "final_sql": "SELECT count(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1230,
        "output_tokens": 117,
        "time": 4.379221167000026,
        "question": "How many pets have a greater weight than 10?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age LIMIT 1",
        "final_sql": "SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1",
        "input_tokens": 1355,
        "output_tokens": 272,
        "time": 7.947226915999977,
        "question": "Find the weight of the youngest dog.",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog'",
        "final_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog'",
        "input_tokens": 1207,
        "output_tokens": 168,
        "time": 5.688545790999967,
        "question": "How much does the youngest dog weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(weight) ,  PetType FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT MAX(weight) , PetType FROM Pets GROUP BY PetType;",
        "input_tokens": 1290,
        "output_tokens": 165,
        "time": 6.004438500000049,
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, MAX(weight) FROM Pets GROUP BY PetType;",
        "input_tokens": 1140,
        "output_tokens": 91,
        "time": 4.562774499999989,
        "question": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20))",
        "final_sql": "SELECT COUNT(*) FROM Pets WHERE PetID IN (   SELECT PetID   FROM Has_Pet   WHERE StuID IN (     SELECT StuID     FROM Student     WHERE Age > 20   ) )",
        "input_tokens": 1654,
        "output_tokens": 370,
        "time": 10.71036320799999,
        "question": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.age  >  20",
        "final_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Age > 20;",
        "input_tokens": 1550,
        "output_tokens": 357,
        "time": 10.503334499999994,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"F\" AND T3.PetType = \"dog\"",
        "final_sql": "SELECT COUNT(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"F\" AND T3.PetType = \"dog\"",
        "input_tokens": 1630,
        "output_tokens": 378,
        "time": 10.549847709000005,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.Sex  =  \"Female\" AND T3.PetType  =  \"Dog\"",
        "final_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"Female\" AND T3.PetType = \"Dog\"",
        "input_tokens": 1570,
        "output_tokens": 386,
        "time": 11.26577391699999,
        "question": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT PetType) FROM Pets",
        "final_sql": "SELECT count(DISTINCT PetType) FROM Pets;",
        "input_tokens": 1071,
        "output_tokens": 71,
        "time": 4.081243665999978,
        "question": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT PetType) FROM Pets",
        "final_sql": "SELECT count(DISTINCT PetType) FROM Pets;",
        "input_tokens": 1076,
        "output_tokens": 69,
        "time": 4.153541417000042,
        "question": "How many different types of pet are there?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\"",
        "final_sql": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\"",
        "input_tokens": 1520,
        "output_tokens": 328,
        "time": 9.981884792000017,
        "question": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat' OR PetType = 'dog'))",
        "final_sql": "SELECT DISTINCT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'cat' OR PetType = 'dog'   ) )",
        "input_tokens": 1595,
        "output_tokens": 383,
        "time": 11.220452499999965,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT Fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\")) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Dog\"))",
        "final_sql": "SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"Cat\"   ) ) AND StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"Dog\"   ) )",
        "input_tokens": 1519,
        "output_tokens": 376,
        "time": 10.198594959000047,
        "question": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "gold_query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" AND T3.PetType = \"Dog\"",
        "final_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\" GROUP BY T1.Fname HAVING COUNT(DISTINCT T3.PetType) = 2;",
        "input_tokens": 1640,
        "output_tokens": 407,
        "time": 12.043413208999993,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT major, age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')",
        "final_sql": "SELECT Major, Age FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'Cat' )",
        "input_tokens": 1503,
        "output_tokens": 284,
        "time": 9.071114292000004,
        "question": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT S.Major, S.Age FROM Student AS S WHERE S.StuID NOT IN (SELECT HP.StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'Cat')",
        "final_sql": "SELECT S.Major, S.Age FROM Student AS S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet AS HP   JOIN Pets AS P ON HP.PetID = P.PetID   WHERE P.PetType = 'Cat' )",
        "input_tokens": 1517,
        "output_tokens": 304,
        "time": 9.498837458000025,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))",
        "final_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'Cat'   ) )",
        "input_tokens": 1368,
        "output_tokens": 238,
        "time": 7.534139666000044,
        "question": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')",
        "final_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'Cat' )",
        "input_tokens": 1354,
        "output_tokens": 235,
        "time": 7.944503708000013,
        "question": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT s.Fname, s.Age \nFROM Student s \nJOIN Has_Pet hp ON s.StuID = hp.StuID \nJOIN Pets p ON hp.PetID = p.PetID \nWHERE p.PetType = 'dog' \nAND s.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
        "final_sql": "SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'))",
        "input_tokens": 1560,
        "output_tokens": 383,
        "time": 12.656538041000033,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat')",
        "final_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (   SELECT T1.StuID   FROM Student AS T1   JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID   JOIN Pets AS T3 ON T2.PetID = T3.PetID   WHERE T3.PetType = 'cat' )",
        "input_tokens": 1771,
        "output_tokens": 516,
        "time": 13.985407916999975,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "final_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "input_tokens": 1249,
        "output_tokens": 128,
        "time": 4.769739165999965,
        "question": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1",
        "final_sql": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1;",
        "input_tokens": 1476,
        "output_tokens": 278,
        "time": 8.368787042000008,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "final_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;",
        "input_tokens": 1167,
        "output_tokens": 106,
        "time": 5.116491083000028,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "final_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;",
        "input_tokens": 1250,
        "output_tokens": 95,
        "time": 4.422073458999989,
        "question": "What is the id and weight of every pet who is older than 1?",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;",
        "input_tokens": 1298,
        "output_tokens": 148,
        "time": 5.885863875000041,
        "question": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT avg(pet_age), max(pet_age), PetType FROM Pets GROUP BY PetType",
        "final_sql": "SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType;",
        "input_tokens": 1216,
        "output_tokens": 150,
        "time": 5.3830780419999655,
        "question": "What is the average and maximum age for each pet type?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;",
        "input_tokens": 1245,
        "output_tokens": 134,
        "time": 4.876592125000002,
        "question": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "final_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "input_tokens": 1194,
        "output_tokens": 134,
        "time": 5.380766832999939,
        "question": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT s.fname, s.age FROM student s INNER JOIN has_pet hp ON s.StuID = hp.StuID",
        "final_sql": "SELECT s.Fname, s.Age FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID",
        "input_tokens": 1254,
        "output_tokens": 163,
        "time": 5.688710584000091,
        "question": "Find the first name and age of students who have a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "final_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "input_tokens": 1343,
        "output_tokens": 170,
        "time": 5.8997800420000885,
        "question": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT p.PetID FROM Pets AS p JOIN Has_Pet AS hp ON p.PetID = hp.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "final_sql": "SELECT p.PetID FROM Pets AS p JOIN Has_Pet AS hp ON p.PetID = hp.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "input_tokens": 1544,
        "output_tokens": 330,
        "time": 9.83586450000007,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'",
        "final_sql": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'",
        "input_tokens": 1336,
        "output_tokens": 216,
        "time": 7.138747500000022,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        "final_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        "input_tokens": 1640,
        "output_tokens": 351,
        "time": 10.300061166999967,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "baseline_sql": "SELECT T1.StuID, COUNT(*) FROM Has_Pet AS T1 GROUP BY T1.StuID",
        "final_sql": "SELECT T1.StuID, COUNT(T2.PetID) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID;",
        "input_tokens": 1373,
        "output_tokens": 211,
        "time": 6.917657125000005,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "db_id": "pets_1",
        "gold_query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "baseline_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "final_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "input_tokens": 1328,
        "output_tokens": 197,
        "time": 6.81925641600003,
        "question": "Find the first name and gender of student who have more than one pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "final_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "input_tokens": 1356,
        "output_tokens": 197,
        "time": 6.614475041999981,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\" AND pet_age = 3))",
        "final_sql": "SELECT LName FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"Cat\"     AND pet_age = 3   ) )",
        "input_tokens": 1548,
        "output_tokens": 344,
        "time": 10.301325417000044,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' AND p.pet_age = 3;",
        "final_sql": "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' AND p.pet_age = 3;",
        "input_tokens": 1567,
        "output_tokens": 314,
        "time": 9.411151500000074,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "final_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "input_tokens": 1479,
        "output_tokens": 224,
        "time": 7.365455459000032,
        "question": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "final_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "input_tokens": 1393,
        "output_tokens": 220,
        "time": 8.24724891599999,
        "question": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM continents",
        "final_sql": "SELECT count(*) FROM continents;",
        "input_tokens": 1476,
        "output_tokens": 77,
        "time": 3.7914597499999445,
        "question": "How many continents are there?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM continents",
        "final_sql": "SELECT COUNT(*) FROM continents;",
        "input_tokens": 1465,
        "output_tokens": 70,
        "time": 4.156556625000007,
        "question": "What is the number of continents?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "final_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId;",
        "input_tokens": 1876,
        "output_tokens": 232,
        "time": 7.8427577500000325,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) \nFROM continents \nJOIN countries ON continents.ContId = countries.Continent \nGROUP BY continents.ContId, continents.Continent",
        "final_sql": "SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;",
        "input_tokens": 1851,
        "output_tokens": 259,
        "time": 8.662772958000005,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countries",
        "final_sql": "SELECT count(*) FROM countries;",
        "input_tokens": 1480,
        "output_tokens": 61,
        "time": 604.242901292,
        "question": "How many countries are listed?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countries;",
        "final_sql": "SELECT count(*) FROM countries;",
        "input_tokens": 1643,
        "output_tokens": 178,
        "time": 7.939775041999837,
        "question": "How many countries exist?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT T1.FullName, T1.Id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "final_sql": "SELECT T1.FullName, T1.Id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "input_tokens": 1871,
        "output_tokens": 252,
        "time": 8.663310833999958,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
        "final_sql": "SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName;",
        "input_tokens": 1824,
        "output_tokens": 209,
        "time": 7.33205220800005,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data) LIMIT 1;",
        "final_sql": "SELECT \"Model\" FROM \"car_names\" JOIN \"cars_data\" ON \"car_names\".\"MakeId\" = \"cars_data\".\"Id\" ORDER BY \"Horsepower\" LIMIT 1;",
        "input_tokens": 1738,
        "output_tokens": 276,
        "time": 8.664102208000031,
        "question": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId ORDER BY T1.Horsepower ASC LIMIT 1",
        "final_sql": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId ORDER BY T1.Horsepower ASC LIMIT 1",
        "input_tokens": 1888,
        "output_tokens": 306,
        "time": 10.299008624999942,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model\nFROM cars_data\nWHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "final_sql": "SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Weight < (SELECT AVG(Weight) FROM cars_data)",
        "input_tokens": 1584,
        "output_tokens": 129,
        "time": 5.5196030419999715,
        "question": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT Model\nFROM cars_data\nWHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "final_sql": "SELECT Model FROM model_list WHERE ModelId IN (  SELECT Maker  FROM car_makers  WHERE Id IN (   SELECT MakeId   FROM car_names   WHERE Model IN (    SELECT Id    FROM cars_data    WHERE Weight < (SELECT AVG(Weight) FROM cars_data)   )  ) )",
        "input_tokens": 1683,
        "output_tokens": 216,
        "time": 7.301880125000025,
        "question": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "final_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "input_tokens": 2073,
        "output_tokens": 352,
        "time": 10.605494375000035,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list WHERE ModelId IN (SELECT MakeId FROM car_names WHERE ModelId IN (SELECT Id FROM cars_data WHERE Year = 1970)));",
        "final_sql": "SELECT DISTINCT Maker FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   WHERE ModelId IN (     SELECT MakeId     FROM car_names     WHERE ModelId IN (       SELECT Id       FROM cars_data       WHERE Year = 1970     )   ) );",
        "input_tokens": 1911,
        "output_tokens": 330,
        "time": 10.301046416999952,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT T1.Make, T2.ProductionTime FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)",
        "final_sql": "SELECT T1.Make, T2.Year AS ProductionTime FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)",
        "input_tokens": 1995,
        "output_tokens": 262,
        "time": 8.253639625000005,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT cm.Maker, cd.Year \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nJOIN car_names cn ON ml.ModelId = cn.Model \nJOIN cars_data cd ON cn.MakeId = cd.Id \nORDER BY cd.Year ASC \nLIMIT 1",
        "final_sql": "SELECT cm.Maker, cd.Year FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.Model JOIN cars_data cd ON cn.MakeId = cd.Id ORDER BY cd.Year ASC LIMIT 1",
        "input_tokens": 1871,
        "output_tokens": 333,
        "time": 10.095468624999967,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT DISTINCT Model FROM cars_data WHERE Year > 1980",
        "final_sql": "SELECT DISTINCT Model FROM model_list WHERE ModelId IN (SELECT Maker FROM car_makers WHERE Id IN (SELECT MakeId FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Year > 1980)))",
        "input_tokens": 1567,
        "output_tokens": 134,
        "time": 5.490396250000003,
        "question": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Model FROM cards WHERE Year > 1980",
        "final_sql": "SELECT DISTINCT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980;",
        "input_tokens": 1589,
        "output_tokens": 99,
        "time": 6.101638374999993,
        "question": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT C.Continent, COUNT(CM.Id) \nFROM continents C \nLEFT JOIN countries CO ON C.ContId = CO.Continent \nLEFT JOIN car_makers CM ON CO.CountryId = CM.Country \nGROUP BY C.Continent",
        "final_sql": "SELECT C.Continent, COUNT(CM.Id) FROM continents C LEFT JOIN countries CO ON C.ContId = CO.Continent LEFT JOIN car_makers CM ON CO.ContId = CM.Country GROUP BY C.Continent;",
        "input_tokens": 2026,
        "output_tokens": 341,
        "time": 10.5060295830001,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT c.Continent, COUNT(cm.Id) \nFROM continents c \nLEFT JOIN countries co ON c.ContId = co.Continent \nLEFT JOIN car_makers cm ON co.CountryId = cm.Country \nGROUP BY c.Continent",
        "final_sql": "SELECT c.Continent, COUNT(cm.Id) FROM continents c LEFT JOIN countries co ON c.ContId = co.Continent LEFT JOIN car_makers cm ON co.ContId = cm.Country GROUP BY c.Continent;",
        "input_tokens": 1959,
        "output_tokens": 381,
        "time": 11.317560917000037,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(*) DESC LIMIT 1;",
        "final_sql": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1896,
        "output_tokens": 288,
        "time": 9.684807250000176,
        "question": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1830,
        "output_tokens": 262,
        "time": 8.654590291999966,
        "question": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.FullName",
        "final_sql": "SELECT car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.FullName;",
        "input_tokens": 1923,
        "output_tokens": 251,
        "time": 8.361399250000204,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "db_id": "car_1",
        "gold_query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
        "final_sql": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;",
        "input_tokens": 1850,
        "output_tokens": 226,
        "time": 7.522696415999917,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "db_id": "car_1",
        "gold_query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    {
        "baseline_sql": "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "final_sql": "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "input_tokens": 1643,
        "output_tokens": 136,
        "time": 6.201543707999917,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "final_sql": "SELECT Accelerate FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE LOWER(Model) = 'amc hornet sportabout (sw)')",
        "input_tokens": 1650,
        "output_tokens": 153,
        "time": 6.119045790999962,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'",
        "final_sql": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'",
        "input_tokens": 1698,
        "output_tokens": 234,
        "time": 8.355535375000045,
        "question": "How many car makers are there in france?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers WHERE Country = 'France'",
        "final_sql": "SELECT count(*) FROM car_makers WHERE Country = 'France'",
        "input_tokens": 1562,
        "output_tokens": 117,
        "time": 4.873728208000102,
        "question": "What is the number of makers of care in France?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers WHERE Country = \"USA\";",
        "final_sql": "SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = \"USA\";",
        "input_tokens": 1648,
        "output_tokens": 224,
        "time": 7.331937958000026,
        "question": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers WHERE Country = 'United States'",
        "final_sql": "SELECT COUNT(DISTINCT model_list.ModelId) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE countries.CountryName = 'United States'",
        "input_tokens": 1555,
        "output_tokens": 162,
        "time": 5.8376974999998765,
        "question": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "final_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "input_tokens": 1655,
        "output_tokens": 137,
        "time": 5.483665540999937,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "final_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "input_tokens": 1593,
        "output_tokens": 109,
        "time": 4.566882165999914,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "final_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;",
        "input_tokens": 1831,
        "output_tokens": 234,
        "time": 7.842370999999957,
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "final_sql": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;",
        "input_tokens": 1666,
        "output_tokens": 134,
        "time": 5.195563125000035,
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT car_makers.Maker, model_list.Model\nFROM car_makers\nJOIN model_list ON car_makers.Id = model_list.Maker",
        "final_sql": "SELECT car_makers.Maker, model_list.Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "input_tokens": 1570,
        "output_tokens": 152,
        "time": 5.080346917000043,
        "question": "What are all the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT Maker, Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker",
        "final_sql": "SELECT Maker, Model FROM car_makers INNER JOIN model_list ON car_makers.Id = model_list.Maker",
        "input_tokens": 1556,
        "output_tokens": 140,
        "time": 5.592296124999848,
        "question": "What are the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId;",
        "final_sql": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;",
        "input_tokens": 1798,
        "output_tokens": 191,
        "time": 7.126586832999919,
        "question": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId",
        "final_sql": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "input_tokens": 1815,
        "output_tokens": 202,
        "time": 7.240245125000001,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
        "final_sql": "SELECT count(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150",
        "input_tokens": 1610,
        "output_tokens": 126,
        "time": 5.266521666000017,
        "question": "What is the number of the cars with horsepower more than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
        "final_sql": "SELECT count(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150 OR Horsepower = '150'",
        "input_tokens": 1560,
        "output_tokens": 130,
        "time": 5.09411304199989,
        "question": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "final_sql": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "input_tokens": 1577,
        "output_tokens": 109,
        "time": 4.570993999999928,
        "question": "What is the average weight of cars each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT avg(weight), year FROM players GROUP BY year",
        "final_sql": "SELECT AVG(Weight), Year FROM cars_data GROUP BY Year",
        "input_tokens": 1547,
        "output_tokens": 90,
        "time": 4.094090957999924,
        "question": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING count(*) >= 3",
        "final_sql": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(T1.Id) >= 3",
        "input_tokens": 1972,
        "output_tokens": 409,
        "time": 11.691839208000147,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries AS c\nJOIN car_makers AS cm ON c.CountryId = cm.Country\nWHERE c.Continent = (\n    SELECT ContId\n    FROM continents\n    WHERE Continent = 'Europe'\n)\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3;",
        "final_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE c.Continent = (   SELECT ContId   FROM continents   WHERE Continent = 'Europe' ) GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;",
        "input_tokens": 1985,
        "output_tokens": 368,
        "time": 10.198033458999817,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 3 GROUP BY T2.Make",
        "final_sql": "SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 3 GROUP BY T2.Make;",
        "input_tokens": 1936,
        "output_tokens": 309,
        "time": 10.306210833000023,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data\nJOIN model_list ON cars_data.Id = model_list.ModelId\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Cylinders = 3",
        "final_sql": "SELECT MAX(cars_data.Horsepower), car_makers.Maker FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;",
        "input_tokens": 1872,
        "output_tokens": 267,
        "time": 8.562473583999918,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data WHERE MPG = (SELECT MAX(MPG) FROM cars_data)",
        "final_sql": "SELECT model_list.Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.MPG = (SELECT MAX(MPG) FROM cars_data)",
        "input_tokens": 1751,
        "output_tokens": 239,
        "time": 7.841599458999781,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1",
        "final_sql": "SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC LIMIT 1",
        "input_tokens": 1618,
        "output_tokens": 162,
        "time": 6.409846292000111,
        "question": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "gold_query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
    },
    {
        "baseline_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "final_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "input_tokens": 1578,
        "output_tokens": 130,
        "time": 5.180167166000047,
        "question": "What is the average horsepower of the cars before 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "baseline_sql": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
        "final_sql": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980;",
        "input_tokens": 1585,
        "output_tokens": 133,
        "time": 5.284759207999969,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select avg(horsepower) from cars_data where year  <  1980;"
    },
    {
        "baseline_sql": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "final_sql": "SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'",
        "input_tokens": 1611,
        "output_tokens": 168,
        "time": 5.925449749999871,
        "question": "What is the average edispl of the cars of model volvo?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT AVG(Edispl) FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN countries ON car_makers.Country = countries.CountryId\nWHERE car_makers.Maker = 'Volvo'",
        "final_sql": "SELECT AVG(cars_data.Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE car_names.Make = 'Volvo'",
        "input_tokens": 1922,
        "output_tokens": 410,
        "time": 10.16893200000004,
        "question": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
        "final_sql": "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
        "input_tokens": 1583,
        "output_tokens": 134,
        "time": 4.954872583999986,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
        "final_sql": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
        "input_tokens": 1521,
        "output_tokens": 100,
        "time": 4.121223124999915,
        "question": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1602,
        "output_tokens": 148,
        "time": 5.9327904579999995,
        "question": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1637,
        "output_tokens": 183,
        "time": 6.507532332999972,
        "question": "What model has the most different versions?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "input_tokens": 1629,
        "output_tokens": 150,
        "time": 5.795257457999924,
        "question": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4;",
        "input_tokens": 1627,
        "output_tokens": 155,
        "time": 6.227774209000017,
        "question": "What is the number of cars with more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980",
        "input_tokens": 1622,
        "output_tokens": 117,
        "time": 5.05188883400001,
        "question": "how many cars were produced in 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980;",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980;",
        "input_tokens": 1661,
        "output_tokens": 113,
        "time": 4.77326195899991,
        "question": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = \"American Motor Company\";",
        "final_sql": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id",
        "input_tokens": 1853,
        "output_tokens": 235,
        "time": 7.326945292000119,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company')",
        "final_sql": "SELECT count(*) FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'American Motor Company'",
        "input_tokens": 1708,
        "output_tokens": 206,
        "time": 6.409330040999976,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "final_sql": "SELECT FullName, Id FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 );",
        "input_tokens": 2016,
        "output_tokens": 283,
        "time": 8.972997209000141,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3",
        "final_sql": "SELECT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;",
        "input_tokens": 1891,
        "output_tokens": 259,
        "time": 8.403171333000046,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT DISTINCT model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = \"General Motors\") OR ModelId IN (SELECT MakeId FROM cars_data WHERE Weight > 3500)",
        "final_sql": "SELECT DISTINCT model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE FullName = \"General Motors\") AND ModelId IN (SELECT MakeId FROM cars_data WHERE Weight > 3500)",
        "input_tokens": 1853,
        "output_tokens": 273,
        "time": 8.459814583000025,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'General Motors' OR T1.Weight > 3500",
        "final_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T2.Maker = 'General Motors' OR T3.Weight > 3500;",
        "input_tokens": 1881,
        "output_tokens": 264,
        "time": 9.072324292000076,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
        "final_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;",
        "input_tokens": 1742,
        "output_tokens": 171,
        "time": 5.789768082999899,
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Year IN (SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000)",
        "final_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 AND Year IN (SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000)",
        "input_tokens": 1996,
        "output_tokens": 303,
        "time": 9.584555165999973,
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT max(Accelerate) FROM cars_data) LIMIT 1",
        "final_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data) LIMIT 1",
        "input_tokens": 1863,
        "output_tokens": 336,
        "time": 10.199873499999967,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
        "final_sql": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
        "input_tokens": 1792,
        "output_tokens": 262,
        "time": 8.250228458000038,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "final_sql": "SELECT MIN(Cylinders) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'",
        "input_tokens": 1611,
        "output_tokens": 162,
        "time": 5.795575000000099,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo'))",
        "final_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo'))",
        "input_tokens": 1755,
        "output_tokens": 246,
        "time": 7.126474000000144,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data WHERE Horsepower  =  (SELECT max(Horsepower) FROM cars_data))",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate           FROM cars_data           WHERE Horsepower = (SELECT MAX(Horsepower)                     FROM cars_data))",
        "input_tokens": 1776,
        "output_tokens": 250,
        "time": 8.252362540999911,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(CAST(Horsepower AS number)) FROM cars_data)",
        "input_tokens": 1733,
        "output_tokens": 216,
        "time": 6.713117415999932,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT count(*) FROM (SELECT Country, count(*) AS num_car_makers FROM car_makers GROUP BY Country HAVING num_car_makers > 2) AS T1",
        "final_sql": "SELECT count(*) FROM (SELECT Country, count(*) AS num_car_makers FROM car_makers GROUP BY Country HAVING num_car_makers > 2) AS T1",
        "input_tokens": 1767,
        "output_tokens": 248,
        "time": 7.861319458000025,
        "question": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;",
        "final_sql": "SELECT COUNT(DISTINCT Country) FROM car_makers WHERE Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2);",
        "input_tokens": 1902,
        "output_tokens": 336,
        "time": 9.073728291999942,
        "question": "What is the number of countries with more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "input_tokens": 1655,
        "output_tokens": 173,
        "time": 6.406128124999896,
        "question": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6 OR Cylinders = 6",
        "input_tokens": 1550,
        "output_tokens": 113,
        "time": 4.666351959000167,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT T1.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.ModelId = T2.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "final_sql": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "input_tokens": 1917,
        "output_tokens": 345,
        "time": 9.985609749999867,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT T1.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.ModelId = T2.ModelId WHERE T1.Cylinders = 4 GROUP BY T1.Model ORDER BY T1.Horsepower DESC LIMIT 1",
        "final_sql": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Cylinders = 4 GROUP BY T2.Model ORDER BY T1.Horsepower DESC LIMIT 1",
        "input_tokens": 1863,
        "output_tokens": 276,
        "time": 8.261501666000186,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)",
        "final_sql": "SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;",
        "input_tokens": 1910,
        "output_tokens": 257,
        "time": 8.458354791000147,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    {
        "baseline_sql": "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4)",
        "final_sql": "SELECT cn.MakeId, cn.Make FROM car_names cn JOIN cars_data cd ON cn.MakeId = cd.Id WHERE cd.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4;",
        "input_tokens": 1855,
        "output_tokens": 235,
        "time": 7.436256416999868,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "gold_query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
    },
    {
        "baseline_sql": "SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "final_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;",
        "input_tokens": 1780,
        "output_tokens": 181,
        "time": 6.614423416000136,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "final_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;",
        "input_tokens": 1749,
        "output_tokens": 200,
        "time": 6.467989458000147,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT t4.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model JOIN car_makers AS t4 ON t3.Maker = t4.Id WHERE t1.Weight < 3500 AND t4.Maker != 'Ford Motor Company'",
        "final_sql": "SELECT t4.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model JOIN car_makers AS t4 ON t3.Maker = t4.Id WHERE t1.Weight < 3500 AND t4.Maker != 'Ford Motor Company'",
        "input_tokens": 2091,
        "output_tokens": 387,
        "time": 10.652045499999986,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T3.Id = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'",
        "final_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_names AS T2 ON T1.ModelId = T2.Model JOIN cars_data AS T3 ON T2.MakeId = T3.Id JOIN car_makers AS T4 ON T3.Id = T4.Id WHERE T3.Weight < 3500 AND T4.Maker != 'Ford Motor Company'",
        "input_tokens": 2029,
        "output_tokens": 387,
        "time": 11.734224750000067,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "final_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "input_tokens": 1691,
        "output_tokens": 149,
        "time": 5.282585624999911,
        "question": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "final_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "input_tokens": 1652,
        "output_tokens": 149,
        "time": 5.488445291000062,
        "question": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Maker) > 3);",
        "final_sql": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Id FROM car_makers GROUP BY Id HAVING COUNT(DISTINCT Maker) > 3);",
        "input_tokens": 2042,
        "output_tokens": 335,
        "time": 9.477464916999907,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "gold_query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T3.MakeId) > 3",
        "final_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T3.MakeId) > 3;",
        "input_tokens": 2144,
        "output_tokens": 460,
        "time": 12.862087500000143,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 WHERE (SELECT COUNT(*) FROM car_makers AS T2 WHERE T2.Country = T1.CountryId) > 3 OR T1.CountryId IN (SELECT T3.Country FROM car_makers AS T3 JOIN model_list AS T4 ON T3.Id = T4.Maker JOIN car_names AS T5 ON T4.ModelId = T5.MakeId WHERE T5.Make = 'fiat')",
        "final_sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 WHERE (SELECT COUNT(*)     FROM car_makers AS T2     WHERE T2.Country = T1.CountryId) > 3     OR T1.CountryId IN (SELECT T3.Country              FROM car_makers AS T3              JOIN model_list AS T4 ON T3.Id = T4.Maker              JOIN car_names AS T5 ON T4.ModelId = T5.MakeId              WHERE T5.Make LIKE '%fiat%')",
        "input_tokens": 2511,
        "output_tokens": 547,
        "time": 14.059408415999997,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT CountryId, CountryName FROM countries WHERE CountryId IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 3) OR CountryId IN (SELECT DISTINCT Country FROM car_makers WHERE Maker = 'fiat')",
        "final_sql": "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers cm GROUP BY cm.Country HAVING COUNT(*) > 3) OR c.CountryId IN (SELECT DISTINCT cm.Country FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker WHERE ml.Model = 'fiat')",
        "input_tokens": 1921,
        "output_tokens": 329,
        "time": 9.407031583999924,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "gold_query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "final_sql": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "input_tokens": 1226,
        "output_tokens": 124,
        "time": 5.38628575000007,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT country FROM airlines WHERE Airline = 'Jetblue Airways'",
        "final_sql": "SELECT Country FROM airlines WHERE Airline = 'Jetblue Airways'",
        "input_tokens": 1163,
        "output_tokens": 124,
        "time": 4.869847166999989,
        "question": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "input_tokens": 1294,
        "output_tokens": 132,
        "time": 5.487258291999979,
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "input_tokens": 1171,
        "output_tokens": 132,
        "time": 5.07829470799993,
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
        "input_tokens": 1150,
        "output_tokens": 103,
        "time": 4.2564290000000256,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "input_tokens": 1263,
        "output_tokens": 135,
        "time": 5.077513958000054,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
        "input_tokens": 1191,
        "output_tokens": 142,
        "time": 5.386758874999941,
        "question": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "input_tokens": 1289,
        "output_tokens": 146,
        "time": 6.000560417000088,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines",
        "final_sql": "SELECT COUNT(*) FROM airlines;",
        "input_tokens": 1055,
        "output_tokens": 66,
        "time": 3.742500749999863,
        "question": "How many airlines do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines",
        "final_sql": "SELECT COUNT(*) FROM airlines",
        "input_tokens": 1073,
        "output_tokens": 73,
        "time": 3.6911290000000463,
        "question": "What is the total number of airlines?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airports",
        "final_sql": "SELECT count(*) FROM airports;",
        "input_tokens": 1056,
        "output_tokens": 66,
        "time": 3.1559991249998802,
        "question": "How many airports do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airports",
        "final_sql": "SELECT COUNT(*) AS \"Number of Airports\" FROM airports;",
        "input_tokens": 1112,
        "output_tokens": 83,
        "time": 3.650067958000136,
        "question": "Return the number of  airports.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1049,
        "output_tokens": 61,
        "time": 3.7464729580001404,
        "question": "How many flights do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1056,
        "output_tokens": 61,
        "time": 4.770164541999975,
        "question": "Return the number of flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "input_tokens": 1169,
        "output_tokens": 130,
        "time": 4.990134500000067,
        "question": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "input_tokens": 1257,
        "output_tokens": 134,
        "time": 5.707597790999898,
        "question": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA';",
        "final_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1111,
        "output_tokens": 84,
        "time": 4.363672124999994,
        "question": "How many airlines are from USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines WHERE Country  =  'USA'",
        "final_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA'",
        "input_tokens": 1154,
        "output_tokens": 87,
        "time": 4.251605625000138,
        "question": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "input_tokens": 1179,
        "output_tokens": 91,
        "time": 4.259351833999972,
        "question": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "input_tokens": 1210,
        "output_tokens": 100,
        "time": 4.5667996670001685,
        "question": "Give the city and country for the Alton airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "input_tokens": 1264,
        "output_tokens": 128,
        "time": 5.07907712500014,
        "question": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "input_tokens": 1313,
        "output_tokens": 132,
        "time": 5.3859238749998894,
        "question": "Return the name of the airport with code 'AKO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "input_tokens": 1217,
        "output_tokens": 122,
        "time": 4.975329750000128,
        "question": "What are airport names at City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "input_tokens": 1242,
        "output_tokens": 118,
        "time": 4.877678041999843,
        "question": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1237,
        "output_tokens": 162,
        "time": 5.481838624999909,
        "question": "How many flights depart from 'APG'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1180,
        "output_tokens": 99,
        "time": 3.9520292500001233,
        "question": "Count the number of flights departing from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "input_tokens": 1104,
        "output_tokens": 95,
        "time": 3.847498583000288,
        "question": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "input_tokens": 1093,
        "output_tokens": 91,
        "time": 3.945811333000165,
        "question": "Count the number of flights into ATO.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\");",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');",
        "input_tokens": 1317,
        "output_tokens": 258,
        "time": 8.054480166999838,
        "question": "How many flights depart from City Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen'",
        "input_tokens": 1217,
        "output_tokens": 122,
        "time": 5.28402774999995,
        "question": "Return the number of flights departing from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'Aberdeen';",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ABZ';",
        "input_tokens": 1145,
        "output_tokens": 137,
        "time": 4.975587207999979,
        "question": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport  =  'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ABZ'",
        "input_tokens": 1276,
        "output_tokens": 136,
        "time": 5.176419792000161,
        "question": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport  =  t2.AirportCode JOIN airports AS t3 ON t1.DestAirport  =  t3.AirportCode WHERE t2.City  =  \"Aberdeen\" AND t3.City  =  \"Ashley\"",
        "final_sql": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode JOIN airports AS t3 ON t1.DestAirport = t3.AirportCode WHERE t2.City = 'Aberdeen' AND t3.City = 'Ashley'",
        "input_tokens": 1784,
        "output_tokens": 482,
        "time": 13.576711708999937,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport = \"Aberdeen\" AND DestAirport = \"Ashley\";",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';",
        "input_tokens": 1247,
        "output_tokens": 149,
        "time": 5.894831375000194,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'",
        "final_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'",
        "input_tokens": 1297,
        "output_tokens": 207,
        "time": 6.921095332999812,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways')",
        "final_sql": "SELECT count(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways')",
        "input_tokens": 1342,
        "output_tokens": 211,
        "time": 7.1250708329998815,
        "question": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "final_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport = 'ASY'",
        "input_tokens": 1533,
        "output_tokens": 331,
        "time": 10.094431083000018,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'",
        "input_tokens": 1533,
        "output_tokens": 372,
        "time": 10.809529292000207,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'",
        "final_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport IN (SELECT AirportCode FROM airports WHERE AirportName = 'AHD')",
        "input_tokens": 1444,
        "output_tokens": 311,
        "time": 9.063528334000239,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND SourceAirport = 'AHD Airport'",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airlines.Airline = 'United Airlines' AND airports.AirportCode = 'AHD Airport'",
        "input_tokens": 1608,
        "output_tokens": 393,
        "time": 11.62635037500013,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline  =  'United Airlines' AND T1.DestAirport  =  'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.Airline = 'United Airlines' AND T3.City = 'Aberdeen'",
        "input_tokens": 1362,
        "output_tokens": 260,
        "time": 8.050863625000147,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Abbreviation = 'UA' AND ap.City = 'Aberdeen'",
        "input_tokens": 1514,
        "output_tokens": 357,
        "time": 11.120333458000005,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.DestAirport GROUP BY airports.City ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1385,
        "output_tokens": 266,
        "time": 8.558541291999973,
        "question": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.City FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport GROUP BY t1.City ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT t1.City FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport GROUP BY t1.City ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1417,
        "output_tokens": 293,
        "time": 9.171670749999976,
        "question": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT airports.City FROM airports JOIN flights ON airports.AirportCode = flights.SourceAirport GROUP BY airports.City ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1453,
        "output_tokens": 297,
        "time": 9.22135958400031,
        "question": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1241,
        "output_tokens": 164,
        "time": 5.490139791000274,
        "question": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1566,
        "output_tokens": 346,
        "time": 10.666673707999962,
        "question": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1426,
        "output_tokens": 239,
        "time": 7.375685625000187,
        "question": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1",
        "final_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1640,
        "output_tokens": 352,
        "time": 10.31317937499989,
        "question": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1",
        "input_tokens": 1324,
        "output_tokens": 179,
        "time": 6.726474333000169,
        "question": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;",
        "input_tokens": 1261,
        "output_tokens": 209,
        "time": 7.222935041000255,
        "question": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1280,
        "output_tokens": 221,
        "time": 7.3321213750000425,
        "question": "What airline serves the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "final_sql": "SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY COUNT(*) ASC   LIMIT 1 )",
        "input_tokens": 1453,
        "output_tokens": 270,
        "time": 8.454698540999743,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) ASC LIMIT 1)",
        "final_sql": "SELECT Abbreviation, Country FROM airlines WHERE uid = (   SELECT Airline   FROM flights   GROUP BY Airline   ORDER BY count(*) ASC   LIMIT 1 )",
        "input_tokens": 1498,
        "output_tokens": 277,
        "time": 8.866324042000088,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'",
        "input_tokens": 1390,
        "output_tokens": 241,
        "time": 7.837747832999867,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'",
        "final_sql": "SELECT Airline FROM flights WHERE SourceAirport = 'AHD'",
        "input_tokens": 1197,
        "output_tokens": 132,
        "time": 5.2801717920001465,
        "question": "Which airlines have a flight with source airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'",
        "final_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'",
        "input_tokens": 1191,
        "output_tokens": 134,
        "time": 5.494903792000059,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights WHERE DestAirport = 'AHD'",
        "final_sql": "SELECT Airline FROM flights WHERE DestAirport = 'AHD'",
        "input_tokens": 1210,
        "output_tokens": 132,
        "time": 5.179500666999957,
        "question": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.AirportCode = 'APG' AND T3.AirportCode = 'CVO'",
        "final_sql": "SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.AirportCode = 'APG' AND T3.AirportCode = 'CVO'",
        "input_tokens": 1671,
        "output_tokens": 387,
        "time": 11.325330000000122,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT DISTINCT A.Airline\nFROM flights F\nJOIN airlines A ON F.Airline = A.uid\nJOIN airports AS APG ON F.SourceAirport = APG.AirportCode\nJOIN airports AS CVO ON F.DestAirport = CVO.AirportCode\nWHERE APG.City = 'APG' AND CVO.City = 'CVO'",
        "final_sql": "SELECT DISTINCT A.Airline FROM flights F JOIN airlines A ON F.Airline = A.uid JOIN airports AS APG ON F.SourceAirport = APG.AirportCode JOIN airports AS CVO ON F.DestAirport = CVO.AirportCode WHERE APG.AirportCode = 'APG' AND CVO.AirportCode = 'CVO'",
        "input_tokens": 1602,
        "output_tokens": 423,
        "time": 12.04105699999991,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Airline NOT IN (SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG')",
        "final_sql": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Airline NOT IN (   SELECT DISTINCT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.Airline   WHERE T2.SourceAirport = 'APG' )",
        "input_tokens": 1622,
        "output_tokens": 380,
        "time": 11.528022666000197,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "final_sql": "SELECT Airline FROM flights WHERE SourceAirport = 'CVO' AND Airline NOT IN (SELECT Airline FROM flights WHERE DestAirport = 'APG')",
        "input_tokens": 1345,
        "output_tokens": 216,
        "time": 8.15078208299974,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10;",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10;",
        "input_tokens": 1231,
        "output_tokens": 138,
        "time": 5.077523124999971,
        "question": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
        "input_tokens": 1260,
        "output_tokens": 168,
        "time": 6.202566666999701,
        "question": "Which airlines have at least 10 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline        FROM flights        GROUP BY Airline        HAVING COUNT(*) < 200)",
        "input_tokens": 1316,
        "output_tokens": 244,
        "time": 8.656245832999957,
        "question": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200;",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200;",
        "input_tokens": 1288,
        "output_tokens": 184,
        "time": 6.504259083999841,
        "question": "Which airlines have less than 200 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"United Airlines\")",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = \"United Airlines\")",
        "input_tokens": 1491,
        "output_tokens": 279,
        "time": 9.275789499999973,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
        "input_tokens": 1393,
        "output_tokens": 245,
        "time": 8.456212958999913,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
        "input_tokens": 1257,
        "output_tokens": 130,
        "time": 5.07799550000027,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1190,
        "output_tokens": 108,
        "time": 4.8680059589996745,
        "question": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
        "input_tokens": 1237,
        "output_tokens": 130,
        "time": 5.178565042000173,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "input_tokens": 1220,
        "output_tokens": 128,
        "time": 5.17957691599986,
        "question": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\")",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE AirportName = \"Aberdeen\")",
        "input_tokens": 1325,
        "output_tokens": 187,
        "time": 6.6131135409996205,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "input_tokens": 1185,
        "output_tokens": 128,
        "time": 5.27865837499985,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"Aberdeen\"",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = (SELECT AirportCode FROM airports WHERE City = \"Aberdeen\")",
        "input_tokens": 1325,
        "output_tokens": 198,
        "time": 7.023467457999686,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'",
        "input_tokens": 1185,
        "output_tokens": 128,
        "time": 4.97294812500013,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'",
        "final_sql": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = 'Aberdeen' OR T2.City = 'Abilene'",
        "input_tokens": 1468,
        "output_tokens": 282,
        "time": 8.408449750000273,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "input_tokens": 1183,
        "output_tokens": 115,
        "time": 4.9173977089999426,
        "question": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights)",
        "input_tokens": 1447,
        "output_tokens": 241,
        "time": 7.536850957999832,
        "question": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);",
        "final_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);",
        "input_tokens": 1250,
        "output_tokens": 178,
        "time": 7.020348874999854,
        "question": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM employee;",
        "final_sql": "SELECT count(*) FROM employee;",
        "input_tokens": 1186,
        "output_tokens": 64,
        "time": 3.744501458999821,
        "question": "How many employees are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT count(*) FROM employee",
        "final_sql": "SELECT COUNT(*) FROM employee;",
        "input_tokens": 1183,
        "output_tokens": 53,
        "time": 3.0267774170001758,
        "question": "Count the number of employees",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT Name FROM employee ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1289,
        "output_tokens": 101,
        "time": 4.786553041999923,
        "question": "Sort employee names by their age in ascending order.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT Name FROM employee ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1289,
        "output_tokens": 105,
        "time": 4.562394832999871,
        "question": "List the names of employees and sort in ascending order of age.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT City, count(*) FROM employee GROUP BY City",
        "final_sql": "SELECT City, count(*) FROM employee GROUP BY City",
        "input_tokens": 1293,
        "output_tokens": 103,
        "time": 4.668921500000124,
        "question": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT City, count(*) FROM employee GROUP BY City",
        "final_sql": "SELECT City, COUNT(*) FROM employee GROUP BY City;",
        "input_tokens": 1297,
        "output_tokens": 133,
        "time": 5.141492375000325,
        "question": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT city\nFROM employee\nWHERE Age < 30\nGROUP BY city\nHAVING COUNT(*) > 1;",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;",
        "input_tokens": 1510,
        "output_tokens": 214,
        "time": 7.228064166999957,
        "question": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1",
        "input_tokens": 1475,
        "output_tokens": 213,
        "time": 7.026789792000272,
        "question": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "final_sql": "SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location;",
        "input_tokens": 1393,
        "output_tokens": 167,
        "time": 6.612095500000123,
        "question": "Find the number of shops in each location.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "final_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location;",
        "input_tokens": 1404,
        "output_tokens": 162,
        "time": 5.998168542000258,
        "question": "How many shops are there in each location?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT t1.Manager_name, t1.District FROM shop AS t1 ORDER BY t1.Number_products DESC LIMIT 1",
        "final_sql": "SELECT Manager_name, District FROM shop ORDER BY Number_products DESC LIMIT 1",
        "input_tokens": 1549,
        "output_tokens": 200,
        "time": 7.228275374999612,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Manager_name, T1.District FROM shop AS T1 JOIN (SELECT Shop_ID, MAX(Number_products) AS max_products FROM shop) AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T1.Number_products = T2.max_products",
        "final_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "input_tokens": 1696,
        "output_tokens": 311,
        "time": 10.094303083999876,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop",
        "final_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;",
        "input_tokens": 1218,
        "output_tokens": 66,
        "time": 3.848038708000331,
        "question": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
        "final_sql": "SELECT MIN(Number_products), MAX(Number_products) FROM shop;",
        "input_tokens": 1249,
        "output_tokens": 52,
        "time": 3.1333300829996915,
        "question": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1318,
        "output_tokens": 111,
        "time": 4.458234459000323,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1352,
        "output_tokens": 100,
        "time": 4.3623063750001165,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "input_tokens": 1431,
        "output_tokens": 169,
        "time": 6.304638583000269,
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "input_tokens": 1409,
        "output_tokens": 130,
        "time": 4.793505707999884,
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1620,
        "output_tokens": 269,
        "time": 8.637961333000021,
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Name ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Name ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1670,
        "output_tokens": 311,
        "time": 10.094268166999882,
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID ORDER BY T2.Bonus DESC LIMIT 1;",
        "input_tokens": 1561,
        "output_tokens": 235,
        "time": 8.003220832999887,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM employee ORDER BY Bonus DESC LIMIT 1",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID ORDER BY ev.Bonus DESC LIMIT 1;",
        "input_tokens": 1529,
        "output_tokens": 209,
        "time": 7.375773833000039,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "final_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "input_tokens": 1372,
        "output_tokens": 140,
        "time": 5.793811791999815,
        "question": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "final_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "input_tokens": 1450,
        "output_tokens": 144,
        "time": 5.692092709000008,
        "question": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1637,
        "output_tokens": 275,
        "time": 9.17112304200009,
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM shop AS T1 JOIN hiring AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1618,
        "output_tokens": 263,
        "time": 8.646963416999824,
        "question": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "final_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "input_tokens": 1422,
        "output_tokens": 140,
        "time": 5.797089291999782,
        "question": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "final_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "input_tokens": 1367,
        "output_tokens": 168,
        "time": 6.38869645800014,
        "question": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) AS num_employees, shop.Name AS shop_name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name",
        "final_sql": "SELECT COUNT(*) AS num_employees, shop.Name AS shop_name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;",
        "input_tokens": 1583,
        "output_tokens": 250,
        "time": 8.165822249999565,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT COUNT(*) AS \"Number_of_employees\", Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID, shop.Name",
        "final_sql": "SELECT COUNT(*) AS \"Number_of_employees\", shop.Name FROM employee JOIN hiring ON employee.Employee_ID = hiring.Employee_ID JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Shop_ID, shop.Name;",
        "input_tokens": 1657,
        "output_tokens": 274,
        "time": 8.553814458000033,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT sum(Bonus) FROM evaluation",
        "final_sql": "SELECT sum(Bonus) FROM evaluation;",
        "input_tokens": 1235,
        "output_tokens": 84,
        "time": 4.054719917000057,
        "question": "What is total bonus given in all evaluations?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT sum(Bonus) FROM evaluation",
        "final_sql": "SELECT sum(Bonus) FROM evaluation;",
        "input_tokens": 1243,
        "output_tokens": 74,
        "time": 3.514944208000088,
        "question": "Find the total amount of bonus given in all the evaluations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT * FROM hiring;",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1311,
        "output_tokens": 150,
        "time": 5.513605333000214,
        "question": "Give me all the information about hiring.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT * FROM hiring",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1319,
        "output_tokens": 146,
        "time": 5.779794999999922,
        "question": "What is all the information about hiring?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000",
        "final_sql": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
        "input_tokens": 1507,
        "output_tokens": 207,
        "time": 6.9220568749997256,
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT district FROM shop WHERE number_products  <  3000 AND district IN (SELECT district FROM shop WHERE number_products  >  10000) GROUP BY district",
        "final_sql": "SELECT DISTINCT district FROM shop WHERE number_products < 3000 AND district IN (SELECT district FROM shop WHERE number_products > 10000)",
        "input_tokens": 1594,
        "output_tokens": 238,
        "time": 8.030239917000017,
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Location) FROM shop",
        "final_sql": "SELECT count(DISTINCT Location) FROM shop;",
        "input_tokens": 1186,
        "output_tokens": 46,
        "time": 2.9753787919999013,
        "question": "How many different store locations are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Location) FROM shop",
        "final_sql": "SELECT count(DISTINCT Location) FROM shop;",
        "input_tokens": 1188,
        "output_tokens": 46,
        "time": 3.3751418330002707,
        "question": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents",
        "final_sql": "SELECT count(*) FROM Documents;",
        "input_tokens": 1247,
        "output_tokens": 57,
        "time": 3.8878179999996973,
        "question": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents",
        "final_sql": "SELECT count(*) FROM Documents;",
        "input_tokens": 1237,
        "output_tokens": 57,
        "time": 3.009995125000387,
        "question": "Count the number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT document_id, document_name, document_description FROM Documents;",
        "final_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
        "input_tokens": 1356,
        "output_tokens": 93,
        "time": 4.469134208000014,
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
        "final_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
        "input_tokens": 1309,
        "output_tokens": 68,
        "time": 3.6422411249996003,
        "question": "What are the ids, names, and descriptions for all documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT document_name, template_id FROM Documents WHERE document_description LIKE '%w%'",
        "final_sql": "SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%'",
        "input_tokens": 1461,
        "output_tokens": 148,
        "time": 5.591050833999816,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT d.Document_Name, d.Template_ID FROM Documents AS d WHERE d.Document_Description LIKE '%w%'",
        "final_sql": "SELECT d.Document_Name, d.Template_ID FROM Documents AS d WHERE d.Document_Description LIKE '%w%'",
        "input_tokens": 1536,
        "output_tokens": 156,
        "time": 6.205531749999864,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\";",
        "final_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\";",
        "input_tokens": 1477,
        "output_tokens": 137,
        "time": 5.4864191669998945,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "final_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "input_tokens": 1511,
        "output_tokens": 142,
        "time": 5.282185999999911,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Template_ID) FROM Documents",
        "final_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;",
        "input_tokens": 1323,
        "output_tokens": 86,
        "time": 3.846317999999883,
        "question": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "final_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;",
        "input_tokens": 1309,
        "output_tokens": 84,
        "time": 3.851990666999882,
        "question": "Count the number of different templates used for documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "final_sql": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "input_tokens": 1477,
        "output_tokens": 187,
        "time": 7.024369792000016,
        "question": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents WHERE Template_Type_Code = \"PPT\"",
        "final_sql": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"PPT\"",
        "input_tokens": 1419,
        "output_tokens": 161,
        "time": 7.026354665999861,
        "question": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "final_sql": "SELECT Templates.Template_ID, COUNT(Documents.Template_ID) AS Number_of_Documents FROM Templates LEFT JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;",
        "input_tokens": 1383,
        "output_tokens": 140,
        "time": 6.78093379100028,
        "question": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID",
        "final_sql": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;",
        "input_tokens": 1614,
        "output_tokens": 262,
        "time": 8.395116416000292,
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT T1.Template_ID, T1.Template_Type_Code\nFROM Templates AS T1\nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID\nGROUP BY T1.Template_ID, T1.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1682,
        "output_tokens": 314,
        "time": 9.682583125000292,
        "question": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "final_sql": "SELECT Template_ID, Template_Type_Code FROM Templates WHERE Template_ID = (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   ORDER BY COUNT(*) DESC   LIMIT 1 )",
        "input_tokens": 1641,
        "output_tokens": 253,
        "time": 8.971059915999831,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1;",
        "final_sql": "SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1;",
        "input_tokens": 1521,
        "output_tokens": 195,
        "time": 6.611867582999821,
        "question": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_ID IN (   SELECT Template_ID   FROM Documents   GROUP BY Template_ID   HAVING COUNT(*) > 1 )",
        "input_tokens": 1610,
        "output_tokens": 252,
        "time": 8.152854749999733,
        "question": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "input_tokens": 1518,
        "output_tokens": 193,
        "time": 6.612775084000077,
        "question": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "input_tokens": 1422,
        "output_tokens": 114,
        "time": 5.0098522079997565,
        "question": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Templates;",
        "final_sql": "SELECT COUNT(*) FROM Templates;",
        "input_tokens": 1273,
        "output_tokens": 75,
        "time": 5.45117775000017,
        "question": "How many templates do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT count(*) FROM templates",
        "final_sql": "SELECT count(*) FROM Templates",
        "input_tokens": 1402,
        "output_tokens": 153,
        "time": 6.002389582999967,
        "question": "Count the number of templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "final_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;",
        "input_tokens": 1391,
        "output_tokens": 91,
        "time": 4.766276500000004,
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "final_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "input_tokens": 1360,
        "output_tokens": 71,
        "time": 3.645447417000014,
        "question": "What are the ids, version numbers, and type codes for each template?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT DISTINCT Template_Type_Code FROM Templates",
        "final_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;",
        "input_tokens": 1292,
        "output_tokens": 46,
        "time": 3.547882917000152,
        "question": "Show all distinct template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        "final_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;",
        "input_tokens": 1249,
        "output_tokens": 52,
        "time": 3.435309542000141,
        "question": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "input_tokens": 1501,
        "output_tokens": 162,
        "time": 6.201680916999976,
        "question": "What are the ids of templates with template type code PP or PPT?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "input_tokens": 1511,
        "output_tokens": 168,
        "time": 5.894948000000113,
        "question": "Return the ids of templates that have the code PP or PPT.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
        "final_sql": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
        "input_tokens": 1358,
        "output_tokens": 90,
        "time": 4.05350554100005,
        "question": "How many templates have template type code CV?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "final_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "input_tokens": 1416,
        "output_tokens": 99,
        "time": 4.357924166999965,
        "question": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
        "input_tokens": 1592,
        "output_tokens": 211,
        "time": 7.2292434159999175,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
        "input_tokens": 1541,
        "output_tokens": 148,
        "time": 6.10305712499985,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 3317,
        "output_tokens": 1045,
        "time": 27.193728292000287,
        "question": "Show all template type codes and number of templates for each.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1354,
        "output_tokens": 78,
        "time": 4.157183625000016,
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1492,
        "output_tokens": 157,
        "time": 6.348261666999861,
        "question": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1493,
        "output_tokens": 171,
        "time": 5.95752524999989,
        "question": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3;",
        "input_tokens": 1465,
        "output_tokens": 175,
        "time": 6.1023648750001485,
        "question": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "input_tokens": 1559,
        "output_tokens": 236,
        "time": 8.143445665999934,
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1275,
        "output_tokens": 52,
        "time": 3.2359486670002298,
        "question": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1437,
        "output_tokens": 96,
        "time": 4.4002957500001685,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Data base\"",
        "final_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Data base\"",
        "input_tokens": 1480,
        "output_tokens": 155,
        "time": 6.316308666999703,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "final_sql": "SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "input_tokens": 1495,
        "output_tokens": 143,
        "time": 5.795418541999879,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT document_name FROM Documents WHERE template_id IN (SELECT template_id FROM Templates WHERE template_type_code = \"BK\")",
        "final_sql": "SELECT Document_Name FROM Documents WHERE Template_ID IN (SELECT Template_ID FROM Templates WHERE Template_Type_Code = \"BK\")",
        "input_tokens": 1471,
        "output_tokens": 172,
        "time": 5.994067832999917,
        "question": "Show all document names using templates with template type code BK.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT D.document_name FROM Documents AS D JOIN Templates AS T ON D.template_id = T.template_id WHERE T.template_type_code = \"BK\"",
        "final_sql": "SELECT D.Document_Name FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = \"BK\"",
        "input_tokens": 1583,
        "output_tokens": 234,
        "time": 7.843001917000038,
        "question": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1427,
        "output_tokens": 142,
        "time": 5.486754749999818,
        "question": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) AS Record_Count FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1439,
        "output_tokens": 151,
        "time": 5.693866083999637,
        "question": "What are the different template type codes, and how many documents use each type?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1729,
        "output_tokens": 303,
        "time": 8.967216042000018,
        "question": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1522,
        "output_tokens": 169,
        "time": 7.122409958999924,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "input_tokens": 1417,
        "output_tokens": 147,
        "time": 5.49052545800032,
        "question": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "input_tokens": 1460,
        "output_tokens": 147,
        "time": 5.682430875000136,
        "question": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1270,
        "output_tokens": 62,
        "time": 3.6412283340000613,
        "question": "Show all template type codes and descriptions.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1330,
        "output_tokens": 80,
        "time": 4.0597455839997565,
        "question": "What are the type codes and descriptions for all template types?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "input_tokens": 1367,
        "output_tokens": 101,
        "time": 4.663759874999869,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "input_tokens": 1413,
        "output_tokens": 132,
        "time": 5.383677750000061,
        "question": "Return the template type description of the template type with the code AD.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "input_tokens": 1371,
        "output_tokens": 100,
        "time": 4.669137749999663,
        "question": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "input_tokens": 1393,
        "output_tokens": 125,
        "time": 4.9757185420003225,
        "question": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT DISTINCT t.Template_Type_Description \nFROM Templates t \nINNER JOIN Documents d ON t.Template_ID = d.Template_ID",
        "final_sql": "SELECT DISTINCT tt.Template_Type_Description FROM Ref_Template_Types tt INNER JOIN Templates t ON tt.Template_Type_Code = t.Template_Type_Code INNER JOIN Documents d ON t.Template_ID = d.Template_ID",
        "input_tokens": 1407,
        "output_tokens": 144,
        "time": 5.385531292000451,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        "final_sql": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        "input_tokens": 1458,
        "output_tokens": 122,
        "time": 4.8691110409999965,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Presentation\")",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (   SELECT Template_Type_Code   FROM Ref_Template_Types   WHERE Template_Type_Description = \"Presentation\" )",
        "input_tokens": 1650,
        "output_tokens": 250,
        "time": 7.951057458000378,
        "question": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "input_tokens": 1397,
        "output_tokens": 140,
        "time": 5.99790024999993,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs;",
        "final_sql": "SELECT count(*) FROM Paragraphs;",
        "input_tokens": 1261,
        "output_tokens": 74,
        "time": 3.8444387909999023,
        "question": "How many paragraphs in total?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs",
        "final_sql": "SELECT count(*) FROM Paragraphs;",
        "input_tokens": 1248,
        "output_tokens": 67,
        "time": 3.1337296670003525,
        "question": "Count the number of paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "final_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "input_tokens": 1574,
        "output_tokens": 236,
        "time": 8.048282040999766,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "final_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "input_tokens": 1561,
        "output_tokens": 233,
        "time": 7.7367841670002235,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "final_sql": "SELECT * FROM Paragraphs WHERE LOWER(Paragraph_Text) = 'korea'",
        "input_tokens": 1393,
        "output_tokens": 132,
        "time": 4.976662166999631,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "final_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "input_tokens": 1484,
        "output_tokens": 128,
        "time": 5.3866299169999365,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "input_tokens": 1606,
        "output_tokens": 227,
        "time": 7.228277250000247,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "input_tokens": 1587,
        "output_tokens": 215,
        "time": 7.333547874999567,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = \"Customer reviews\")",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID            FROM Documents            WHERE Document_Name = \"Customer reviews\")",
        "input_tokens": 1585,
        "output_tokens": 236,
        "time": 7.942734416999883,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Customer reviews')",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (   SELECT Document_ID   FROM Documents   WHERE Document_Name = 'Customer reviews' )",
        "input_tokens": 1470,
        "output_tokens": 164,
        "time": 6.503995208000106,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id ASC",
        "final_sql": "SELECT Document_ID, COUNT(*) AS Number_of_Paragraphs FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID ASC;",
        "input_tokens": 1615,
        "output_tokens": 282,
        "time": 9.164641209000365,
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID ASC",
        "final_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Num_Paragraphs FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID ASC",
        "input_tokens": 1638,
        "output_tokens": 302,
        "time": 9.69996270799993,
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM Documents d\nLEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name",
        "final_sql": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d LEFT JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;",
        "input_tokens": 1628,
        "output_tokens": 291,
        "time": 8.86483491700028,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS paragraph_count\nFROM Documents AS D\nLEFT JOIN Paragraphs AS P ON D.document_id = P.document_id\nGROUP BY D.document_id, D.document_name",
        "final_sql": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS paragraph_count FROM Documents AS D LEFT JOIN Paragraphs AS P ON D.document_id = P.document_id GROUP BY D.document_id, D.document_name;",
        "input_tokens": 1615,
        "output_tokens": 258,
        "time": 8.158848500000204,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2;",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;",
        "input_tokens": 1459,
        "output_tokens": 188,
        "time": 6.355521958999816,
        "question": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
        "input_tokens": 1475,
        "output_tokens": 192,
        "time": 6.814152916999774,
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1",
        "input_tokens": 1636,
        "output_tokens": 286,
        "time": 8.765949332999753,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;",
        "input_tokens": 1713,
        "output_tokens": 303,
        "time": 9.27296966699987,
        "question": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1573,
        "output_tokens": 235,
        "time": 7.842351583999971,
        "question": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.document_id FROM documents AS t1 JOIN paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) ASC LIMIT 1",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) ASC LIMIT 1",
        "input_tokens": 3482,
        "output_tokens": 1210,
        "time": 29.79458466699998,
        "question": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID) WHERE num_paragraphs >= 1 AND num_paragraphs <= 2;",
        "final_sql": "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS num_paragraphs    FROM Paragraphs    GROUP BY Document_ID) WHERE num_paragraphs >= 1 AND num_paragraphs <= 2;",
        "input_tokens": 1570,
        "output_tokens": 246,
        "time": 8.317071832999773,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT Document_ID FROM Documents GROUP BY Document_ID HAVING COUNT(Paragraph_ID) BETWEEN 1 AND 2",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) BETWEEN 1 AND 2;",
        "input_tokens": 1558,
        "output_tokens": 240,
        "time": 7.946395166000002,
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T2.paragraph_text IN ('Brazil', 'Ireland') GROUP BY T1.document_id HAVING COUNT(DISTINCT T2.paragraph_text) = 2",
        "final_sql": "SELECT T1.Document_ID FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T2.Paragraph_Text LIKE '%Brazil%' AND T2.Paragraph_Text LIKE '%Ireland%' GROUP BY T1.Document_ID HAVING COUNT(DISTINCT T2.Paragraph_Text) = 2",
        "input_tokens": 1777,
        "output_tokens": 376,
        "time": 11.42509549999977,
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT T1.document_id FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text  =  'Brazil' AND T2.paragraph_text  =  'Ireland'",
        "final_sql": "SELECT DISTINCT P1.Document_ID FROM Paragraphs P1 JOIN Paragraphs P2 ON P1.Document_ID = P2.Document_ID WHERE P1.Paragraph_Text = 'Brazil' AND P2.Paragraph_Text = 'Ireland'",
        "input_tokens": 1696,
        "output_tokens": 290,
        "time": 10.500161333000051,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM teacher",
        "final_sql": "SELECT count(*) FROM teacher",
        "input_tokens": 980,
        "output_tokens": 66,
        "time": 4.787569749999875,
        "question": "How many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT count(*) FROM teacher",
        "final_sql": "SELECT COUNT(*) FROM teacher;",
        "input_tokens": 993,
        "output_tokens": 66,
        "time": 3.4210561250001774,
        "question": "What is the total count of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "input_tokens": 1089,
        "output_tokens": 113,
        "time": 4.2605024169997705,
        "question": "List the names of teachers in ascending order of age.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "input_tokens": 1131,
        "output_tokens": 119,
        "time": 5.2836837920003745,
        "question": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher",
        "final_sql": "SELECT Age, Hometown FROM teacher",
        "input_tokens": 1017,
        "output_tokens": 41,
        "time": 3.130532915999993,
        "question": "What are the age and hometown of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher",
        "final_sql": "SELECT Age, Hometown FROM teacher",
        "input_tokens": 1017,
        "output_tokens": 49,
        "time": 3.2363173339999776,
        "question": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Hometown != \"Little Lever Urban District\";",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';",
        "input_tokens": 1372,
        "output_tokens": 181,
        "time": 6.818975334000243,
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'",
        "input_tokens": 1279,
        "output_tokens": 156,
        "time": 6.100198542000271,
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'",
        "final_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'",
        "input_tokens": 1248,
        "output_tokens": 188,
        "time": 6.921400082999753,
        "question": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "final_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "input_tokens": 1161,
        "output_tokens": 124,
        "time": 5.082583834000161,
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1103,
        "output_tokens": 114,
        "time": 4.8668148329998075,
        "question": "What is the hometown of the youngest teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1094,
        "output_tokens": 132,
        "time": 5.488529374999871,
        "question": "Where is the youngest teacher from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "final_sql": "SELECT Hometown, COUNT(*) FROM teacher WHERE Hometown IS NOT NULL GROUP BY Hometown",
        "input_tokens": 1162,
        "output_tokens": 139,
        "time": 5.488268334000168,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "final_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "input_tokens": 1111,
        "output_tokens": 111,
        "time": 4.77095187499981,
        "question": "For each hometown, how many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1142,
        "output_tokens": 156,
        "time": 5.675176332999854,
        "question": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "final_sql": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "input_tokens": 1206,
        "output_tokens": 181,
        "time": 6.32222075000027,
        "question": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2;",
        "input_tokens": 1170,
        "output_tokens": 155,
        "time": 5.590935291999813,
        "question": "Show the hometowns shared by at least two teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "input_tokens": 1167,
        "output_tokens": 176,
        "time": 6.510791374999826,
        "question": "What are the towns from which at least two teachers come from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T1\nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID",
        "final_sql": "SELECT teacher.Name, course_arrange.Course_ID FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID;",
        "input_tokens": 1319,
        "output_tokens": 195,
        "time": 6.719077165999806,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT T1.Name, T3.Course\nFROM teacher AS T1\nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID",
        "final_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "input_tokens": 1460,
        "output_tokens": 282,
        "time": 8.863584917000026,
        "question": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T3\nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID\nJOIN course AS T1 ON T3.Course_ID = T1.Course_ID\nORDER BY T2.Name ASC",
        "final_sql": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;",
        "input_tokens": 1666,
        "output_tokens": 417,
        "time": 11.819837792000271,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T3\nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID\nJOIN course AS T1 ON T3.Course_ID = T1.Course_ID\nORDER BY T2.Name ASC;",
        "final_sql": "SELECT T2.Name, T1.Course FROM course_arrange AS T3 JOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID JOIN course AS T1 ON T3.Course_ID = T1.Course_ID ORDER BY T2.Name ASC;",
        "input_tokens": 1555,
        "output_tokens": 353,
        "time": 10.82786941700033,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "input_tokens": 1320,
        "output_tokens": 258,
        "time": 8.35376029200006,
        "question": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT DISTINCT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math'",
        "final_sql": "SELECT DISTINCT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math'",
        "input_tokens": 1408,
        "output_tokens": 311,
        "time": 9.993370916000003,
        "question": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "final_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;",
        "input_tokens": 1315,
        "output_tokens": 213,
        "time": 6.819385458999932,
        "question": "Show names of teachers and the number of courses they teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "final_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "input_tokens": 1314,
        "output_tokens": 193,
        "time": 6.918766457999936,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)",
        "input_tokens": 1368,
        "output_tokens": 239,
        "time": 7.553042540999741,
        "question": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)",
        "input_tokens": 1334,
        "output_tokens": 241,
        "time": 7.843855582999822,
        "question": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "input_tokens": 1208,
        "output_tokens": 152,
        "time": 6.1037267080000674,
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "input_tokens": 1207,
        "output_tokens": 146,
        "time": 5.792055249999976,
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM visitor WHERE Age < 30",
        "final_sql": "SELECT count(*) FROM visitor WHERE Age < 30;",
        "input_tokens": 1169,
        "output_tokens": 115,
        "time": 5.078383291999671,
        "question": "How many visitors below age 30 are there?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "final_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",
        "input_tokens": 1274,
        "output_tokens": 145,
        "time": 5.362103667000156,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4",
        "final_sql": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;",
        "input_tokens": 1301,
        "output_tokens": 165,
        "time": 5.6281794999999875,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
    },
    {
        "baseline_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
        "final_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
        "input_tokens": 1428,
        "output_tokens": 191,
        "time": 6.470543499999621,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "final_sql": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "input_tokens": 1297,
        "output_tokens": 142,
        "time": 5.794765999999981,
        "question": "Find the id and name of the museum that has the most staff members?",
        "db_id": "museum_visit",
        "gold_query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < \"2009\";",
        "final_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE CAST(Open_Year AS INTEGER) < 2009;",
        "input_tokens": 1319,
        "output_tokens": 167,
        "time": 6.003390000000309,
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
    },
    {
        "baseline_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
        "final_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
        "input_tokens": 1259,
        "output_tokens": 125,
        "time": 4.971743625000272,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "gold_query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
    },
    {
        "baseline_sql": "SELECT t1.Name FROM museum AS t1 WHERE t1.Num_of_Staff > (SELECT MIN(t2.Num_of_Staff) FROM museum AS t2 WHERE t2.Open_Year > '2010')",
        "final_sql": "SELECT t1.Name FROM museum AS t1 WHERE t1.Num_of_Staff > (   SELECT MIN(t2.Num_of_Staff)   FROM museum AS t2   WHERE t2.Open_Year > '2010' )",
        "input_tokens": 1602,
        "output_tokens": 309,
        "time": 9.463090708999971,
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID HAVING COUNT(*) > 1",
        "final_sql": "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1",
        "input_tokens": 1482,
        "output_tokens": 255,
        "time": 8.170014584,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership\nHAVING SUM(visit.Total_spent) = (\n    SELECT MAX(total_spent)\n    FROM visit\n)",
        "final_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership HAVING SUM(visit.Total_spent) = (   SELECT MAX(total_spent)   FROM visit )",
        "input_tokens": 1467,
        "output_tokens": 282,
        "time": 8.662852625000141,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Museum_ID, Name FROM museum WHERE Museum_ID = (SELECT Museum_ID FROM visit GROUP BY Museum_ID ORDER BY COUNT(*) DESC LIMIT 1)",
        "final_sql": "SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1457,
        "output_tokens": 290,
        "time": 9.583904874999917,
        "question": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "final_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "input_tokens": 1193,
        "output_tokens": 131,
        "time": 5.081070958000055,
        "question": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    {
        "baseline_sql": "SELECT v.Name, v.Age FROM visitor AS v JOIN visit AS vs ON v.ID = vs.visitor_ID WHERE vs.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit) LIMIT 1",
        "final_sql": "SELECT v.Name, v.Age FROM visitor AS v JOIN visit AS vs ON v.ID = vs.visitor_ID WHERE vs.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit) LIMIT 1",
        "input_tokens": 1485,
        "output_tokens": 273,
        "time": 8.761047333000079,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT avg(Num_of_Ticket) ,  max(Num_of_Ticket) FROM visit",
        "final_sql": "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;",
        "input_tokens": 1114,
        "output_tokens": 70,
        "time": 3.549412833000133,
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    {
        "baseline_sql": "SELECT sum(Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)",
        "final_sql": "SELECT sum(Total_spent) FROM visit WHERE visitor_ID IN (SELECT ID FROM visitor WHERE Level_of_membership = 1)",
        "input_tokens": 1261,
        "output_tokens": 171,
        "time": 6.10199512500003,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "gold_query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    {
        "baseline_sql": "SELECT visitor.Name FROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nJOIN museum ON visit.Museum_ID = museum.Museum_ID\nWHERE museum.Open_Year < 2009\nAND visitor.ID IN (\n    SELECT visitor_ID FROM visit\n    JOIN museum ON visit.Museum_ID = museum.Museum_ID\n    WHERE museum.Open_Year > 2011\n)",
        "final_sql": "SELECT visitor.Name FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID JOIN museum ON visit.Museum_ID = museum.Museum_ID WHERE museum.Open_Year < 2009 AND visitor.ID IN (   SELECT visitor_ID FROM visit   JOIN museum ON visit.Museum_ID = museum.Museum_ID   WHERE museum.Open_Year > 2011 )",
        "input_tokens": 1653,
        "output_tokens": 431,
        "time": 12.346323708,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    {
        "baseline_sql": "SELECT count(*) FROM visitor AS T1 WHERE NOT EXISTS (SELECT * FROM visit AS T2 JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T2.visitor_ID = T1.ID AND T3.Open_Year > '2010');",
        "final_sql": "SELECT COUNT(DISTINCT visitor_ID) FROM visit WHERE Museum_ID NOT IN (   SELECT Museum_ID   FROM museum   WHERE Open_Year > '2010' );",
        "input_tokens": 1615,
        "output_tokens": 318,
        "time": 9.482129458000145,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
        "final_sql": "SELECT count(*) FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008'",
        "input_tokens": 1327,
        "output_tokens": 171,
        "time": 6.101303166999969,
        "question": "How many museums were opened after 2013 or before 2008?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players",
        "final_sql": "SELECT COUNT(*) FROM players;",
        "input_tokens": 1612,
        "output_tokens": 70,
        "time": 4.157510667000224,
        "question": "Find the total number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players",
        "final_sql": "SELECT count(*) FROM players;",
        "input_tokens": 1584,
        "output_tokens": 57,
        "time": 2.769036249999772,
        "question": "How many players are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches",
        "final_sql": "SELECT COUNT(match_num) FROM matches",
        "input_tokens": 1619,
        "output_tokens": 73,
        "time": 4.417798708000191,
        "question": "Find the total number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches",
        "final_sql": "SELECT COUNT(match_num) FROM matches",
        "input_tokens": 1827,
        "output_tokens": 288,
        "time": 8.971292458000335,
        "question": "Count the number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "input_tokens": 1803,
        "output_tokens": 140,
        "time": 5.591256415999851,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
        "input_tokens": 1754,
        "output_tokens": 116,
        "time": 4.567733500000031,
        "question": "What are the first names and birth dates of players from the USA?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;",
        "input_tokens": 1714,
        "output_tokens": 105,
        "time": 4.46217470900001,
        "question": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches",
        "input_tokens": 1705,
        "output_tokens": 81,
        "time": 3.9879773330003445,
        "question": "What are the average ages of losers and winners across matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(winner_rank) FROM matches",
        "final_sql": "SELECT AVG(winner_rank) FROM matches;",
        "input_tokens": 1651,
        "output_tokens": 79,
        "time": 4.052615792000324,
        "question": "Find the average rank of winners in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT avg(winner_rank) FROM matches",
        "final_sql": "SELECT AVG(winner_rank) FROM matches",
        "input_tokens": 1716,
        "output_tokens": 84,
        "time": 4.033184333000008,
        "question": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT MAX(loser_rank) FROM matches",
        "final_sql": "SELECT MAX(loser_rank) FROM matches;",
        "input_tokens": 1626,
        "output_tokens": 46,
        "time": 3.4343528750000587,
        "question": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT max(loser_rank) FROM matches",
        "final_sql": "SELECT MAX(loser_rank) FROM matches;",
        "input_tokens": 1682,
        "output_tokens": 98,
        "time": 4.362164750000375,
        "question": "What is the best rank of losers across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
        "final_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
        "input_tokens": 1614,
        "output_tokens": 50,
        "time": 2.92602370800023,
        "question": "find the number of distinct country codes of all players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
        "final_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
        "input_tokens": 1625,
        "output_tokens": 50,
        "time": 3.4400919170002453,
        "question": "How many distinct countries do players come from?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "final_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "input_tokens": 1595,
        "output_tokens": 50,
        "time": 3.4411648750001405,
        "question": "Find the number of distinct name of losers.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "final_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "input_tokens": 1602,
        "output_tokens": 50,
        "time": 3.642857667000044,
        "question": "How many different loser names are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "input_tokens": 1804,
        "output_tokens": 172,
        "time": 6.21383704200025,
        "question": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "input_tokens": 1885,
        "output_tokens": 160,
        "time": 6.353348582999843,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016",
        "final_sql": "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 1931,
        "output_tokens": 227,
        "time": 7.741107042000294,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 2020,
        "output_tokens": 225,
        "time": 7.4329628750001575,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
        "final_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "input_tokens": 1981,
        "output_tokens": 150,
        "time": 5.485807500000192,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016",
        "final_sql": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016",
        "input_tokens": 1806,
        "output_tokens": 127,
        "time": 4.66864141699989,
        "question": "How many matches were played in 2013 or 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "final_sql": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "input_tokens": 2396,
        "output_tokens": 354,
        "time": 10.30341691700005,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "final_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T2.tourney_level = 'F' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' AND T2.tourney_level = 'G';",
        "input_tokens": 2268,
        "output_tokens": 341,
        "time": 10.605866834000153,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "final_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
        "input_tokens": 1851,
        "output_tokens": 159,
        "time": 5.998158332999992,
        "question": "Find the first name and country code of the oldest player.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1",
        "final_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
        "input_tokens": 1905,
        "output_tokens": 196,
        "time": 6.817769541999951,
        "question": "What is the first name and country code of the oldest player?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date",
        "final_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date;",
        "input_tokens": 1711,
        "output_tokens": 98,
        "time": 4.566394791999755,
        "question": "List the first and last name of all players in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date",
        "final_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date ASC;",
        "input_tokens": 1924,
        "output_tokens": 175,
        "time": 6.1153886670003885,
        "question": "What are the full names of all players, sorted by birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "final_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;",
        "input_tokens": 1842,
        "output_tokens": 146,
        "time": 5.281086542000139,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date",
        "final_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;",
        "input_tokens": 2039,
        "output_tokens": 181,
        "time": 6.71735337500013,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings GROUP BY player_id ORDER BY COUNT(*) DESC LIMIT 1)",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id ORDER BY COUNT(r.tours) DESC LIMIT 1;",
        "input_tokens": 1953,
        "output_tokens": 212,
        "time": 7.0242110419999335,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.tours) DESC LIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "input_tokens": 2065,
        "output_tokens": 305,
        "time": 9.891894625000077,
        "question": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1837,
        "output_tokens": 167,
        "time": 5.89579058299978,
        "question": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1847,
        "output_tokens": 217,
        "time": 7.640751792000174,
        "question": "Which year had the most matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name, p.winner_rank_points\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nGROUP BY p.player_id\nHAVING COUNT(*) = (\n    SELECT MAX(win_count)\n    FROM (\n        SELECT winner_id, COUNT(*) as win_count\n        FROM matches\n        GROUP BY winner_id\n    ) AS subquery\n)",
        "final_sql": "SELECT p.first_name, p.last_name, p.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id HAVING COUNT(*) = (   SELECT MAX(win_count)   FROM (     SELECT winner_id, COUNT(*) as win_count     FROM matches     GROUP BY winner_id   ) AS subquery )",
        "input_tokens": 2131,
        "output_tokens": 370,
        "time": 11.22385470900008,
        "question": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT winner_name, MAX(winner_rank_points) FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1862,
        "output_tokens": 193,
        "time": 7.021301875000063,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "final_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "input_tokens": 1935,
        "output_tokens": 213,
        "time": 7.5373591659999875,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1",
        "final_sql": "SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;",
        "input_tokens": 2096,
        "output_tokens": 268,
        "time": 8.355201957999725,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p1.first_name || ' ' || p1.last_name AS loser_name, p2.first_name || ' ' || p2.last_name AS winner_name\nFROM matches AS m\nJOIN players AS p1 ON m.loser_id = p1.player_id\nJOIN players AS p2 ON m.winner_id = p2.player_id\nWHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "final_sql": "SELECT p1.first_name || ' ' || p1.last_name AS loser_name, p2.first_name || ' ' || p2.last_name AS winner_name FROM matches AS m JOIN players AS p1 ON m.loser_id = p1.player_id JOIN players AS p2 ON m.winner_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "input_tokens": 2122,
        "output_tokens": 307,
        "time": 9.58483225000009,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "final_sql": "SELECT winner_name, loser_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches)",
        "input_tokens": 1867,
        "output_tokens": 183,
        "time": 7.427999625000211,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(ranking) ,  first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY first_name",
        "final_sql": "SELECT AVG(ranking) , first_name FROM rankings JOIN players ON rankings.player_id = players.player_id GROUP BY players.player_id, players.first_name",
        "input_tokens": 1819,
        "output_tokens": 209,
        "time": 7.433882040999833,
        "question": "Find the average ranking for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "final_sql": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "input_tokens": 1803,
        "output_tokens": 152,
        "time": 6.923139291000098,
        "question": "What are the first names of all players, and their average rankings?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points\nFROM players\nJOIN rankings ON players.player_id = rankings.player_id\nGROUP BY players.player_id, players.first_name",
        "final_sql": "SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name",
        "input_tokens": 1832,
        "output_tokens": 204,
        "time": 8.047423250000065,
        "question": "Find the total ranking points for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, first_name",
        "final_sql": "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "input_tokens": 1843,
        "output_tokens": 186,
        "time": 6.626512166000339,
        "question": "What are the first names of all players, and their total ranking points?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "final_sql": "SELECT country_code, COUNT(*) AS num_players FROM players GROUP BY country_code;",
        "input_tokens": 1706,
        "output_tokens": 120,
        "time": 5.079927417000363,
        "question": "find the number of players for each country.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code;",
        "final_sql": "SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;",
        "input_tokens": 1774,
        "output_tokens": 127,
        "time": 5.179761834000146,
        "question": "How many players are from each country?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1971,
        "output_tokens": 228,
        "time": 8.660662499999944,
        "question": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1849,
        "output_tokens": 154,
        "time": 5.600911125000039,
        "question": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "input_tokens": 1864,
        "output_tokens": 136,
        "time": 5.484470707999662,
        "question": "Find the codes of countries that have more than 50 players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "input_tokens": 1763,
        "output_tokens": 138,
        "time": 5.183946333000222,
        "question": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date",
        "final_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1766,
        "output_tokens": 164,
        "time": 5.997393333000218,
        "question": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date",
        "final_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1728,
        "output_tokens": 140,
        "time": 5.183695790999991,
        "question": "How many total tours were there for each ranking date?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT year, count(*) FROM matches GROUP BY year",
        "final_sql": "SELECT year, count(*) FROM matches GROUP BY year",
        "input_tokens": 1710,
        "output_tokens": 123,
        "time": 5.690551415999835,
        "question": "Find the number of matches happened in each year.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "final_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "input_tokens": 1814,
        "output_tokens": 155,
        "time": 6.103585250000378,
        "question": "How many matches were played in each year?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
        "final_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
        "input_tokens": 1949,
        "output_tokens": 169,
        "time": 6.40335554100011,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
        "final_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3",
        "input_tokens": 1884,
        "output_tokens": 160,
        "time": 5.830592667000019,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'",
        "final_sql": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'left'",
        "input_tokens": 1938,
        "output_tokens": 254,
        "time": 8.149285292000059,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name = 'WTA Championships'",
        "final_sql": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name = 'WTA Championships'",
        "input_tokens": 1944,
        "output_tokens": 261,
        "time": 8.761664707999898,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "final_sql": "SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "input_tokens": 1975,
        "output_tokens": 262,
        "time": 8.45698533299992,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nORDER BY T2.winner_rank_points DESC\nLIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;",
        "input_tokens": 2128,
        "output_tokens": 298,
        "time": 10.60908712499986,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) , hand FROM players GROUP BY hand",
        "final_sql": "SELECT COUNT(*) , hand FROM players GROUP BY hand;",
        "input_tokens": 1796,
        "output_tokens": 163,
        "time": 6.102532792000147,
        "question": "Find the number of players for each hand type.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT hand, count(*) FROM players GROUP BY hand",
        "final_sql": "SELECT hand, count(*) FROM players GROUP BY hand;",
        "input_tokens": 1702,
        "output_tokens": 120,
        "time": 4.765562375000172,
        "question": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "final_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "input_tokens": 1195,
        "output_tokens": 96,
        "time": 4.464297458000146,
        "question": "How many ships ended up being 'Captured'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
        "baseline_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC",
        "final_sql": "SELECT name, tonnage FROM ship ORDER BY name ASC, tonnage ASC",
        "input_tokens": 1198,
        "output_tokens": 84,
        "time": 4.156817417000184,
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
        "baseline_sql": "SELECT name, date, result FROM battle;",
        "final_sql": "SELECT name, date, result FROM battle;",
        "input_tokens": 1292,
        "output_tokens": 100,
        "time": 4.361679457999799,
        "question": "List the name, date and result of each battle.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  date FROM battle"
    },
    {
        "baseline_sql": "SELECT MAX(death_toll) AS maximum_death_toll, MIN(death_toll) AS minimum_death_toll FROM battle",
        "final_sql": "SELECT MAX(killed) AS maximum_death_toll, MIN(killed) AS minimum_death_toll FROM death",
        "input_tokens": 1191,
        "output_tokens": 81,
        "time": 3.84679025000014,
        "question": "What is maximum and minimum death toll caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT max(killed) ,  min(killed) FROM death"
    },
    {
        "baseline_sql": "SELECT avg(injured) FROM death",
        "final_sql": "SELECT avg(injured) FROM death",
        "input_tokens": 1109,
        "output_tokens": 43,
        "time": 6.7168612909999865,
        "question": "What is the average number of injuries caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT avg(injured) FROM death"
    },
    {
        "baseline_sql": "SELECT note, killed, injured FROM death WHERE caused_by_ship_id IN (SELECT id FROM ship WHERE tonnage = 't')",
        "final_sql": "SELECT d.note, d.killed, d.injured FROM death d JOIN ship s ON d.caused_by_ship_id = s.id WHERE s.tonnage = 't'",
        "input_tokens": 1509,
        "output_tokens": 270,
        "time": 8.659240375000081,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    {
        "baseline_sql": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
        "final_sql": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
        "input_tokens": 1514,
        "output_tokens": 160,
        "time": 5.694062582999777,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
        "baseline_sql": "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
        "final_sql": "SELECT DISTINCT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig'",
        "input_tokens": 1477,
        "output_tokens": 256,
        "time": 7.843308250000064,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "gold_query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
        "baseline_sql": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
        "final_sql": "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;",
        "input_tokens": 1497,
        "output_tokens": 245,
        "time": 9.583220416000131,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    {
        "baseline_sql": "SELECT caused_by_ship_id, name FROM ship JOIN (SELECT caused_by_ship_id, SUM(injured) AS total_injuries FROM death GROUP BY caused_by_ship_id ORDER BY total_injuries DESC LIMIT 1) AS T ON ship.id = T.caused_by_ship_id;",
        "final_sql": "SELECT ship.id, ship.name FROM ship JOIN (   SELECT caused_by_ship_id, SUM(injured) AS total_injuries   FROM death   GROUP BY caused_by_ship_id   ORDER BY total_injuries DESC   LIMIT 1 ) AS T ON ship.id = T.caused_by_ship_id;",
        "input_tokens": 1617,
        "output_tokens": 389,
        "time": 12.21373370900028,
        "question": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "gold_query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "final_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "input_tokens": 1561,
        "output_tokens": 281,
        "time": 8.59280870800012,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "gold_query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT result) FROM battle",
        "final_sql": "SELECT COUNT(DISTINCT result) FROM battle;",
        "input_tokens": 1169,
        "output_tokens": 69,
        "time": 4.259227250000549,
        "question": "How many different results are there for the battles?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(DISTINCT RESULT) FROM battle"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "final_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "input_tokens": 1401,
        "output_tokens": 220,
        "time": 7.841492124999604,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    {
        "baseline_sql": "SELECT b.name, b.date\nFROM battle b\nJOIN ship s ON b.id = s.lost_in_battle\nWHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta'",
        "final_sql": "SELECT b.name, b.date FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.name = 'Lettice' OR s.name = 'HMS Atalanta'",
        "input_tokens": 1656,
        "output_tokens": 274,
        "time": 8.966581499999847,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
    },
    {
        "baseline_sql": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle AS b\nLEFT JOIN ship AS s ON b.id = s.lost_in_battle\nWHERE s.id IS NULL\nAND b.location = 'English Channel'",
        "final_sql": "SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.id IS NULL AND b.location = 'English Channel'",
        "input_tokens": 1558,
        "output_tokens": 286,
        "time": 8.870186708999427,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    {
        "baseline_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "final_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "input_tokens": 1248,
        "output_tokens": 125,
        "time": 4.666708333000315,
        "question": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "gold_query": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "baseline_sql": "SELECT line_1, line_2 FROM Addresses",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2833,
        "output_tokens": 62,
        "time": 3.7479565000003277,
        "question": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT line_1, line_2 FROM Addresses",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2795,
        "output_tokens": 62,
        "time": 3.7465242500002205,
        "question": "What is the first and second line for all addresses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Courses",
        "final_sql": "SELECT COUNT(*) FROM Courses;",
        "input_tokens": 2827,
        "output_tokens": 100,
        "time": 5.283217541999875,
        "question": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Courses",
        "final_sql": "SELECT count(*) FROM Courses;",
        "input_tokens": 2742,
        "output_tokens": 57,
        "time": 4.1571435830001064,
        "question": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
        "input_tokens": 2925,
        "output_tokens": 133,
        "time": 5.592486833000294,
        "question": "How is the math course described?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "input_tokens": 2902,
        "output_tokens": 126,
        "time": 4.834571834000599,
        "question": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "input_tokens": 2884,
        "output_tokens": 122,
        "time": 5.055632250000599,
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\";",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\";",
        "input_tokens": 2868,
        "output_tokens": 118,
        "time": 5.8510197089999565,
        "question": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT D.department_name, D.department_id FROM Departments AS D JOIN Degree_Programs AS DP ON D.department_id = DP.department_id GROUP BY D.department_name, D.department_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3176,
        "output_tokens": 284,
        "time": 8.76479504100007,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT department_id, COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id)))",
        "final_sql": "SELECT department_name, department_id FROM Departments WHERE department_id IN (   SELECT department_id   FROM Degree_Programs   GROUP BY department_id   HAVING COUNT(*) = (     SELECT MAX(degree_count)     FROM (       SELECT department_id, COUNT(*) AS degree_count       FROM Degree_Programs       GROUP BY department_id     )   ) )",
        "input_tokens": 3179,
        "output_tokens": 285,
        "time": 9.3374798750001,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT department_id) FROM degree_programs",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "input_tokens": 2809,
        "output_tokens": 103,
        "time": 5.016010542000004,
        "question": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Departments",
        "input_tokens": 2779,
        "output_tokens": 72,
        "time": 3.847114208999301,
        "question": "How many different departments offer degrees?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT degree_name) FROM degree_programs",
        "final_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "input_tokens": 2748,
        "output_tokens": 57,
        "time": 3.58891124999991,
        "question": "How many different degree names are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT degree_name) FROM degree_program",
        "final_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "input_tokens": 2785,
        "output_tokens": 87,
        "time": 4.159608458000548,
        "question": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM degree_program WHERE dept_name = 'Engineering'",
        "final_sql": "SELECT count(*) FROM Departments WHERE department_name = 'Engineering'",
        "input_tokens": 2846,
        "output_tokens": 118,
        "time": 4.459821874999761,
        "question": "How many degrees does the engineering department offer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM degree_program WHERE dept_name = 'Engineering'",
        "final_sql": "SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
        "input_tokens": 2808,
        "output_tokens": 98,
        "time": 4.7725611250007205,
        "question": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT section_name, section_description FROM Sections",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2740,
        "output_tokens": 42,
        "time": 2.8200694580000345,
        "question": "What are the names and descriptions of all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT section_name, section_description FROM Sections",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2749,
        "output_tokens": 42,
        "time": 3.5426287919999595,
        "question": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2)",
        "final_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id           FROM Sections           GROUP BY course_id           HAVING COUNT(*) <= 2)",
        "input_tokens": 3155,
        "output_tokens": 289,
        "time": 9.68574024999998,
        "question": "What are the names and id of courses having at most 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2)",
        "final_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) < 2)",
        "input_tokens": 3182,
        "output_tokens": 306,
        "time": 9.582490249999864,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "input_tokens": 2818,
        "output_tokens": 96,
        "time": 4.670185542000581,
        "question": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "input_tokens": 2862,
        "output_tokens": 121,
        "time": 5.0775134589994195,
        "question": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.semester_name, T1.semester_id FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3224,
        "output_tokens": 306,
        "time": 10.094567582999844,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T2.semester_name ,  T2.semester_id FROM student_enrollment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT S.semester_name, S.semester_id FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3220,
        "output_tokens": 271,
        "time": 8.356079875000432,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "input_tokens": 2914,
        "output_tokens": 95,
        "time": 4.563527125000292,
        "question": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
        "input_tokens": 2859,
        "output_tokens": 95,
        "time": 4.477132499999243,
        "question": "What is the department description for the one whose name has the word computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nGROUP BY S.student_id\nHAVING COUNT(DISTINCT SE.degree_program_id) = 2\nAND COUNT(DISTINCT SE.semester_id) = 1;",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id WHERE SE.degree_program_id IN (   SELECT degree_program_id   FROM Student_Enrolment   GROUP BY student_id   HAVING COUNT(DISTINCT degree_program_id) = 2 ) AND SE.semester_id IN (   SELECT semester_id   FROM Student_Enrolment   GROUP BY student_id   HAVING COUNT(DISTINCT semester_id) = 1 );",
        "input_tokens": 3366,
        "output_tokens": 448,
        "time": 12.589486333999957,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id\nWHERE SE.semester_id IN (\n    SELECT semester_id\n    FROM Student_Enrolment\n    GROUP BY student_id, semester_id\n    HAVING COUNT(DISTINCT degree_program_id) = 2\n)",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE SE.semester_id IN (   SELECT semester_id   FROM Student_Enrolment   GROUP BY student_id, semester_id   HAVING COUNT(DISTINCT degree_program_id) = 2 )",
        "input_tokens": 3490,
        "output_tokens": 484,
        "time": 13.542192207999506,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%'))",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name LIKE '%Bachelor%'   ) )",
        "input_tokens": 3296,
        "output_tokens": 325,
        "time": 9.984980207999797,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id\nWHERE DP.degree_summary_name = 'Bachelors'",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id WHERE DP.degree_summary_name = 'Bachelors'",
        "input_tokens": 3266,
        "output_tokens": 345,
        "time": 9.99254641600055,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT T1.program_kind FROM program AS T1 JOIN enrolled_in AS T2 ON T1.program_id  =  T2.program_id GROUP BY T2.program_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id GROUP BY D.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3181,
        "output_tokens": 311,
        "time": 9.788460333999865,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Departments AS T3 ON T2.department_id = T3.department_id GROUP BY T3.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Departments AS T3 ON T2.department_id = T3.department_id GROUP BY T3.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3327,
        "output_tokens": 369,
        "time": 11.630444124999485,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3210,
        "output_tokens": 314,
        "time": 9.382547958000032,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_description FROM degree_program AS T1 JOIN student_enrollment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.degree_program_id, T1.degree_summary_description FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T2.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3273,
        "output_tokens": 331,
        "time": 9.886063625000133,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1;",
        "final_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3379,
        "output_tokens": 382,
        "time": 11.432782417000453,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS num_enrollments\nFROM Students AS T1\nJOIN Student_Enrollment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3357,
        "output_tokens": 377,
        "time": 11.725939332999587,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);",
        "input_tokens": 3056,
        "output_tokens": 197,
        "time": 7.638746833999903,
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "input_tokens": 3121,
        "output_tokens": 197,
        "time": 7.737207916000443,
        "question": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id",
        "final_sql": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;",
        "input_tokens": 3006,
        "output_tokens": 161,
        "time": 6.4085661669996625,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)",
        "final_sql": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)",
        "input_tokens": 3074,
        "output_tokens": 202,
        "time": 6.866168083000048,
        "question": "What are the names of all courses that have some students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 3252,
        "output_tokens": 301,
        "time": 9.53582174999974,
        "question": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3248,
        "output_tokens": 297,
        "time": 9.276624166999682,
        "question": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "final_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "input_tokens": 3137,
        "output_tokens": 244,
        "time": 7.945954165999865,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = \"North Carolina\") AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "final_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = \"North Carolina\") AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "input_tokens": 3145,
        "output_tokens": 244,
        "time": 8.14839820799989,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date, T1.transcript_id HAVING COUNT(*) >= 2",
        "input_tokens": 3201,
        "output_tokens": 284,
        "time": 9.172263874999771,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T.transcript_id, T.transcript_date FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(*) >= 2;",
        "final_sql": "SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(*) >= 2;",
        "input_tokens": 3195,
        "output_tokens": 322,
        "time": 9.48274875000061,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "final_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "input_tokens": 3024,
        "output_tokens": 190,
        "time": 6.334987208999337,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    {
        "baseline_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "final_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "input_tokens": 2977,
        "output_tokens": 170,
        "time": 6.240960084000108,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "input_tokens": 3001,
        "output_tokens": 157,
        "time": 5.60108874999969,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "input_tokens": 3192,
        "output_tokens": 268,
        "time": 8.427050582999982,
        "question": "What is the first, middle, and last name of the first student to register?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1;",
        "input_tokens": 3094,
        "output_tokens": 189,
        "time": 6.332341334000375,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "input_tokens": 3137,
        "output_tokens": 267,
        "time": 8.375544125000488,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.line_1 <> T3.line_1 OR T2.line_2 <> T3.line_2 OR T2.line_3 <> T3.line_3 OR T2.city <> T3.city OR T2.zip_postcode <> T3.zip_postcode OR T2.state_province_county <> T3.state_province_county OR T2.country <> T3.country OR T2.other_address_details <> T3.other_address_details",
        "final_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id <> T3.address_id",
        "input_tokens": 3500,
        "output_tokens": 425,
        "time": 12.143365584000094,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "final_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;",
        "input_tokens": 2970,
        "output_tokens": 119,
        "time": 5.321669457999633,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3\nFROM Addresses AS T1\nJOIN Students AS T2 ON T1.address_id = T2.current_address_id\nGROUP BY T1.address_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id, T1.line_1, T1.line_2, T1.line_3 HAVING COUNT(*) = (   SELECT MAX(student_count)   FROM (     SELECT COUNT(*) AS student_count     FROM Addresses AS T3     JOIN Students AS T4 ON T3.address_id = T4.current_address_id     GROUP BY T3.address_id   ) )",
        "input_tokens": 3309,
        "output_tokens": 397,
        "time": 11.838795624999875,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 3157,
        "output_tokens": 265,
        "time": 7.94517737500064,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(transcript_date) FROM Transcripts",
        "final_sql": "SELECT AVG(transcript_date) FROM Transcripts",
        "input_tokens": 2850,
        "output_tokens": 78,
        "time": 3.5397005410004567,
        "question": "On average, when were the transcripts printed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "final_sql": "SELECT avg(transcript_date) FROM Transcripts;",
        "input_tokens": 2822,
        "output_tokens": 79,
        "time": 3.442358167000748,
        "question": "What is the average transcript date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "final_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
        "input_tokens": 2993,
        "output_tokens": 177,
        "time": 6.204718916999809,
        "question": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(transcript_date), other_details FROM Transcripts",
        "final_sql": "SELECT MIN(transcript_date), other_details FROM Transcripts;",
        "input_tokens": 2977,
        "output_tokens": 88,
        "time": 5.096449165999729,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Transcripts",
        "final_sql": "SELECT count(*) FROM Transcripts",
        "input_tokens": 2774,
        "output_tokens": 77,
        "time": 3.518756040999506,
        "question": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Transcripts",
        "final_sql": "SELECT count(*) FROM Transcripts;",
        "input_tokens": 2768,
        "output_tokens": 68,
        "time": 3.8464503330005755,
        "question": "How many transcripts are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT MAX(transcript_release_date) FROM Transcripts;",
        "final_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "input_tokens": 2808,
        "output_tokens": 72,
        "time": 4.361347416999706,
        "question": "What is the last transcript release date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "final_sql": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1",
        "input_tokens": 2987,
        "output_tokens": 218,
        "time": 7.742184083999746,
        "question": "When was the last transcript released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_course_id, COUNT(*) AS count FROM Student_Enrollment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1",
        "final_sql": "SELECT T1.student_course_id, COUNT(*) AS count FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1",
        "input_tokens": 3253,
        "output_tokens": 307,
        "time": 9.421660250000059,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_course_id, COUNT(*) AS num_transcripts\nFROM Student_Enrolment_Courses AS T1\nJOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id\nGROUP BY T1.student_course_id\nHAVING num_transcripts = (\n    SELECT MAX(num_transcripts)\n    FROM (\n        SELECT T1.student_course_id, COUNT(*) AS num_transcripts\n        FROM Student_Enrolment_Courses AS T1\n        JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id\n        GROUP BY T1.student_course_id\n    )\n)",
        "final_sql": "SELECT T1.course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id HAVING num_transcripts = (   SELECT MAX(num_transcripts)   FROM (     SELECT T1.course_id, COUNT(*) AS num_transcripts     FROM Student_Enrolment_Courses AS T1     JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id     GROUP BY T1.course_id   ) )",
        "input_tokens": 3565,
        "output_tokens": 558,
        "time": 15.465586708000046,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) ASC LIMIT 1",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 )",
        "input_tokens": 3223,
        "output_tokens": 321,
        "time": 9.182912833000046,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date FROM Transcripts \nWHERE transcript_id IN (\n    SELECT transcript_id FROM Transcript_Contents \n    GROUP BY transcript_id \n    ORDER BY count(*) ASC \n    LIMIT 1\n);",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 );",
        "input_tokens": 3126,
        "output_tokens": 290,
        "time": 8.865413042,
        "question": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id IN (   SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Master'   )   INTERSECT   SELECT semester_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name = 'Bachelor'   ) )",
        "input_tokens": 3308,
        "output_tokens": 460,
        "time": 13.066183332999572,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T3.degree_summary_name) = 2",
        "final_sql": "SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name IN ('Masters', 'Bachelors') GROUP BY T1.semester_id HAVING COUNT(DISTINCT T3.degree_summary_name) = 2;",
        "input_tokens": 3422,
        "output_tokens": 466,
        "time": 13.47084545800044,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "final_sql": "SELECT count(DISTINCT current_address_id) FROM Students;",
        "input_tokens": 2778,
        "output_tokens": 54,
        "time": 4.272743333000108,
        "question": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id",
        "final_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id;",
        "input_tokens": 3169,
        "output_tokens": 315,
        "time": 10.505598417000328,
        "question": "What are the different addresses that have students living there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "final_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "input_tokens": 2937,
        "output_tokens": 164,
        "time": 6.198522791999494,
        "question": "List all the student details in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT other_student_details FROM Students ORDER BY last_name DESC",
        "final_sql": "SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;",
        "input_tokens": 2911,
        "output_tokens": 233,
        "time": 7.438083041000027,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "final_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "input_tokens": 2773,
        "output_tokens": 76,
        "time": 4.460298333000537,
        "question": "Describe the section h.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "final_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "input_tokens": 2970,
        "output_tokens": 106,
        "time": 4.564889332999883,
        "question": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'",
        "final_sql": "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'",
        "input_tokens": 3266,
        "output_tokens": 258,
        "time": 8.7628069579996,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE country = \"Haiti\" OR cell_mobile_number = \"09700166582\"",
        "final_sql": "SELECT first_name FROM Students WHERE country = \"Haiti\" OR cell_mobile_number = \"09700166582\"",
        "input_tokens": 3292,
        "output_tokens": 246,
        "time": 7.739064249999501,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "input_tokens": 1366,
        "output_tokens": 121,
        "time": 5.2737438750000365,
        "question": "List the title of all cartoons in alphabetical order.",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "input_tokens": 1405,
        "output_tokens": 145,
        "time": 5.881354749999446,
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "input_tokens": 1432,
        "output_tokens": 130,
        "time": 5.18776245799927,
        "question": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones'",
        "input_tokens": 1448,
        "output_tokens": 112,
        "time": 4.556532958999924,
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "final_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "input_tokens": 1487,
        "output_tokens": 162,
        "time": 5.697115791000215,
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "final_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "input_tokens": 1410,
        "output_tokens": 113,
        "time": 4.661941999999726,
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title, Cartoon.Directed_by\nFROM Cartoon\nORDER BY Cartoon.Original_air_date;",
        "final_sql": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon ORDER BY Cartoon.Original_air_date;",
        "input_tokens": 1405,
        "output_tokens": 138,
        "time": 5.383056958000452,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
        "final_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
        "input_tokens": 1548,
        "output_tokens": 126,
        "time": 4.975516917000277,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';",
        "input_tokens": 1428,
        "output_tokens": 150,
        "time": 5.999873458000366,
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "input_tokens": 1509,
        "output_tokens": 140,
        "time": 5.84237475000009,
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;",
        "final_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;",
        "input_tokens": 1589,
        "output_tokens": 232,
        "time": 7.74126674999934,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1",
        "final_sql": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1",
        "input_tokens": 1472,
        "output_tokens": 168,
        "time": 6.201720707999812,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;",
        "final_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_series;",
        "input_tokens": 1453,
        "output_tokens": 177,
        "time": 6.2040301249999175,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "final_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;",
        "input_tokens": 1428,
        "output_tokens": 162,
        "time": 6.203177667000091,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "final_sql": "SELECT Content FROM TV_Channel WHERE id = \"Sky Radio\"",
        "input_tokens": 1480,
        "output_tokens": 128,
        "time": 4.9757768330000545,
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "final_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "input_tokens": 1357,
        "output_tokens": 76,
        "time": 3.965965416000472,
        "question": "What is the content of the series Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "input_tokens": 1488,
        "output_tokens": 121,
        "time": 5.056805250000252,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name  =  'Sky Radio'",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE id IN (   SELECT Channel   FROM TV_series   WHERE series_name = 'Sky Radio' )",
        "input_tokens": 1455,
        "output_tokens": 140,
        "time": 5.590220875000341,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "final_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "input_tokens": 1376,
        "output_tokens": 105,
        "time": 4.664767334000317,
        "question": "How many TV Channel using language English?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM TV_Channel WHERE Language = \"English\";",
        "final_sql": "SELECT count(*) FROM TV_Channel WHERE Language = \"English\";",
        "input_tokens": 1370,
        "output_tokens": 110,
        "time": 4.77272662499945,
        "question": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;",
        "final_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;",
        "input_tokens": 1548,
        "output_tokens": 186,
        "time": 6.513852791000318,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1",
        "final_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;",
        "input_tokens": 1585,
        "output_tokens": 216,
        "time": 6.920180707999862,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "final_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "input_tokens": 1417,
        "output_tokens": 119,
        "time": 4.766553166999984,
        "question": "List each language and the number of TV Channels using it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language",
        "final_sql": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language",
        "input_tokens": 1403,
        "output_tokens": 104,
        "time": 4.672498166999503,
        "question": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title  =  \"The Rise of the Blue Beetle!\")",
        "final_sql": "SELECT series_name FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Title = 'The Rise of the Blue Beetle!')",
        "input_tokens": 1517,
        "output_tokens": 157,
        "time": 6.202841874999649,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT T1.series_name FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.id = T2.id WHERE T2.Title = \"The Rise of the Blue Beetle\"",
        "final_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle\"",
        "input_tokens": 1547,
        "output_tokens": 157,
        "time": 5.9956960419995085,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.id = T2.id JOIN TV_Channel AS T3 ON T2.Channel = T3.id WHERE T3.series_name = \"Sky Radio\";",
        "final_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.id = T2.id JOIN TV_Channel AS T3 ON T2.Channel = T3.id WHERE T3.series_name = \"Sky Radio\";",
        "input_tokens": 1698,
        "output_tokens": 282,
        "time": 9.073349416999918,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\"",
        "final_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_series AS T2 ON T1.Channel = T2.Channel JOIN TV_Channel AS T3 ON T2.Channel = T3.id WHERE T3.series_name = \"Sky Radio\"",
        "input_tokens": 1639,
        "output_tokens": 254,
        "time": 8.350824084000124,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Episode FROM TV_series ORDER BY Rating ASC",
        "final_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "input_tokens": 1342,
        "output_tokens": 95,
        "time": 4.361938957999882,
        "question": "List the Episode of all TV series sorted by rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT * FROM TV_series ORDER BY Rating DESC;",
        "final_sql": "SELECT * FROM TV_series ORDER BY Rating DESC;",
        "input_tokens": 1379,
        "output_tokens": 98,
        "time": 4.46423195800071,
        "question": "What are all of the episodes ordered by ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "final_sql": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;",
        "input_tokens": 1561,
        "output_tokens": 211,
        "time": 7.1260637499999575,
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT \"Episode\", \"Rating\" FROM \"TV_series\" ORDER BY \"Rating\" DESC LIMIT 3",
        "final_sql": "SELECT \"Episode\", \"Rating\" FROM \"TV_series\" ORDER BY CAST(\"Rating\" AS REAL) DESC LIMIT 3;",
        "input_tokens": 1556,
        "output_tokens": 155,
        "time": 6.199330917000225,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT min(Share), max(Share) FROM TV_series",
        "final_sql": "SELECT MIN(Share), MAX(Share) FROM TV_series;",
        "input_tokens": 1381,
        "output_tokens": 74,
        "time": 3.851075999999921,
        "question": "What is minimum and maximum share of TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT max(Share), min(Share) FROM TV_series",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM TV_series;",
        "input_tokens": 1360,
        "output_tokens": 50,
        "time": 3.2330917919998683,
        "question": "What is the maximum and minimum share for the TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE id IN (SELECT id FROM Cartoon WHERE Title = \"A Love of a Lifetime\");",
        "input_tokens": 1519,
        "output_tokens": 140,
        "time": 605.7845799159995,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1396,
        "output_tokens": 118,
        "time": 4.943133957999635,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';",
        "input_tokens": 1535,
        "output_tokens": 177,
        "time": 6.817180167000515,
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "input_tokens": 1478,
        "output_tokens": 126,
        "time": 5.693709374999344,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = \"A Love of a Lifetime\"",
        "final_sql": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = \"A Love of a Lifetime\"",
        "input_tokens": 1702,
        "output_tokens": 261,
        "time": 8.560677874999783,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT series_name FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "final_sql": "SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = \"A Love of a Lifetime\"",
        "input_tokens": 1480,
        "output_tokens": 128,
        "time": 5.179750500000409,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")",
        "final_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")",
        "input_tokens": 1512,
        "output_tokens": 198,
        "time": 6.922478417000093,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Episode FROM TV_series WHERE Channel = \"Sky Radio\"",
        "final_sql": "SELECT Episode FROM TV_series WHERE Channel = \"Sky Radio\"",
        "input_tokens": 1442,
        "output_tokens": 116,
        "time": 5.177245249999942,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT count(*) ,  Directed_by FROM Cartoon GROUP BY Directed_by",
        "final_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by;",
        "input_tokens": 1406,
        "output_tokens": 127,
        "time": 5.692522667000048,
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by",
        "final_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by",
        "input_tokens": 1364,
        "output_tokens": 128,
        "time": 5.684380040999713,
        "question": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY strftime('%Y-%m-%d', Original_air_date) DESC LIMIT 1",
        "input_tokens": 1762,
        "output_tokens": 350,
        "time": 10.613328540999646,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT MAX(Original_air_date) FROM Cartoon)",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",
        "input_tokens": 1436,
        "output_tokens": 123,
        "time": 5.6892555829999765,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name \nFROM TV_Channel \nWHERE TV_Channel.Hight_definition_TV = \"Yes\"",
        "final_sql": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = \"Yes\"",
        "input_tokens": 1591,
        "output_tokens": 121,
        "time": 4.972007667000071,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_series.series_name\nFROM TV_Channel\nJOIN TV_series ON TV_Channel.id = TV_series.Channel\nWHERE TV_Channel.Hight_definition_TV = 'Yes'",
        "final_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel WHERE TV_Channel.Hight_definition_TV = 'Yes'",
        "input_tokens": 1642,
        "output_tokens": 193,
        "time": 6.45669695900051,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel FROM Cartoon WHERE Written_by = \"Todd Casey\")",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id IN (SELECT Channel        FROM Cartoon        WHERE Written_by = \"Todd Casey\")",
        "input_tokens": 1644,
        "output_tokens": 211,
        "time": 7.230495166000765,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'",
        "final_sql": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'",
        "input_tokens": 1638,
        "output_tokens": 237,
        "time": 7.737695834000078,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT T1.Country\nFROM TV_Channel AS T1\nLEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel\nWHERE T2.Written_by <> \"Todd Casey\" OR T2.Written_by IS NULL",
        "final_sql": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> \"Todd Casey\" OR T2.Written_by IS NULL AND T2.id IS NULL;",
        "input_tokens": 1787,
        "output_tokens": 311,
        "time": 10.304116541999974,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "input_tokens": 1496,
        "output_tokens": 175,
        "time": 6.308161625000139,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT T1.series_name, T1.Country FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" AND T2.Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Michael Chang\")",
        "final_sql": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" AND T2.Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Michael Chang\")",
        "input_tokens": 1801,
        "output_tokens": 264,
        "time": 8.661208624999745,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" OR T2.Directed_by = \"Michael Chang\";",
        "final_sql": "SELECT T2.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" OR T2.Directed_by = \"Michael Chang\";",
        "input_tokens": 1692,
        "output_tokens": 279,
        "time": 8.762183292000373,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "input_tokens": 1465,
        "output_tokens": 126,
        "time": 5.284004709000328,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "input_tokens": 1501,
        "output_tokens": 102,
        "time": 4.7690267919997495,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) AS T2 ON T1.Country = T2.Country",
        "final_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country, COUNT(*) AS num_channels    FROM TV_Channel    GROUP BY Country    HAVING COUNT(*) > 2) AS T2 ON T1.Country = T2.Country;",
        "input_tokens": 1837,
        "output_tokens": 345,
        "time": 10.616381208000348,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
        "final_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
        "input_tokens": 1517,
        "output_tokens": 163,
        "time": 5.995108583000729,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT T1.id FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' AND T2.Directed_by IS NOT NULL GROUP BY T1.id HAVING COUNT(T2.id) = 0;",
        "final_sql": "SELECT T1.id FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' GROUP BY T1.id HAVING COUNT(T2.id) = 0;",
        "input_tokens": 1892,
        "output_tokens": 369,
        "time": 11.224358291000499,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "final_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "input_tokens": 1577,
        "output_tokens": 170,
        "time": 6.407611124999676,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by != 'Ben Jones' OR T2.Directed_by IS NULL",
        "final_sql": "SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by != 'Ben Jones' OR T2.Directed_by IS NULL;",
        "input_tokens": 1753,
        "output_tokens": 274,
        "time": 8.764423540999815,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE id NOT IN (   SELECT Channel   FROM Cartoon   WHERE Directed_by = 'Ben Jones' )",
        "input_tokens": 1713,
        "output_tokens": 187,
        "time": 6.615305166000326,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT count(*) FROM poker_player",
        "final_sql": "SELECT count(*) FROM poker_player",
        "input_tokens": 946,
        "output_tokens": 72,
        "time": 4.054610915999547,
        "question": "How many poker players are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT count(*) FROM poker_player",
        "final_sql": "SELECT COUNT(*) FROM poker_player;",
        "input_tokens": 961,
        "output_tokens": 73,
        "time": 3.845596499999374,
        "question": "Count the number of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "input_tokens": 1167,
        "output_tokens": 205,
        "time": 7.434785500000544,
        "question": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "input_tokens": 1109,
        "output_tokens": 155,
        "time": 6.103002333000404,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "final_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "input_tokens": 1070,
        "output_tokens": 71,
        "time": 3.8474479590004194,
        "question": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "final_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "input_tokens": 1055,
        "output_tokens": 71,
        "time": 4.057315207999636,
        "question": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT avg(Earnings) FROM poker_player",
        "final_sql": "SELECT avg(Earnings) FROM poker_player;",
        "input_tokens": 984,
        "output_tokens": 73,
        "time": 4.0433278330001485,
        "question": "What is the average earnings of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT avg(Earnings) FROM poker_player",
        "final_sql": "SELECT avg(Earnings) FROM poker_player;",
        "input_tokens": 950,
        "output_tokens": 50,
        "time": 3.5375421669996285,
        "question": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player)",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player) ORDER BY Money_Rank DESC LIMIT 1;",
        "input_tokens": 1133,
        "output_tokens": 150,
        "time": 5.620969083000091,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "input_tokens": 1202,
        "output_tokens": 184,
        "time": 6.406426874999852,
        "question": "Return the money rank of the player with the greatest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "final_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1154,
        "output_tokens": 152,
        "time": 606.8061969580003,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "final_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1200,
        "output_tokens": 153,
        "time": 6.09937033299957,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "input_tokens": 1150,
        "output_tokens": 189,
        "time": 9.479458875000091,
        "question": "What are the names of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)",
        "final_sql": "SELECT Name FROM people WHERE People_ID IN (SELECT People_ID FROM poker_player)",
        "input_tokens": 1162,
        "output_tokens": 170,
        "time": 6.5115710000000036,
        "question": "Return the names of all the poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Earnings > 300000;",
        "input_tokens": 1242,
        "output_tokens": 226,
        "time": 7.8252791249997244,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000",
        "final_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;",
        "input_tokens": 1248,
        "output_tokens": 215,
        "time": 6.924011874999451,
        "question": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.Final_Table_Made ASC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
        "input_tokens": 1161,
        "output_tokens": 203,
        "time": 6.723654999999781,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
        "input_tokens": 1337,
        "output_tokens": 267,
        "time": 8.34486250000009,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT Birth_Date FROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nORDER BY Earnings ASC LIMIT 1",
        "final_sql": "SELECT people.Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY poker_player.Earnings ASC LIMIT 1",
        "input_tokens": 1217,
        "output_tokens": 219,
        "time": 7.739946458000304,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings ASC LIMIT 1",
        "final_sql": "SELECT Birth_Date FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY Earnings ASC LIMIT 1",
        "input_tokens": 1291,
        "output_tokens": 271,
        "time": 8.661771000000044,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player \nJOIN people ON poker_player.People_ID = people.People_ID \nORDER BY Height DESC LIMIT 1",
        "final_sql": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1",
        "input_tokens": 1184,
        "output_tokens": 232,
        "time": 7.77457504099948,
        "question": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.\"Money_Rank\" \nFROM poker_player p \nJOIN people pe ON p.\"People_ID\" = pe.\"People_ID\" \nORDER BY pe.\"Height\" DESC \nLIMIT 1",
        "final_sql": "SELECT p.\"Money_Rank\" FROM poker_player p JOIN people pe ON p.\"People_ID\" = pe.\"People_ID\" ORDER BY pe.\"Height\" DESC LIMIT 1",
        "input_tokens": 1241,
        "output_tokens": 258,
        "time": 8.184902625000177,
        "question": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200;",
        "input_tokens": 1266,
        "output_tokens": 243,
        "time": 7.633403542000451,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player INNER JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;",
        "input_tokens": 1262,
        "output_tokens": 237,
        "time": 7.60667283300063,
        "question": "Give average earnings of poker players who are taller than 200.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
        "input_tokens": 1275,
        "output_tokens": 252,
        "time": 8.253949416999603,
        "question": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT p.Name \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.Earnings DESC",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC",
        "input_tokens": 1134,
        "output_tokens": 186,
        "time": 6.71243316699929,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
        "final_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "input_tokens": 1097,
        "output_tokens": 137,
        "time": 5.28248262499983,
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT nationality, count(*) FROM people GROUP BY nationality",
        "final_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality;",
        "input_tokens": 1093,
        "output_tokens": 161,
        "time": 5.796628582999801,
        "question": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Nationality FROM people WHERE Nationality IS NOT NULL GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1080,
        "output_tokens": 135,
        "time": 5.386571207999623,
        "question": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1185,
        "output_tokens": 160,
        "time": 5.794192917000146,
        "question": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "input_tokens": 1257,
        "output_tokens": 185,
        "time": 6.508657792000122,
        "question": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "input_tokens": 1211,
        "output_tokens": 169,
        "time": 6.204437459000474,
        "question": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
        "input_tokens": 1210,
        "output_tokens": 219,
        "time": 7.4334597499992014,
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
        "input_tokens": 1112,
        "output_tokens": 131,
        "time": 5.106660292000015,
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "final_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "input_tokens": 1101,
        "output_tokens": 122,
        "time": 4.844942332999381,
        "question": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "final_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "input_tokens": 1126,
        "output_tokens": 120,
        "time": 4.463695249999546,
        "question": "What are the names of people who are not from Russia?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "final_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "input_tokens": 1144,
        "output_tokens": 172,
        "time": 7.125910458999897,
        "question": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM people AS T2 LEFT JOIN poker_player AS T1 ON T2.People_ID = T1.People_ID WHERE T1.Poker_Player_ID IS NULL",
        "final_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "input_tokens": 1383,
        "output_tokens": 268,
        "time": 9.687956166000731,
        "question": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM people;",
        "input_tokens": 961,
        "output_tokens": 76,
        "time": 3.8389309590002085,
        "question": "How many distinct nationalities are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM people;",
        "input_tokens": 956,
        "output_tokens": 76,
        "time": 3.8518242079999254,
        "question": "Count the number of different nationalities.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT count(*) FROM AREA_CODE_STATE",
        "final_sql": "SELECT count(*) FROM AREA_CODE_STATE;",
        "input_tokens": 1016,
        "output_tokens": 75,
        "time": 5.179188332999729,
        "question": "How many states are there?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
        "input_tokens": 1158,
        "output_tokens": 132,
        "time": 5.380245875000583,
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "baseline_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
        "final_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
        "input_tokens": 1110,
        "output_tokens": 92,
        "time": 4.668013000000428,
        "question": "List the vote ids, phone numbers and states of all votes.",
        "db_id": "voter_1",
        "gold_query": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    {
        "baseline_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE",
        "final_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;",
        "input_tokens": 1050,
        "output_tokens": 72,
        "time": 3.851907375000337,
        "question": "What are the maximum and minimum values of area codes?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "final_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "input_tokens": 1274,
        "output_tokens": 176,
        "time": 6.304191625000385,
        "question": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
        "input_tokens": 1497,
        "output_tokens": 189,
        "time": 609.261141125,
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    {
        "baseline_sql": "SELECT DISTINCT state, created FROM VOTES",
        "final_sql": "SELECT DISTINCT state, created FROM VOTES;",
        "input_tokens": 1124,
        "output_tokens": 115,
        "time": 5.073963125000773,
        "question": "What are the distinct states and create time of all votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT DISTINCT state ,  created FROM votes"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(*) >= 2 )",
        "input_tokens": 1500,
        "output_tokens": 320,
        "time": 10.60532554099973,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(vote_count) FROM (SELECT contestant_number, COUNT(*) as vote_count FROM VOTES GROUP BY contestant_number)))",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(*) = (     SELECT MIN(vote_count)     FROM (       SELECT contestant_number, COUNT(*) as vote_count       FROM VOTES       GROUP BY contestant_number     )   ) )",
        "input_tokens": 1531,
        "output_tokens": 342,
        "time": 10.194267459000002,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "final_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "input_tokens": 1134,
        "output_tokens": 120,
        "time": 4.872547665999264,
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "final_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "input_tokens": 1184,
        "output_tokens": 165,
        "time": 6.5118832499993005,
        "question": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
    },
    {
        "baseline_sql": "SELECT area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (   SELECT state   FROM VOTES   GROUP BY state   ORDER BY COUNT(*) DESC   LIMIT 1 )",
        "input_tokens": 1303,
        "output_tokens": 234,
        "time": 8.048708541999986,
        "question": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT created, state, phone_number FROM VOTES WHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')",
        "final_sql": "SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling'",
        "input_tokens": 1428,
        "output_tokens": 222,
        "time": 7.326776916999734,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "gold_query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    {
        "baseline_sql": "SELECT area_code\nFROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')\nINTERSECT\nSELECT area_code\nFROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')",
        "final_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (   SELECT state   FROM VOTES   JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' ) AND area_code IN (   SELECT state   FROM VOTES   JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Kelly Clauss' )",
        "input_tokens": 1474,
        "output_tokens": 367,
        "time": 11.01876912500029,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "gold_query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    {
        "baseline_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "input_tokens": 1153,
        "output_tokens": 92,
        "time": 4.6650684169999295,
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "db_id": "voter_1",
        "gold_query": "select contestant_name from contestants where contestant_name like \"%al%\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950 AND IndepYear <> 1950;",
        "input_tokens": 1524,
        "output_tokens": 172,
        "time": 6.208178124999904,
        "question": "What are the names of all the countries that became independent after 1950?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "input_tokens": 1589,
        "output_tokens": 216,
        "time": 7.635884457999964,
        "question": "Give the names of the nations that were founded after 1950.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "final_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "input_tokens": 1399,
        "output_tokens": 113,
        "time": 4.976750290999917,
        "question": "How many countries have a republic as their form of government?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "final_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "input_tokens": 1437,
        "output_tokens": 156,
        "time": 6.305325874999653,
        "question": "How many countries have governments that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "final_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "input_tokens": 1380,
        "output_tokens": 93,
        "time": 4.258727624999665,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Caribbean\";",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Caribbean\";",
        "input_tokens": 1390,
        "output_tokens": 126,
        "time": 5.280096874999799,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT Continent FROM country WHERE Name  =  'Anguilla'",
        "final_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "input_tokens": 1415,
        "output_tokens": 140,
        "time": 5.6362911659998645,
        "question": "Which continent is Anguilla in?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "final_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "input_tokens": 1455,
        "output_tokens": 120,
        "time": 4.875663707999593,
        "question": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT Region FROM city WHERE Name = \"Kabul\"",
        "final_sql": "SELECT c.Region FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.Name = \"Kabul\"",
        "input_tokens": 1420,
        "output_tokens": 134,
        "time": 5.380691667000065,
        "question": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT Region FROM country WHERE Capital = (SELECT ID FROM city WHERE Name = \"Kabul\")",
        "final_sql": "SELECT Region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = \"Kabul\")",
        "input_tokens": 1469,
        "output_tokens": 191,
        "time": 6.725136667000697,
        "question": "What region is Kabul in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T' ORDER BY Percentage DESC LIMIT 1",
        "input_tokens": 1576,
        "output_tokens": 239,
        "time": 7.635587875000056,
        "question": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "input_tokens": 1437,
        "output_tokens": 149,
        "time": 5.370005291999405,
        "question": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "input_tokens": 1347,
        "output_tokens": 96,
        "time": 4.66793454100025,
        "question": "What are the population and life expectancies in Brazil?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "input_tokens": 1397,
        "output_tokens": 98,
        "time": 4.869074375000309,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "input_tokens": 1431,
        "output_tokens": 86,
        "time": 4.060906916000022,
        "question": "What are the region and population of Angola?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "input_tokens": 1458,
        "output_tokens": 138,
        "time": 5.273420583000188,
        "question": "What region does Angola belong to and what is its population?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "final_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "input_tokens": 1425,
        "output_tokens": 132,
        "time": 5.279793250000694,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code IN (SELECT CountryCode FROM city WHERE District = 'Central Africa')",
        "input_tokens": 1385,
        "output_tokens": 141,
        "time": 5.800471292000111,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "input_tokens": 1535,
        "output_tokens": 161,
        "time": 7.125991583000541,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "input_tokens": 1506,
        "output_tokens": 201,
        "time": 6.713111959000344,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'",
        "final_sql": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'",
        "input_tokens": 1377,
        "output_tokens": 100,
        "time": 4.778781083000467,
        "question": "What is the total population and maximum GNP in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT sum(Population) FROM country WHERE Continent = 'Asia';\n\nSELECT max(GNP) FROM country WHERE Continent = 'Asia';",
        "final_sql": "SELECT COUNT(*) AS \"Number of People\", MAX(GNP) AS \"Largest GNP\" FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1443,
        "output_tokens": 144,
        "time": 5.582761792000383,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "input_tokens": 1547,
        "output_tokens": 229,
        "time": 7.950512749999689,
        "question": "What is the average life expectancy in African countries that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "input_tokens": 1636,
        "output_tokens": 227,
        "time": 7.938674999999421,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "final_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "input_tokens": 1340,
        "output_tokens": 105,
        "time": 4.565874499999154,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent IN ('Asia', 'Europe')",
        "input_tokens": 1399,
        "output_tokens": 132,
        "time": 5.489502374999574,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT sum(population) FROM city WHERE district = 'Gelderland';",
        "final_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland';",
        "input_tokens": 1409,
        "output_tokens": 125,
        "time": 5.066303874999903,
        "question": "How many people live in Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
        "final_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
        "input_tokens": 1326,
        "output_tokens": 82,
        "time": 3.967295292000017,
        "question": "What is the total population of Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
        "final_sql": "SELECT avg(GNP), sum(Population) FROM country WHERE Code IN (SELECT CountryCode FROM city WHERE CountryCode = 'USA')",
        "input_tokens": 1474,
        "output_tokens": 124,
        "time": 5.28428491700015,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region = 'US Territory'",
        "final_sql": "SELECT AVG(GNP), SUM(Population) FROM country WHERE Continent = 'North America' AND Region = 'US Territory'",
        "input_tokens": 1433,
        "output_tokens": 128,
        "time": 5.0775488750005024,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Language) FROM countrylanguage",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage;",
        "input_tokens": 1260,
        "output_tokens": 50,
        "time": 3.133181209000213,
        "question": "How many unique languages are spoken in the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Language) FROM countrylanguage",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage;",
        "input_tokens": 1300,
        "output_tokens": 50,
        "time": 3.531292958999984,
        "question": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "final_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "input_tokens": 1403,
        "output_tokens": 156,
        "time": 6.203423792000649,
        "question": "How many type of governments are in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "final_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "input_tokens": 1440,
        "output_tokens": 175,
        "time": 6.308678249999502,
        "question": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "input_tokens": 1332,
        "output_tokens": 87,
        "time": 4.158740875000149,
        "question": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'",
        "final_sql": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'",
        "input_tokens": 1476,
        "output_tokens": 194,
        "time": 6.50917283400031,
        "question": "How many languages are spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
        "input_tokens": 1387,
        "output_tokens": 147,
        "time": 5.999350166999648,
        "question": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\";",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\";",
        "input_tokens": 1376,
        "output_tokens": 133,
        "time": 5.4880305420001605,
        "question": "How many official languages are spoken in Afghanistan?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code) DESC LIMIT 1",
        "final_sql": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1489,
        "output_tokens": 169,
        "time": 6.408742874999916,
        "question": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country.Name \nFROM country \nJOIN (\n    SELECT CountryCode, COUNT(*) AS num_languages \n    FROM countrylanguage \n    GROUP BY CountryCode \n    ORDER BY num_languages DESC \n    LIMIT 1\n) AS max_languages \nON country.Code = max_languages.CountryCode",
        "final_sql": "SELECT country.Name FROM country JOIN (   SELECT CountryCode, COUNT(*) AS num_languages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY num_languages DESC   LIMIT 1 ) AS max_languages ON country.Code = max_languages.CountryCode;",
        "input_tokens": 1698,
        "output_tokens": 357,
        "time": 11.22363100000075,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Continent FROM countrylanguage GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "final_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Code) DESC LIMIT 1",
        "input_tokens": 1595,
        "output_tokens": 275,
        "time": 8.916235249999772,
        "question": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "final_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "input_tokens": 1543,
        "output_tokens": 242,
        "time": 8.150338749999719,
        "question": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch') GROUP BY CountryCode HAVING count(*) = 2;",
        "final_sql": "SELECT COUNT(DISTINCT cl.CountryCode) FROM countrylanguage cl JOIN countrylanguage cl2 ON cl.CountryCode = cl2.CountryCode WHERE cl.Language = 'English' AND cl2.Language = 'Dutch';",
        "input_tokens": 1456,
        "output_tokens": 222,
        "time": 7.636333916000694,
        "question": "How many countries speak both English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",
        "final_sql": "SELECT count(DISTINCT CountryCode) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",
        "input_tokens": 1426,
        "output_tokens": 118,
        "time": 4.772618416999649,
        "question": "What is the number of nations that use English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "input_tokens": 1675,
        "output_tokens": 291,
        "time": 9.802265457999965,
        "question": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT Country.Name FROM country\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE countrylanguage.Language = 'English' AND country.Code IN (\n    SELECT CountryCode FROM countrylanguage WHERE Language = 'French'\n)",
        "final_sql": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' AND country.Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'French')",
        "input_tokens": 1598,
        "output_tokens": 288,
        "time": 8.851065875000131,
        "question": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.Language  =  \"English\" AND T3.Language  =  \"French\" AND T2.IsOfficial  =  \"T\" AND T3.IsOfficial  =  \"T\"",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') AND cl.IsOfficial = 'T' GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;",
        "input_tokens": 1931,
        "output_tokens": 398,
        "time": 11.93486699999994,
        "question": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\" INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = \"French\" AND IsOfficial = \"T\")",
        "final_sql": "SELECT Name FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = \"English\" AND IsOfficial = \"T\"   INTERSECT   SELECT CountryCode   FROM countrylanguage   WHERE Language = \"French\" AND IsOfficial = \"T\" )",
        "input_tokens": 1662,
        "output_tokens": 357,
        "time": 11.07997366699965,
        "question": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT continent) FROM countrylanguage WHERE Language = 'Chinese'",
        "final_sql": "SELECT count(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "input_tokens": 1343,
        "output_tokens": 120,
        "time": 5.214781958999993,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Chinese'",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Chinese'",
        "input_tokens": 1304,
        "output_tokens": 97,
        "time": 4.768512207999265,
        "question": "How many continents speak Chinese?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')",
        "final_sql": "SELECT DISTINCT Region FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' OR Language = 'Dutch' )",
        "input_tokens": 1598,
        "output_tokens": 264,
        "time": 8.559219834000032,
        "question": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT Region FROM country WHERE Language IN ('Dutch', 'English')",
        "final_sql": "SELECT Region FROM countrylanguage WHERE Language IN ('Dutch', 'English')",
        "input_tokens": 1394,
        "output_tokens": 127,
        "time": 11.42662320799991,
        "question": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language  =  'English' OR Language  =  'Dutch';",
        "final_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch';",
        "input_tokens": 1498,
        "output_tokens": 133,
        "time": 5.135313833999135,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "gold_query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch' AND IsOfficial = 'T'",
        "final_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'",
        "input_tokens": 1468,
        "output_tokens": 186,
        "time": 6.663486624999678,
        "question": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "gold_query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY SUM(Percentage) DESC LIMIT 1",
        "input_tokens": 1533,
        "output_tokens": 236,
        "time": 8.149758208000094,
        "question": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Asia') GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1605,
        "output_tokens": 259,
        "time": 8.925576541999362,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE GovernmentForm = 'Republic') GROUP BY Language HAVING COUNT(*) = 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;",
        "input_tokens": 1606,
        "output_tokens": 304,
        "time": 9.925295334000111,
        "question": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT language FROM countrylanguage \nWHERE CountryCode IN (\n    SELECT Code FROM country WHERE GovernmentForm = \"Republic\"\n)\nGROUP BY language\nHAVING COUNT(DISTINCT CountryCode) = 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE GovernmentForm = \"Republic\" ) GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;",
        "input_tokens": 1581,
        "output_tokens": 266,
        "time": 8.14766229199995,
        "question": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "final_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "input_tokens": 1711,
        "output_tokens": 327,
        "time": 9.9919892909993,
        "question": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;",
        "final_sql": "SELECT city.Name FROM city JOIN countrylanguage ON city.CountryCode = countrylanguage.CountryCode WHERE countrylanguage.Language = 'English' ORDER BY city.Population DESC LIMIT 1;",
        "input_tokens": 1649,
        "output_tokens": 301,
        "time": 9.662673165999877,
        "question": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1",
        "final_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1641,
        "output_tokens": 266,
        "time": 8.848265749999882,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;",
        "final_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1545,
        "output_tokens": 214,
        "time": 7.2844248750006955,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )",
        "input_tokens": 1630,
        "output_tokens": 304,
        "time": 9.378531624999596,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );",
        "input_tokens": 1698,
        "output_tokens": 314,
        "time": 9.379603833000147,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT sum(population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "final_sql": "SELECT sum(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "input_tokens": 1603,
        "output_tokens": 254,
        "time": 8.149086457999147,
        "question": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
        "final_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
        "input_tokens": 1579,
        "output_tokens": 275,
        "time": 8.650195084000188,
        "question": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "final_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "input_tokens": 1658,
        "output_tokens": 267,
        "time": 8.477598958999806,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "final_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "input_tokens": 1665,
        "output_tokens": 275,
        "time": 8.971469334000176,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Official_Language) FROM country WHERE founded < 1930",
        "final_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE IndepYear < 1930 )",
        "input_tokens": 1480,
        "output_tokens": 172,
        "time": 6.307969250000497,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'",
        "input_tokens": 1642,
        "output_tokens": 267,
        "time": 9.481657791999169,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')",
        "final_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "input_tokens": 1642,
        "output_tokens": 249,
        "time": 8.049399542000174,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT c1.Name \nFROM country AS c1 \nWHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country AS c2 WHERE c2.Continent = 'Europe')",
        "final_sql": "SELECT c1.Name FROM country AS c1 WHERE c1.SurfaceArea > (SELECT MAX(c2.SurfaceArea) FROM country AS c2 WHERE c2.Continent = 'Europe')",
        "input_tokens": 1573,
        "output_tokens": 243,
        "time": 7.635337458999857,
        "question": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')",
        "input_tokens": 1603,
        "output_tokens": 239,
        "time": 7.910088374999759,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MIN(Population) FROM country WHERE Continent = 'Asia')",
        "input_tokens": 1562,
        "output_tokens": 244,
        "time": 8.084611416999905,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "input_tokens": 1584,
        "output_tokens": 244,
        "time": 8.099614499999916,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "input_tokens": 1620,
        "output_tokens": 248,
        "time": 8.29880166699968,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "input_tokens": 1455,
        "output_tokens": 100,
        "time": 4.870769250000194,
        "question": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')",
        "input_tokens": 1462,
        "output_tokens": 175,
        "time": 6.515015750000202,
        "question": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "final_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "input_tokens": 1508,
        "output_tokens": 122,
        "time": 5.32770654199976,
        "question": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\")",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> \"English\")",
        "input_tokens": 1535,
        "output_tokens": 207,
        "time": 7.331942458000412,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' ) AND GovernmentForm <> 'Republic'",
        "input_tokens": 1732,
        "output_tokens": 334,
        "time": 11.01539799999955,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English') AND GovernmentForm NOT LIKE '%Republic%'",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'",
        "input_tokens": 1734,
        "output_tokens": 317,
        "time": 9.678177042000243,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT city FROM city WHERE CountryCode IN (SELECT Code FROM country WHERE Continent = 'Europe' AND Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T'))",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial != 'T'",
        "input_tokens": 1654,
        "output_tokens": 326,
        "time": 10.300512542000433,
        "question": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Language != 'English'",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language != 'English' AND countrylanguage.IsOfficial = 'No'",
        "input_tokens": 1648,
        "output_tokens": 276,
        "time": 8.868615833000149,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT DISTINCT city.Name \nFROM city \nJOIN country ON city.CountryCode = country.Code \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' \nAND countrylanguage.Language = 'Chinese' \nAND countrylanguage.IsOfficial = 'T'",
        "final_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "input_tokens": 1621,
        "output_tokens": 311,
        "time": 9.276566499999717,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "gold_query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
    },
    {
        "baseline_sql": "SELECT DISTINCT city.Name FROM city \nJOIN country ON city.CountryCode = country.Code \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "final_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "input_tokens": 1725,
        "output_tokens": 316,
        "time": 9.78821541599973,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT Name ,  IndepYear ,  SurfaceArea FROM country ORDER BY Population LIMIT 1",
        "final_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;",
        "input_tokens": 1519,
        "output_tokens": 172,
        "time": 6.207327875000374,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1",
        "final_sql": "SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country)",
        "input_tokens": 1520,
        "output_tokens": 162,
        "time": 7.940264457999547,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
        "final_sql": "SELECT c.Population, c.Name, c.HeadOfState FROM country c JOIN city ci ON c.Capital = ci.ID ORDER BY c.SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1632,
        "output_tokens": 305,
        "time": 9.787176458000431,
        "question": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "final_sql": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1518,
        "output_tokens": 202,
        "time": 6.787950167000417,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS num_languages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3",
        "final_sql": "SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;",
        "input_tokens": 1649,
        "output_tokens": 296,
        "time": 9.30354429199997,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS LanguageCount\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING LanguageCount > 2;",
        "final_sql": "SELECT c.Name, COUNT(cl.Language) AS LanguageCount FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING LanguageCount > 2;",
        "input_tokens": 1725,
        "output_tokens": 293,
        "time": 9.175250499999493,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "final_sql": "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
        "input_tokens": 1626,
        "output_tokens": 234,
        "time": 8.045101374999831,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT district, count(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "final_sql": "SELECT district, count(*) FROM city WHERE population > (SELECT AVG(population) FROM city)",
        "input_tokens": 1550,
        "output_tokens": 196,
        "time": 6.819956625000486,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm",
        "final_sql": "SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;",
        "input_tokens": 1644,
        "output_tokens": 223,
        "time": 7.945892042000196,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT government_form, sum(population) FROM country WHERE life_expectancy > 72 GROUP BY government_form",
        "final_sql": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;",
        "input_tokens": 1553,
        "output_tokens": 181,
        "time": 607.421109375,
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AverageLifeExpectancy < 72",
        "final_sql": "SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AverageLifeExpectancy < 72;",
        "input_tokens": 1700,
        "output_tokens": 270,
        "time": 10.29584233300011,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT continent, SUM(population), AVG(lifeExpectancy) FROM country WHERE continent IN (SELECT continent FROM country WHERE AVG(lifeExpectancy) < 72) GROUP BY continent;",
        "final_sql": "SELECT continent, SUM(population), AVG(lifeExpectancy) FROM country WHERE continent IN (SELECT continent FROM country WHERE lifeExpectancy < 72) GROUP BY continent;",
        "input_tokens": 1591,
        "output_tokens": 198,
        "time": 6.816322791999482,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1525,
        "output_tokens": 190,
        "time": 6.61598583399973,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1537,
        "output_tokens": 216,
        "time": 7.439515208001467,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "input_tokens": 1486,
        "output_tokens": 169,
        "time": 6.709758999999394,
        "question": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "input_tokens": 1427,
        "output_tokens": 154,
        "time": 6.1015266659997,
        "question": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "input_tokens": 1432,
        "output_tokens": 137,
        "time": 5.795678667000175,
        "question": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "input_tokens": 1425,
        "output_tokens": 139,
        "time": 5.898516957999163,
        "question": "Return the names of the 3 countries with the fewest people.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE Continent = \"Asia\";",
        "final_sql": "SELECT count(*) FROM country WHERE Continent = \"Asia\";",
        "input_tokens": 1441,
        "output_tokens": 162,
        "time": 5.797192750000249,
        "question": "how many countries are in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
        "final_sql": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
        "input_tokens": 1324,
        "output_tokens": 87,
        "time": 4.462390958000469,
        "question": "Count the number of countries in Asia.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "input_tokens": 1611,
        "output_tokens": 193,
        "time": 7.123568166000041,
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "input_tokens": 1547,
        "output_tokens": 201,
        "time": 6.919505958001537,
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "final_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;",
        "input_tokens": 1526,
        "output_tokens": 171,
        "time": 6.203951875000712,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "final_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;",
        "input_tokens": 1502,
        "output_tokens": 173,
        "time": 6.512388582999847,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT city FROM city WHERE population BETWEEN 160000 AND 900000",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1459,
        "output_tokens": 140,
        "time": 5.588286792000872,
        "question": "What are the cities whose population is between 160000 and 900000?",
        "db_id": "world_1",
        "gold_query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "baseline_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1483,
        "output_tokens": 167,
        "time": 5.794947624999622,
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "db_id": "world_1",
        "gold_query": "select name from city where population between 160000 and 900000"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "input_tokens": 1478,
        "output_tokens": 197,
        "time": 7.028655083000558,
        "question": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;",
        "input_tokens": 1500,
        "output_tokens": 202,
        "time": 6.942945040998893,
        "question": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cl.Language, c.Name\nFROM countrylanguage cl\nJOIN (\n    SELECT CountryCode, MAX(Percentage) AS MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) t ON cl.CountryCode = t.CountryCode AND cl.Percentage = t.MaxPercentage\nJOIN country c ON cl.CountryCode = c.Code",
        "final_sql": "SELECT c.Name, cl.Language FROM country c JOIN (   SELECT CountryCode, Language, MAX(Percentage) AS MaxPercentage   FROM countrylanguage   GROUP BY CountryCode ) cl ON c.Code = cl.CountryCode AND cl.Percentage = cl.MaxPercentage;",
        "input_tokens": 1580,
        "output_tokens": 283,
        "time": 9.086433833999763,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT T1.Code, T2.Language\nFROM country AS T1\nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode\nWHERE T2.Percentage = (\n    SELECT MAX(Percentage)\n    FROM countrylanguage\n    WHERE CountryCode = T1.Code\n)\nGROUP BY T1.Code;",
        "final_sql": "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = T1.Code ) GROUP BY T1.Code;",
        "input_tokens": 1779,
        "output_tokens": 359,
        "time": 11.085094250000111,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage)          FROM countrylanguage          WHERE Language = 'Spanish')",
        "input_tokens": 1493,
        "output_tokens": 181,
        "time": 6.8512507079994975,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "input_tokens": 1444,
        "output_tokens": 183,
        "time": 6.617242124999393,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" ORDER BY Percentage DESC LIMIT 1;",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" ORDER BY Percentage DESC LIMIT 1;",
        "input_tokens": 1555,
        "output_tokens": 190,
        "time": 6.817711333000261,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "input_tokens": 1434,
        "output_tokens": 141,
        "time": 5.384123083000304,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM conductor;",
        "final_sql": "SELECT count(*) FROM conductor;",
        "input_tokens": 1351,
        "output_tokens": 72,
        "time": 3.865716667000015,
        "question": "How many conductors are there?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT count(*) FROM conductor",
        "final_sql": "SELECT COUNT(*) FROM conductor;",
        "input_tokens": 1349,
        "output_tokens": 68,
        "time": 4.056661041000552,
        "question": "Count the number of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age ASC;",
        "input_tokens": 1446,
        "output_tokens": 109,
        "time": 4.975685499999599,
        "question": "List the names of conductors in ascending order of age.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "input_tokens": 1521,
        "output_tokens": 149,
        "time": 5.899465749998853,
        "question": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "input_tokens": 1572,
        "output_tokens": 112,
        "time": 4.870116292000603,
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor WHERE Nationality <> \"USA\"",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality <> \"USA\"",
        "input_tokens": 1545,
        "output_tokens": 120,
        "time": 4.972507667000173,
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT o.Record_Company FROM orchestra o ORDER BY o.Year_of_Founded DESC",
        "final_sql": "SELECT o.Record_Company FROM orchestra o ORDER BY o.Year_of_Founded DESC",
        "input_tokens": 1580,
        "output_tokens": 148,
        "time": 5.317809250000209,
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "final_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;",
        "input_tokens": 1564,
        "output_tokens": 147,
        "time": 5.588803624999855,
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT avg(Attendance) FROM show",
        "final_sql": "SELECT avg(Attendance) FROM show;",
        "input_tokens": 1332,
        "output_tokens": 42,
        "time": 3.442671374999918,
        "question": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT AVG(Attendance) FROM show",
        "final_sql": "SELECT AVG(Attendance) FROM show;",
        "input_tokens": 1377,
        "output_tokens": 61,
        "time": 3.1065357080005924,
        "question": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT max(Share), min(Share) FROM performance WHERE Type <> \"Live final\"",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\"",
        "input_tokens": 1507,
        "output_tokens": 122,
        "time": 4.693419125000219,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != \"Live final\"",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type != 'Live final'",
        "input_tokens": 1572,
        "output_tokens": 180,
        "time": 6.504895374999251,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "input_tokens": 1348,
        "output_tokens": 52,
        "time": 3.1331316659998265,
        "question": "How many different nationalities do conductors have?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "input_tokens": 1355,
        "output_tokens": 52,
        "time": 3.614135540999996,
        "question": "Count the number of different nationalities of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "input_tokens": 1470,
        "output_tokens": 124,
        "time": 5.12318441699972,
        "question": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "input_tokens": 1567,
        "output_tokens": 162,
        "time": 5.790696124999158,
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "input_tokens": 1549,
        "output_tokens": 182,
        "time": 6.509401665998666,
        "question": "List the name of the conductor with the most years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "input_tokens": 1660,
        "output_tokens": 190,
        "time": 6.822630917000424,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT C.Name, O.Orchestra\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID",
        "final_sql": "SELECT C.Name, O.Orchestra FROM conductor C JOIN orchestra O ON C.Conductor_ID = O.Conductor_ID",
        "input_tokens": 1557,
        "output_tokens": 130,
        "time": 4.9727621669990185,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT c.Name, o.Orchestra\nFROM conductor c\nJOIN orchestra o ON c.Conductor_ID = o.Conductor_ID",
        "final_sql": "SELECT c.Name, o.Orchestra FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID",
        "input_tokens": 1611,
        "output_tokens": 132,
        "time": 4.874434458999531,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "input_tokens": 1852,
        "output_tokens": 298,
        "time": 9.177084541999648,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1;",
        "input_tokens": 1719,
        "output_tokens": 264,
        "time": 8.758268874998976,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1",
        "input_tokens": 1788,
        "output_tokens": 294,
        "time": 9.69581716600078,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1805,
        "output_tokens": 283,
        "time": 9.072092667000106,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T2.Year_of_Founded > 2008;",
        "input_tokens": 1840,
        "output_tokens": 302,
        "time": 9.99086675000035,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008",
        "final_sql": "SELECT c.Name FROM conductor c JOIN orchestra o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
        "input_tokens": 1666,
        "output_tokens": 205,
        "time": 7.537371833001089,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "final_sql": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "input_tokens": 1513,
        "output_tokens": 133,
        "time": 5.586399332998553,
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT record_company, count(DISTINCT orchestra_id) FROM orchestra GROUP BY record_company",
        "final_sql": "SELECT Record_Company, COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company;",
        "input_tokens": 1666,
        "output_tokens": 234,
        "time": 7.841467666999961,
        "question": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "final_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;",
        "input_tokens": 1512,
        "output_tokens": 157,
        "time": 5.895025124998938,
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC",
        "final_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",
        "input_tokens": 1586,
        "output_tokens": 177,
        "time": 6.205705625001428,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1577,
        "output_tokens": 190,
        "time": 6.512038249999023,
        "question": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1623,
        "output_tokens": 221,
        "time": 7.33193166700039,
        "question": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1497,
        "output_tokens": 133,
        "time": 5.587503041999298,
        "question": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1486,
        "output_tokens": 114,
        "time": 4.973577958000533,
        "question": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded < 2003\nINTERSECT\nSELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2003;",
        "final_sql": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;",
        "input_tokens": 2037,
        "output_tokens": 377,
        "time": 11.195097458999953,
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT T1.record_company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded < 2003 AND T2.year_of_work > 2003 INTERSECT SELECT T1.record_company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2003 AND T2.year_of_work > 2003",
        "final_sql": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded < 2003 AND T2.Year_of_Work > 2003 INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2003 AND T2.Year_of_Work > 2003;",
        "input_tokens": 2021,
        "output_tokens": 465,
        "time": 12.946828791000371,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "final_sql": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "input_tokens": 1580,
        "output_tokens": 151,
        "time": 6.609512458000609,
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "final_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "input_tokens": 1490,
        "output_tokens": 105,
        "time": 4.667266666001524,
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "input_tokens": 1761,
        "output_tokens": 250,
        "time": 8.783100250000643,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 )",
        "input_tokens": 1589,
        "output_tokens": 198,
        "time": 7.43591808400015,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler",
        "final_sql": "SELECT count(*) FROM Highschooler;",
        "input_tokens": 1043,
        "output_tokens": 74,
        "time": 3.847737165999206,
        "question": "How many high schoolers are there?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler",
        "final_sql": "SELECT count(*) FROM Highschooler;",
        "input_tokens": 1057,
        "output_tokens": 83,
        "time": 3.9535218749988417,
        "question": "Count the number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade FROM Highschooler",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1027,
        "output_tokens": 44,
        "time": 3.1325842080004804,
        "question": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade FROM Highschooler",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1108,
        "output_tokens": 44,
        "time": 3.1299852920001285,
        "question": "What are the names and grades for each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler",
        "final_sql": "SELECT grade FROM Highschooler;",
        "input_tokens": 1111,
        "output_tokens": 78,
        "time": 3.951709500001016,
        "question": "Show all the grades of the high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT ID, grade FROM Highschooler",
        "final_sql": "SELECT grade FROM Highschooler",
        "input_tokens": 1038,
        "output_tokens": 41,
        "time": 2.72394279099899,
        "question": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "input_tokens": 1190,
        "output_tokens": 125,
        "time": 5.283736542000042,
        "question": "What grade is Kyle in?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
        "input_tokens": 1202,
        "output_tokens": 120,
        "time": 4.973722624999937,
        "question": "Return the grade for the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "input_tokens": 1227,
        "output_tokens": 145,
        "time": 5.48779149999973,
        "question": "Show the names of all high schoolers in grade 10.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "input_tokens": 1202,
        "output_tokens": 104,
        "time": 4.769679167000504,
        "question": "What are the names of all high schoolers in grade 10?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "input_tokens": 1145,
        "output_tokens": 110,
        "time": 4.772424041000704,
        "question": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "input_tokens": 1174,
        "output_tokens": 129,
        "time": 5.694438041000467,
        "question": "What is Kyle's id?",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "final_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "input_tokens": 1216,
        "output_tokens": 124,
        "time": 606.5998140829997,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "final_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
        "input_tokens": 1234,
        "output_tokens": 161,
        "time": 6.305275582999457,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
        "final_sql": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
        "input_tokens": 1203,
        "output_tokens": 140,
        "time": 5.6959807080002065,
        "question": "Show the number of high schoolers for each grade.",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
        "final_sql": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",
        "input_tokens": 1224,
        "output_tokens": 135,
        "time": 5.689452250000613,
        "question": "How many high schoolers are in each grade?",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1230,
        "output_tokens": 163,
        "time": 6.517107290999775,
        "question": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1190,
        "output_tokens": 136,
        "time": 5.279215291999208,
        "question": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "final_sql": "SELECT * FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4)",
        "input_tokens": 1229,
        "output_tokens": 178,
        "time": 9.07119212499856,
        "question": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "input_tokens": 1221,
        "output_tokens": 179,
        "time": 6.204291666999779,
        "question": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT F.student_id, F.friend_id FROM Friend AS F INNER JOIN Highschooler AS H ON F.student_id = H.ID",
        "final_sql": "SELECT F.student_id, F.friend_id FROM Friend AS F INNER JOIN Highschooler AS H ON F.student_id = H.ID",
        "input_tokens": 1248,
        "output_tokens": 176,
        "time": 6.714360041998589,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, count(friend_id) FROM Friend GROUP BY student_id",
        "final_sql": "SELECT student_id, count(friend_id) FROM Friend GROUP BY student_id;",
        "input_tokens": 1095,
        "output_tokens": 94,
        "time": 4.768689165999604,
        "question": "How many friends does each student have?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nLEFT JOIN Friend F ON H.ID = F.student_id\nGROUP BY H.name",
        "final_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;",
        "input_tokens": 1418,
        "output_tokens": 293,
        "time": 11.63268812500064,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(F.friend_id) \nFROM Highschooler H \nLEFT JOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name",
        "final_sql": "SELECT H.name, COUNT(F.friend_id) FROM Highschooler H LEFT JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;",
        "input_tokens": 1386,
        "output_tokens": 244,
        "time": 8.356500124999002,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1469,
        "output_tokens": 291,
        "time": 9.072706291999566,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1",
        "input_tokens": 1404,
        "output_tokens": 281,
        "time": 9.066737208000632,
        "question": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 3",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID HAVING COUNT(F.friend_id) >= 3",
        "input_tokens": 1388,
        "output_tokens": 227,
        "time": 8.22435541699997,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
        "final_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(*) >= 3",
        "input_tokens": 1417,
        "output_tokens": 208,
        "time": 7.869247999999061,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT h.name\nFROM Highschooler h\nJOIN Friend f ON h.ID = f.student_id\nJOIN Highschooler h2 ON f.friend_id = h2.ID\nWHERE h2.name = 'Kyle'",
        "final_sql": "SELECT h2.name FROM Friend f JOIN Highschooler h2 ON f.friend_id = h2.ID JOIN Highschooler h ON f.student_id = h.ID WHERE h.name = 'Kyle'",
        "input_tokens": 1408,
        "output_tokens": 288,
        "time": 8.763994250000906,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT H2.name\nFROM Highschooler H1\nJOIN Friend F ON H1.ID = F.student_id\nJOIN Highschooler H2 ON F.friend_id = H2.ID\nWHERE H1.name = 'Kyle'",
        "final_sql": "SELECT H2.name FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Highschooler H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'",
        "input_tokens": 1391,
        "output_tokens": 278,
        "time": 9.435356375000993,
        "question": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'",
        "final_sql": "SELECT COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'",
        "input_tokens": 1332,
        "output_tokens": 207,
        "time": 7.442160499998863,
        "question": "How many friends does the high school student Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "final_sql": "SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1192,
        "output_tokens": 171,
        "time": 6.622633416000099,
        "question": "Count the number of friends Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1108,
        "output_tokens": 83,
        "time": 3.879348791000666,
        "question": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1267,
        "output_tokens": 156,
        "time": 6.277742875001422,
        "question": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1299,
        "output_tokens": 168,
        "time": 6.412171500000113,
        "question": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1171,
        "output_tokens": 87,
        "time": 4.054045541999585,
        "question": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT DISTINCT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id",
        "final_sql": "SELECT DISTINCT H1.ID FROM Highschooler H1 JOIN Friend F ON H1.ID = F.student_id JOIN Likes L ON H1.ID = L.student_id;",
        "input_tokens": 1287,
        "output_tokens": 185,
        "time": 6.610291666000194,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes",
        "final_sql": "SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)",
        "input_tokens": 1203,
        "output_tokens": 108,
        "time": 4.478402458998971,
        "question": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT DISTINCT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id JOIN Likes AS L ON H.ID = L.student_id",
        "final_sql": "SELECT DISTINCT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id JOIN Likes AS L ON H.ID = L.student_id;",
        "input_tokens": 1331,
        "output_tokens": 183,
        "time": 6.513420291999864,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Likes AS T3 ON T1.ID  =  T3.student_id",
        "final_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.student_id;",
        "input_tokens": 1463,
        "output_tokens": 239,
        "time": 9.173008374998972,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
        "final_sql": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
        "input_tokens": 1099,
        "output_tokens": 113,
        "time": 4.667546957998638,
        "question": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
        "final_sql": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
        "input_tokens": 1175,
        "output_tokens": 113,
        "time": 4.682091167000181,
        "question": "How many likes correspond to each student id?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(L.student_id) AS num_likes\nFROM Highschooler H\nJOIN Likes L ON H.ID = L.student_id\nGROUP BY H.ID\nHAVING COUNT(L.student_id) > 0;",
        "final_sql": "SELECT H.name, COUNT(L.student_id) AS num_likes FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.student_id) > 0;",
        "input_tokens": 1542,
        "output_tokens": 320,
        "time": 10.282155917000637,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
        "final_sql": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name;",
        "input_tokens": 1466,
        "output_tokens": 232,
        "time": 7.946227334001378,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY L.student_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY L.student_id ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1482,
        "output_tokens": 306,
        "time": 9.53065824999976,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID = (   SELECT student_id   FROM Likes   GROUP BY student_id   ORDER BY count(*) DESC   LIMIT 1 )",
        "input_tokens": 1244,
        "output_tokens": 208,
        "time": 7.379708791999292,
        "question": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(L.liked_id) >= 2;",
        "input_tokens": 1383,
        "output_tokens": 230,
        "time": 7.741963917000248,
        "question": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id FROM Likes GROUP BY student_id HAVING COUNT(*) >= 2)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID IN (SELECT student_id        FROM Likes        GROUP BY student_id        HAVING COUNT(*) >= 2)",
        "input_tokens": 1286,
        "output_tokens": 198,
        "time": 7.128668249999464,
        "question": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*) FROM Friend F WHERE F.student_id = H.ID) >= 2",
        "final_sql": "SELECT H.name FROM Highschooler H WHERE H.grade > 5 AND (SELECT COUNT(*)    FROM Friend F    WHERE F.student_id = H.ID) >= 2",
        "input_tokens": 1324,
        "output_tokens": 184,
        "time": 7.43265991699991,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id FROM Friend GROUP BY student_id HAVING COUNT(friend_id) >= 2)",
        "final_sql": "SELECT name FROM Highschooler WHERE grade > 5 AND ID IN (SELECT student_id       FROM Friend       GROUP BY student_id       HAVING COUNT(friend_id) >= 2)",
        "input_tokens": 1507,
        "output_tokens": 271,
        "time": 8.868866791000983,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "final_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1275,
        "output_tokens": 167,
        "time": 6.2013323329993,
        "question": "How many likes does Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "final_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1250,
        "output_tokens": 160,
        "time": 6.169450792000134,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1271,
        "output_tokens": 170,
        "time": 6.03584624999894,
        "question": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1284,
        "output_tokens": 178,
        "time": 6.614928041999519,
        "question": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1275,
        "output_tokens": 185,
        "time": 6.510893250000663,
        "question": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1186,
        "output_tokens": 95,
        "time": 4.266336417000275,
        "question": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "final_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "input_tokens": 2370,
        "output_tokens": 144,
        "time": 7.3266453339983855,
        "question": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "final_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "input_tokens": 2529,
        "output_tokens": 241,
        "time": 8.86641116699866,
        "question": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2329,
        "output_tokens": 118,
        "time": 4.768618583999341,
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2465,
        "output_tokens": 118,
        "time": 4.990884250000818,
        "question": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id             FROM Treatments             GROUP BY professional_id             HAVING COUNT(*) > 2)",
        "input_tokens": 2827,
        "output_tokens": 239,
        "time": 7.841523625000264,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )",
        "input_tokens": 2781,
        "output_tokens": 313,
        "time": 10.09327820800172,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments WHERE cost_of_treatment > 1000)",
        "final_sql": "SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000;",
        "input_tokens": 2760,
        "output_tokens": 346,
        "time": 10.60889537500043,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT d.name FROM Dogs AS d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments AS t WHERE t.cost_of_treatment > 1000)",
        "final_sql": "SELECT d.name FROM Dogs AS d WHERE d.dog_id NOT IN (   SELECT t.dog_id   FROM Treatments AS t   WHERE t.cost_of_treatment > 1000 )",
        "input_tokens": 2631,
        "output_tokens": 277,
        "time": 9.170852082999772,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "final_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;",
        "input_tokens": 2536,
        "output_tokens": 212,
        "time": 8.04847491700093,
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT first_name FROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS T1\nWHERE first_name NOT IN (\n    SELECT name FROM Dogs\n)",
        "final_sql": "SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS T1 WHERE first_name NOT IN (   SELECT name FROM Dogs )",
        "input_tokens": 2641,
        "output_tokens": 222,
        "time": 7.433427792000657,
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2526,
        "output_tokens": 137,
        "time": 5.585740375001478,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2487,
        "output_tokens": 170,
        "time": 6.512675250000029,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;",
        "final_sql": "SELECT Owners.owner_id, Owners.first_name, Owners.last_name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id GROUP BY Owners.owner_id, Owners.first_name, Owners.last_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;",
        "input_tokens": 2753,
        "output_tokens": 312,
        "time": 10.609462791000624,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1",
        "final_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1",
        "input_tokens": 2737,
        "output_tokens": 322,
        "time": 10.301489833000232,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2;",
        "input_tokens": 2688,
        "output_tokens": 266,
        "time": 8.778809207999075,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, first_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) >= 2)",
        "final_sql": "SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(Treatments.treatment_id) >= 2;",
        "input_tokens": 2600,
        "output_tokens": 278,
        "time": 8.798688832999687,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT breed_name FROM Breeds\nWHERE breed_code IN (\n    SELECT breed_code FROM Dogs\n    GROUP BY breed_code\n    HAVING COUNT(*) = (\n        SELECT MAX(count) FROM (\n            SELECT COUNT(*) AS count FROM Dogs\n            GROUP BY breed_code\n        )\n    )\n)",
        "final_sql": "SELECT breed_name FROM Breeds WHERE breed_code IN (   SELECT breed_code FROM Dogs   GROUP BY breed_code   HAVING COUNT(*) = (     SELECT MAX(count) FROM (       SELECT COUNT(*) AS count FROM Dogs       GROUP BY breed_code     )   ) )",
        "input_tokens": 2587,
        "output_tokens": 315,
        "time": 10.096163833000901,
        "question": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 2661,
        "output_tokens": 263,
        "time": 8.763336583999262,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id ,  T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3027,
        "output_tokens": 527,
        "time": 16.561496291000367,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.owner_id, t1.last_name FROM Owners AS t1 JOIN Dogs AS t2 ON t1.owner_id = t2.owner_id JOIN Treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id, t1.last_name ORDER BY sum(t3.cost_of_treatment) DESC LIMIT 1",
        "final_sql": "SELECT o.owner_id, o.last_name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id JOIN Treatments AS t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1",
        "input_tokens": 2907,
        "output_tokens": 439,
        "time": 13.063492541999949,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.treatment_type_description FROM Treatment_Types AS t1 JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_description ORDER BY sum(t2.cost_of_treatment) ASC LIMIT 1",
        "final_sql": "SELECT t1.treatment_type_description FROM Treatment_Types AS t1 JOIN Treatments AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t1.treatment_type_description ORDER BY sum(t2.cost_of_treatment) ASC LIMIT 1",
        "input_tokens": 2609,
        "output_tokens": 292,
        "time": 9.582942750001166,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1",
        "final_sql": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1;",
        "input_tokens": 2664,
        "output_tokens": 314,
        "time": 9.97926712500157,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id, T2.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Transactions AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.amount) DESC LIMIT 1",
        "final_sql": "SELECT O.owner_id, O.zip_code FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.zip_code ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2838,
        "output_tokens": 413,
        "time": 12.052355540999997,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)",
        "final_sql": "SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2755,
        "output_tokens": 343,
        "time": 12.349914291999085,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "final_sql": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
        "input_tokens": 2570,
        "output_tokens": 222,
        "time": 7.943974290999904,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
        "final_sql": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2;",
        "input_tokens": 2707,
        "output_tokens": 329,
        "time": 10.40248316600082,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "final_sql": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )",
        "input_tokens": 2580,
        "output_tokens": 276,
        "time": 9.895362874998682,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "final_sql": "SELECT P.first_name, P.last_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE T.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "input_tokens": 2703,
        "output_tokens": 264,
        "time": 8.251643749999857,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "final_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "input_tokens": 2383,
        "output_tokens": 137,
        "time": 5.898054082999806,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "final_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "input_tokens": 2412,
        "output_tokens": 139,
        "time": 606.4958823329998,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "final_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "input_tokens": 2432,
        "output_tokens": 176,
        "time": 6.406418208000105,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "final_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "input_tokens": 2498,
        "output_tokens": 181,
        "time": 6.917203332999634,
        "question": "What are the cost and treatment type description of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT O.first_name, O.last_name, S.size_description\nFROM Owners AS O\nJOIN Dogs AS D ON O.owner_id = D.owner_id\nJOIN Sizes AS S ON D.size_code = S.size_code",
        "final_sql": "SELECT O.first_name, O.last_name, S.size_description FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Sizes AS S ON D.size_code = S.size_code;",
        "input_tokens": 2517,
        "output_tokens": 210,
        "time": 7.22362824999982,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT o.first_name, o.last_name, d.size_code\nFROM Owners o\nJOIN Dogs d ON o.owner_id = d.owner_id",
        "final_sql": "SELECT o.first_name, o.last_name, d.size_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id",
        "input_tokens": 2444,
        "output_tokens": 142,
        "time": 607.2159506250009,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "final_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "input_tokens": 2395,
        "output_tokens": 144,
        "time": 5.83977650000088,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id;",
        "final_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id;",
        "input_tokens": 2406,
        "output_tokens": 154,
        "time": 6.20082954100144,
        "question": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment\nFROM Dogs AS D\nJOIN Breeds AS B ON D.breed_code = B.breed_code\nJOIN Treatments AS T ON D.dog_id = T.dog_id\nWHERE B.breed_name = (\n    SELECT breed_name\n    FROM Breeds\n    ORDER BY breed_code DESC\n    LIMIT 1\n)",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE B.breed_name = (   SELECT breed_name   FROM Breeds   ORDER BY breed_code ASC   LIMIT 1 )",
        "input_tokens": 2840,
        "output_tokens": 454,
        "time": 12.865019957998811,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.name HAVING COUNT(DISTINCT B.breed_code) = (SELECT COUNT(DISTINCT breed_code) FROM Breeds) ORDER BY T.date_of_treatment ASC",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id ORDER BY T.date_of_treatment ASC",
        "input_tokens": 2958,
        "output_tokens": 437,
        "time": 13.065942749999522,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';",
        "final_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';",
        "input_tokens": 2613,
        "output_tokens": 203,
        "time": 7.430303791999904,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T3.name \nFROM Owners AS T1 \nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id \nJOIN Breeds AS T3 ON T2.breed_code = T3.breed_code \nWHERE T1.state = 'Virginia'",
        "final_sql": "SELECT T1.first_name, T3.breed_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Breeds AS T3 ON T2.breed_code = T3.breed_code WHERE T1.state = 'Virginia'",
        "input_tokens": 2739,
        "output_tokens": 340,
        "time": 10.607658165999965,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "final_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "input_tokens": 2487,
        "output_tokens": 158,
        "time": 6.3023372090010525,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "final_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "input_tokens": 2533,
        "output_tokens": 158,
        "time": 6.3073088330002065,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)",
        "final_sql": "SELECT O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth ASC LIMIT 1;",
        "input_tokens": 2607,
        "output_tokens": 244,
        "time": 11.528222417000507,
        "question": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth DESC LIMIT 1)",
        "final_sql": "SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   ORDER BY date_of_birth ASC   LIMIT 1 )",
        "input_tokens": 2488,
        "output_tokens": 204,
        "time": 7.447888958000476,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\";",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\";",
        "input_tokens": 2501,
        "output_tokens": 175,
        "time": 5.984180125000421,
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\"",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\"",
        "input_tokens": 2472,
        "output_tokens": 175,
        "time": 6.015145708999626,
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "input_tokens": 2330,
        "output_tokens": 51,
        "time": 3.43874337500165,
        "question": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "input_tokens": 2356,
        "output_tokens": 133,
        "time": 5.22590074999971,
        "question": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2322,
        "output_tokens": 119,
        "time": 5.180309584000497,
        "question": "How many dogs went through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Treatments",
        "final_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "input_tokens": 2269,
        "output_tokens": 78,
        "time": 4.976249166998969,
        "question": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)",
        "final_sql": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)",
        "input_tokens": 2475,
        "output_tokens": 217,
        "time": 7.225125832999765,
        "question": "How many professionals have performed any treatment to dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "final_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL;",
        "input_tokens": 2379,
        "output_tokens": 110,
        "time": 5.095513874999597,
        "question": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "input_tokens": 2539,
        "output_tokens": 136,
        "time": 5.294464082999184,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "input_tokens": 2449,
        "output_tokens": 166,
        "time": 6.001205958000355,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "input_tokens": 2517,
        "output_tokens": 152,
        "time": 5.893227750000733,
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "input_tokens": 2518,
        "output_tokens": 161,
        "time": 5.792790957999387,
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
        "input_tokens": 2467,
        "output_tokens": 174,
        "time": 6.415078166999592,
        "question": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "input_tokens": 2389,
        "output_tokens": 165,
        "time": 6.192969291001646,
        "question": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "input_tokens": 2389,
        "output_tokens": 181,
        "time": 7.128243832999942,
        "question": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;",
        "input_tokens": 2490,
        "output_tokens": 209,
        "time": 7.024840457999744,
        "question": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2424,
        "output_tokens": 155,
        "time": 5.894429874999332,
        "question": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2466,
        "output_tokens": 155,
        "time": 5.711138167000172,
        "question": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "gold_query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "final_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "input_tokens": 2569,
        "output_tokens": 253,
        "time": 8.454710082998645,
        "question": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
        "input_tokens": 2511,
        "output_tokens": 218,
        "time": 7.94342291599969,
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2391,
        "output_tokens": 146,
        "time": 5.587850874999276,
        "question": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2463,
        "output_tokens": 146,
        "time": 5.897711999999956,
        "question": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1",
        "final_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
        "input_tokens": 2656,
        "output_tokens": 173,
        "time": 6.308630166999137,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
        "final_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
        "input_tokens": 2573,
        "output_tokens": 156,
        "time": 5.596631374999561,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT avg(age) FROM Dogs",
        "final_sql": "SELECT avg(age) FROM Dogs",
        "input_tokens": 2211,
        "output_tokens": 41,
        "time": 3.1280660000011267,
        "question": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT avg(age) FROM Dogs",
        "final_sql": "SELECT avg(CAST(age AS INTEGER)) FROM Dogs",
        "input_tokens": 2276,
        "output_tokens": 102,
        "time": 4.050445499999114,
        "question": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1",
        "final_sql": "SELECT MAX(age) FROM Dogs",
        "input_tokens": 2462,
        "output_tokens": 169,
        "time": 6.615712417000395,
        "question": "What is the age of the oldest dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT MAX(age) FROM Dogs",
        "final_sql": "SELECT MAX(age) FROM Dogs;",
        "input_tokens": 2321,
        "output_tokens": 95,
        "time": 4.35963108299984,
        "question": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT charge_type, charge_amount FROM Charges",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2334,
        "output_tokens": 56,
        "time": 3.0311501670003054,
        "question": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2262,
        "output_tokens": 57,
        "time": 4.053882374999375,
        "question": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT MAX(charge_amount) FROM Charges",
        "final_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "input_tokens": 2201,
        "output_tokens": 42,
        "time": 3.3724510419997387,
        "question": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT charge_amount FROM Charges WHERE charge_type = (SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1)",
        "final_sql": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;",
        "input_tokens": 2363,
        "output_tokens": 133,
        "time": 5.575450832999195,
        "question": "What is the charge amount of the most expensive charge type?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2313,
        "output_tokens": 101,
        "time": 4.7283502079990285,
        "question": "List the email, cell phone and home phone of all the professionals.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone FROM Professionals",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2322,
        "output_tokens": 66,
        "time": 3.4268272089993843,
        "question": "What are the email, cell phone and home phone of each professional?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT b.breed_code, b.breed_name, s.size_code, s.size_description\nFROM Breeds b, Sizes s",
        "final_sql": "SELECT b.breed_code, b.breed_name, s.size_code, s.size_description FROM Breeds b, Sizes s WHERE b.size_code = s.size_code;",
        "input_tokens": 2475,
        "output_tokens": 201,
        "time": 7.712383915999453,
        "question": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT breed_code, size_code FROM Dogs",
        "final_sql": "SELECT DISTINCT breed_code, size_code FROM Dogs;",
        "input_tokens": 2399,
        "output_tokens": 164,
        "time": 6.20078595799896,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "final_sql": "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "input_tokens": 2568,
        "output_tokens": 253,
        "time": 8.561278667000806,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "final_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "input_tokens": 2663,
        "output_tokens": 254,
        "time": 7.943994249999378,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT count(*) FROM singer;",
        "input_tokens": 929,
        "output_tokens": 71,
        "time": 3.7480223329985165,
        "question": "How many singers are there?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 987,
        "output_tokens": 90,
        "time": 4.362217959000191,
        "question": "What is the count of singers?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "input_tokens": 1097,
        "output_tokens": 134,
        "time": 4.767924374998984,
        "question": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;",
        "input_tokens": 1101,
        "output_tokens": 135,
        "time": 5.5914645830016525,
        "question": "What are the names of singers ordered by ascending net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship FROM singer",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 995,
        "output_tokens": 81,
        "time": 4.078425250001601,
        "question": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship FROM singer",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 1037,
        "output_tokens": 60,
        "time": 3.177636791999248,
        "question": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "input_tokens": 1063,
        "output_tokens": 124,
        "time": 4.824486708001132,
        "question": "List the name of singers whose citizenship is not \"France\".",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Citizenship <> \"French\"",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship <> \"French\"",
        "input_tokens": 1061,
        "output_tokens": 90,
        "time": 4.0533806250005,
        "question": "What are the names of the singers who are not French citizens?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1144,
        "output_tokens": 135,
        "time": 5.592375082998842,
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1178,
        "output_tokens": 135,
        "time": 5.383436791000349,
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "input_tokens": 1334,
        "output_tokens": 254,
        "time": 8.557749125000555,
        "question": "What is the name of the singer with the largest net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "input_tokens": 1198,
        "output_tokens": 203,
        "time": 6.82331370799875,
        "question": "What is the name of the singer who is worth the most?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;",
        "input_tokens": 1116,
        "output_tokens": 86,
        "time": 4.566977125001358,
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "input_tokens": 1113,
        "output_tokens": 119,
        "time": 5.180149624999103,
        "question": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC",
        "input_tokens": 1154,
        "output_tokens": 153,
        "time": 6.103499750000992,
        "question": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1184,
        "output_tokens": 183,
        "time": 6.608522000000448,
        "question": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "gold_query": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;",
        "input_tokens": 1139,
        "output_tokens": 137,
        "time": 5.487409958999706,
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "input_tokens": 1140,
        "output_tokens": 134,
        "time": 5.180828208000094,
        "question": "For each citizenship, what is the maximum net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "input_tokens": 1153,
        "output_tokens": 146,
        "time": 5.484994625001491,
        "question": "Show titles of songs and names of singers.",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "input_tokens": 1055,
        "output_tokens": 148,
        "time": 5.287103874999957,
        "question": "What are the song titles and singer names?",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
        "final_sql": "SELECT DISTINCT s.Name FROM singer s JOIN song so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;",
        "input_tokens": 1312,
        "output_tokens": 199,
        "time": 6.935803583999586,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;",
        "final_sql": "SELECT DISTINCT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;",
        "input_tokens": 1298,
        "output_tokens": 208,
        "time": 6.819562250000672,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 )",
        "input_tokens": 1353,
        "output_tokens": 238,
        "time": 8.150390041999344,
        "question": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Singer_ID IN (SELECT Singer_ID FROM song GROUP BY Singer_ID HAVING COUNT(*) > 1);",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 );",
        "input_tokens": 1333,
        "output_tokens": 260,
        "time": 8.867612374999226,
        "question": "What are the names of the singers that have more than one songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name",
        "final_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name, singer.Singer_ID",
        "input_tokens": 1273,
        "output_tokens": 203,
        "time": 7.323435041998891,
        "question": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name",
        "final_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1237,
        "output_tokens": 180,
        "time": 6.818107707998934,
        "question": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "input_tokens": 1149,
        "output_tokens": 176,
        "time": 6.410473334000926,
        "question": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT sname FROM sing WHERE sid NOT IN (SELECT sid FROM song)",
        "final_sql": "SELECT Name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "input_tokens": 1152,
        "output_tokens": 179,
        "time": 6.821356582999215,
        "question": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955",
        "final_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955;",
        "input_tokens": 1330,
        "output_tokens": 223,
        "time": 7.63502729100037,
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "final_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955",
        "input_tokens": 1311,
        "output_tokens": 212,
        "time": 7.027389791999667,
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Other_Available_Features",
        "final_sql": "SELECT count(*) FROM Other_Available_Features;",
        "input_tokens": 1896,
        "output_tokens": 82,
        "time": 4.357503082999756,
        "question": "How many available features are there in total?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT count(*) FROM Other_Available_Features"
    },
    {
        "baseline_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')",
        "final_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' )",
        "input_tokens": 2263,
        "output_tokens": 250,
        "time": 8.45475875000011,
        "question": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    {
        "baseline_sql": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (SELECT property_type_code FROM Properties WHERE property_type_code = \"PUR\")",
        "final_sql": "SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IN (   SELECT property_type_code   FROM Properties   WHERE property_type_code = \"PUR\" );",
        "input_tokens": 2062,
        "output_tokens": 191,
        "time": 6.716124917000343,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
    },
    {
        "baseline_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1",
        "final_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1;",
        "input_tokens": 2150,
        "output_tokens": 203,
        "time": 7.229290416000367,
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    }
]