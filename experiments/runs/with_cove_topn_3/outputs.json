[
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT count(*) FROM singer",
        "input_tokens": 1326,
        "output_tokens": 71,
        "time": 5.886762249999999,
        "question": "How many singers do we have?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT COUNT(*) AS total_singers FROM singer",
        "input_tokens": 1382,
        "output_tokens": 110,
        "time": 5.055265417000001,
        "question": "What is the total number of singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1504,
        "output_tokens": 114,
        "time": 5.3665544170000015,
        "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC",
        "final_sql": "SELECT Name, Country, Age FROM singer ORDER BY Age DESC;",
        "input_tokens": 1561,
        "output_tokens": 141,
        "time": 5.537980832999999,
        "question": "What are the names, countries, and ages for every singer in descending order of age?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
        "final_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = 'France'",
        "input_tokens": 1538,
        "output_tokens": 171,
        "time": 6.342221166999998,
        "question": "What is the average, minimum, and maximum age of all singers from France?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = \"France\"",
        "final_sql": "SELECT avg(Age), min(Age), max(Age) FROM singer WHERE Country = \"France\"",
        "input_tokens": 1506,
        "output_tokens": 154,
        "time": 6.307837416999995,
        "question": "What is the average, minimum, and maximum age for all French singers?",
        "db_id": "concert_singer",
        "gold_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"
    },
    {
        "baseline_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "final_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "input_tokens": 1610,
        "output_tokens": 149,
        "time": 6.896960915999998,
        "question": "Show the name and the release year of the song by the youngest singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name ,  T1.Song_release_year FROM singer AS T1 WHERE T1.Age = (SELECT MIN(Age) FROM singer)",
        "final_sql": "SELECT Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer)",
        "input_tokens": 1601,
        "output_tokens": 162,
        "time": 7.718406000000002,
        "question": "What are the names and release years for all the songs of the youngest singer?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1570,
        "output_tokens": 148,
        "time": 5.7046995839999965,
        "question": "What are all distinct countries where singers above age 20 are from?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT DISTINCT country FROM singer WHERE age > 20",
        "final_sql": "SELECT DISTINCT Country FROM singer WHERE Age > 20;",
        "input_tokens": 1452,
        "output_tokens": 103,
        "time": 4.4997625839999955,
        "question": "What are  the different countries with singers above age 20?",
        "db_id": "concert_singer",
        "gold_query": "SELECT DISTINCT country FROM singer WHERE age  >  20"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "final_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "input_tokens": 1609,
        "output_tokens": 231,
        "time": 7.816319249999992,
        "question": "Show all countries and the number of singers in each country.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "final_sql": "SELECT Country, COUNT(*) FROM singer GROUP BY Country",
        "input_tokens": 1436,
        "output_tokens": 112,
        "time": 4.841515999999999,
        "question": "How many singers are from each country?",
        "db_id": "concert_singer",
        "gold_query": "SELECT country ,  count(*) FROM singer GROUP BY country"
    },
    {
        "baseline_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "final_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "input_tokens": 1449,
        "output_tokens": 138,
        "time": 5.310734000000011,
        "question": "List all song names by singers above the average age.",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "final_sql": "SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer)",
        "input_tokens": 1598,
        "output_tokens": 140,
        "time": 5.216730291999994,
        "question": "What are all the song names by singers who are older than average?",
        "db_id": "concert_singer",
        "gold_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"
    },
    {
        "baseline_sql": "SELECT location, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1526,
        "output_tokens": 127,
        "time": 5.676279749999992,
        "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT location, name FROM station WHERE capacity BETWEEN 5000 AND 10000",
        "final_sql": "SELECT Location, Name FROM stadium WHERE Capacity BETWEEN 5000 AND 10000;",
        "input_tokens": 1558,
        "output_tokens": 97,
        "time": 4.410384417000003,
        "question": "What are the locations and names of all stations with capacity between 5000 and 10000?",
        "db_id": "concert_singer",
        "gold_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"
    },
    {
        "baseline_sql": "SELECT max(Capacity), avg(Capacity) FROM stadium",
        "final_sql": "SELECT MAX(Capacity), AVG(Capacity) FROM stadium;",
        "input_tokens": 1356,
        "output_tokens": 56,
        "time": 3.444108708999991,
        "question": "What is the maximum capacity and the average of all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select max(capacity), average from stadium"
    },
    {
        "baseline_sql": "SELECT avg(Capacity), max(Capacity) FROM stadium",
        "final_sql": "SELECT AVG(Capacity), MAX(Capacity) FROM stadium;",
        "input_tokens": 1343,
        "output_tokens": 56,
        "time": 3.928746457999992,
        "question": "What is the average and maximum capacities for all stadiums ?",
        "db_id": "concert_singer",
        "gold_query": "select avg(capacity) ,  max(capacity) from stadium"
    },
    {
        "baseline_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium) LIMIT 1",
        "final_sql": "SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium) LIMIT 1;",
        "input_tokens": 1548,
        "output_tokens": 171,
        "time": 6.636821041999994,
        "question": "What is the name and capacity for the stadium with highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID GROUP BY c.Stadium_ID HAVING AVG(c.Average) = (SELECT MAX(Average) FROM concert) LIMIT 1",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium AS s JOIN (SELECT Stadium_ID, AVG(Average) AS avg_attendance    FROM concert    GROUP BY Stadium_ID) AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.avg_attendance = (SELECT MAX(avg_attendance) FROM (SELECT Stadium_ID, AVG(Average) AS avg_attendance FROM concert GROUP BY Stadium_ID) AS c) LIMIT 1",
        "input_tokens": 1804,
        "output_tokens": 353,
        "time": 11.101318583000008,
        "question": "What is the name and capacity for the stadium with the highest average attendance?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = 2014 OR Year = 2015",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "input_tokens": 1505,
        "output_tokens": 155,
        "time": 5.930509125000015,
        "question": "How many concerts are there in year 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Year = '2014' OR Year = '2015'",
        "input_tokens": 1577,
        "output_tokens": 125,
        "time": 6.042415207999994,
        "question": "How many concerts occurred in 2014 or 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"
    },
    {
        "baseline_sql": "SELECT s.Name, COUNT(c.concert_ID) AS num_concerts\nFROM stadium AS s\nJOIN concert AS c ON s.Stadium_ID = c.Stadium_ID\nGROUP BY s.Name",
        "final_sql": "SELECT s.Name AS stadium_name, COUNT(c.concert_ID) AS num_concerts FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name, c.Stadium_ID;",
        "input_tokens": 1734,
        "output_tokens": 251,
        "time": 610.5142760000001,
        "question": "Show the stadium name and the number of concerts in each stadium.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT s.Name, COUNT(c.concert_ID) \nFROM stadium s \nJOIN concert c ON s.Stadium_ID = c.Stadium_ID \nGROUP BY s.Name;",
        "final_sql": "SELECT s.Name, COUNT(c.concert_ID) FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID;",
        "input_tokens": 1592,
        "output_tokens": 201,
        "time": 7.565776249999999,
        "question": "For each stadium, how many concerts play there?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"
    },
    {
        "baseline_sql": "SELECT s.Name, s.Capacity\nFROM stadium s\nJOIN concert c ON s.Stadium_ID = c.Stadium_ID\nWHERE c.Year >= '2014'\nGROUP BY s.Name, s.Capacity\nHAVING COUNT(c.concert_ID) = (\n    SELECT MAX(concert_count)\n    FROM (\n        SELECT COUNT(*) AS concert_count\n        FROM concert\n        WHERE Year >= '2014'\n        GROUP BY Stadium_ID\n    )\n)",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Name, s.Capacity ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;",
        "input_tokens": 1795,
        "output_tokens": 318,
        "time": 10.63057891699998,
        "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT s.name, s.capacity FROM stadium AS s JOIN concert AS c ON s.stadium_id  =  c.stadium_id WHERE c.year > 2013 GROUP BY c.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > 2013 ORDER BY c.Year DESC, c.concert_ID DESC LIMIT 1;",
        "input_tokens": 1740,
        "output_tokens": 312,
        "time": 10.602391041000033,
        "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1503,
        "output_tokens": 156,
        "time": 6.75669275000007,
        "question": "Which year has most number of concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1574,
        "output_tokens": 176,
        "time": 6.744043499999975,
        "question": "What is the year that had the most concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "input_tokens": 1438,
        "output_tokens": 131,
        "time": 5.6790693330000295,
        "question": "Show the stadium names without any concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert)",
        "input_tokens": 1484,
        "output_tokens": 131,
        "time": 6.439630875000034,
        "question": "What are the names of the stadiums without any concerts?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"
    },
    {
        "baseline_sql": "SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30",
        "final_sql": "SELECT Country FROM singer WHERE Age > 40 INTERSECT SELECT Country FROM singer WHERE Age < 30;",
        "input_tokens": 1547,
        "output_tokens": 166,
        "time": 5.55189170899996,
        "question": "Show countries where a singer above age 40 and a singer below 30 are from.",
        "db_id": "concert_singer",
        "gold_query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');",
        "input_tokens": 1619,
        "output_tokens": 197,
        "time": 7.305668624999953,
        "question": "Show names for all stadiums except for stadiums having a concert in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
        "final_sql": "SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014')",
        "input_tokens": 1684,
        "output_tokens": 210,
        "time": 7.420903542000019,
        "question": "What are the names of all stadiums that did not have a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"
    },
    {
        "baseline_sql": "SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID) AS num_singers\nFROM concert AS C\nJOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID\nGROUP BY C.concert_Name, C.Theme",
        "final_sql": "SELECT C.concert_Name, C.Theme, COUNT(SIC.Singer_ID) AS num_singers FROM concert AS C JOIN singer_in_concert AS SIC ON C.concert_ID = SIC.concert_ID GROUP BY C.concert_Name, C.Theme;",
        "input_tokens": 1687,
        "output_tokens": 285,
        "time": 9.877314834000003,
        "question": "Show the name and theme for all concerts and the number of singers in each concert.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"
    },
    {
        "baseline_sql": "SELECT concert_Name ,  Theme ,  COUNT(Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID",
        "final_sql": "SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID, concert.concert_Name, concert.Theme;",
        "input_tokens": 1588,
        "output_tokens": 234,
        "time": 7.631114750000052,
        "question": "What are the names , themes , and number of singers for every concert ?",
        "db_id": "concert_singer",
        "gold_query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"
    },
    {
        "baseline_sql": "SELECT T1.Name, COUNT(T2.concert_ID) FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name",
        "final_sql": "SELECT s.Name, COUNT(c.concert_ID) FROM singer AS s JOIN singer_in_concert AS sic ON s.Singer_ID = sic.Singer_ID JOIN concert AS c ON sic.concert_ID = c.concert_ID GROUP BY s.Name;",
        "input_tokens": 1686,
        "output_tokens": 258,
        "time": 8.464920000000006,
        "question": "List singer names and number of concerts for each singer.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT Singer_Name ,  COUNT(*) AS Number_of_Concerts FROM singer_in_concert GROUP BY Singer_Name",
        "final_sql": "SELECT singer.Name, COUNT(*) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1512,
        "output_tokens": 162,
        "time": 5.758957708000025,
        "question": "What are the names of the singers and number of concerts for each person?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"
    },
    {
        "baseline_sql": "SELECT DISTINCT T2.Name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_ID = T2.concert_ID WHERE T1.Year = '2014'",
        "final_sql": "SELECT DISTINCT singer.Name FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID JOIN singer ON singer_in_concert.Singer_ID = singer.Singer_ID WHERE concert.Year = '2014'",
        "input_tokens": 1745,
        "output_tokens": 265,
        "time": 8.511028624999994,
        "question": "List all singer names in concerts in year 2014.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID JOIN concert c ON sc.concert_ID = c.concert_ID WHERE c.Year = \"2014\"",
        "final_sql": "SELECT DISTINCT s.Name FROM singer s JOIN singer_in_concert sc ON s.Singer_ID = sc.Singer_ID JOIN concert c ON sc.concert_ID = c.concert_ID WHERE c.Year = \"2014\"",
        "input_tokens": 1716,
        "output_tokens": 258,
        "time": 8.412535166999987,
        "question": "What are the names of the singers who performed in a concert in 2014?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"
    },
    {
        "baseline_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "final_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%'",
        "input_tokens": 1595,
        "output_tokens": 112,
        "time": 4.595414750000032,
        "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT T1.Name, T1.Country FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Song_Name LIKE \"%Hey%\"",
        "final_sql": "SELECT Name, Country FROM singer WHERE Song_Name LIKE \"%Hey%\"",
        "input_tokens": 1724,
        "output_tokens": 195,
        "time": 6.838236166999991,
        "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?",
        "db_id": "concert_singer",
        "gold_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"
    },
    {
        "baseline_sql": "SELECT t1.Name, t1.Location FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year = '2014' INTERSECT SELECT t1.Name, t1.Location FROM stadium AS t1 JOIN concert AS t2 ON t1.Stadium_ID = t2.Stadium_ID WHERE t2.Year = '2015'",
        "final_sql": "SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2014' INTERSECT SELECT s.Name, s.Location FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year = '2015'",
        "input_tokens": 1901,
        "output_tokens": 372,
        "time": 11.212269083000024,
        "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
        "final_sql": "SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2014' INTERSECT SELECT T1.Name, T1.Location FROM stadium AS T1 JOIN concert AS T2 ON T1.Stadium_ID = T2.Stadium_ID WHERE T2.Year = '2015'",
        "input_tokens": 2005,
        "output_tokens": 312,
        "time": 9.88440295800001,
        "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?",
        "db_id": "concert_singer",
        "gold_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 )",
        "input_tokens": 1705,
        "output_tokens": 282,
        "time": 9.574242292000008,
        "question": "Find the number of concerts happened in the stadium with the highest capacity .",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1)",
        "final_sql": "SELECT COUNT(*) FROM concert WHERE Stadium_ID = (   SELECT Stadium_ID   FROM stadium   ORDER BY Capacity DESC   LIMIT 1 )",
        "input_tokens": 1703,
        "output_tokens": 295,
        "time": 10.001189875000023,
        "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?",
        "db_id": "concert_singer",
        "gold_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE weight > 10",
        "final_sql": "SELECT count(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1344,
        "output_tokens": 137,
        "time": 5.2709115409999185,
        "question": "Find the number of pets whose weight is heavier than 10.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE weight > 10",
        "final_sql": "SELECT count(*) FROM Pets WHERE weight > 10;",
        "input_tokens": 1249,
        "output_tokens": 117,
        "time": 6.394244042000082,
        "question": "How many pets have a greater weight than 10?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM pets WHERE weight  >  10"
    },
    {
        "baseline_sql": "SELECT weight FROM dogs ORDER BY age LIMIT 1",
        "final_sql": "SELECT weight FROM Pets ORDER BY pet_age LIMIT 1;",
        "input_tokens": 1124,
        "output_tokens": 87,
        "time": 4.039724708999984,
        "question": "Find the weight of the youngest dog.",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog'",
        "final_sql": "SELECT MIN(weight) FROM Pets WHERE PetType = 'Dog'",
        "input_tokens": 1226,
        "output_tokens": 168,
        "time": 6.294413959000053,
        "question": "How much does the youngest dog weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(weight) ,  PetType FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT MAX(weight), PetType FROM Pets GROUP BY PetType;",
        "input_tokens": 1309,
        "output_tokens": 163,
        "time": 6.703473207999991,
        "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, MAX(weight) AS max_weight FROM Pets GROUP BY PetType;",
        "input_tokens": 1191,
        "output_tokens": 115,
        "time": 4.772368540999992,
        "question": "List the maximum weight and type for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Pets WHERE PetID IN (SELECT PetID FROM Has_Pet WHERE StuID IN (SELECT StuID FROM Student WHERE Age > 20))",
        "final_sql": "SELECT COUNT(*) FROM Pets WHERE PetID IN (   SELECT PetID   FROM Has_Pet   WHERE StuID IN (     SELECT StuID     FROM Student     WHERE Age > 20   ) )",
        "input_tokens": 1673,
        "output_tokens": 370,
        "time": 11.294826417000081,
        "question": "Find number of pets owned by students who are older than 20.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.age  >  20",
        "final_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Age > 20;",
        "input_tokens": 1442,
        "output_tokens": 261,
        "time": 8.452306542000088,
        "question": "How many pets are owned by students that have an age greater than 20?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"F\" AND T3.PetType = \"dog\"",
        "final_sql": "SELECT COUNT(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"F\" AND T3.PetType = \"dog\"",
        "input_tokens": 1747,
        "output_tokens": 444,
        "time": 13.98038004099999,
        "question": "Find the number of dog pets that are raised by female students (with sex F).",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T1.PetID  =  T3.PetID WHERE T2.sex  =  \"F\" AND T3.PetType  =  \"Dog\"",
        "final_sql": "SELECT count(*) FROM Has_Pet AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T1.PetID = T3.PetID WHERE T2.Sex = \"F\" AND T3.PetType = \"Dog\"",
        "input_tokens": 1587,
        "output_tokens": 385,
        "time": 11.823948458000018,
        "question": "How many dog pets are raised by female students?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT PetType) FROM Pets",
        "final_sql": "SELECT count(DISTINCT PetType) FROM Pets;",
        "input_tokens": 1090,
        "output_tokens": 71,
        "time": 3.6915103329999965,
        "question": "Find the number of distinct type of pets.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT PetType) FROM Pets",
        "final_sql": "SELECT count(DISTINCT PetType) FROM Pets;",
        "input_tokens": 1095,
        "output_tokens": 69,
        "time": 3.4633603329999687,
        "question": "How many different types of pet are there?",
        "db_id": "pets_1",
        "gold_query": "SELECT count(DISTINCT pettype) FROM pets"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\"",
        "final_sql": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" OR T3.PetType = \"Dog\"",
        "input_tokens": 1535,
        "output_tokens": 326,
        "time": 10.803158832999884,
        "question": "Find the first name of students who have cat or dog pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'",
        "final_sql": "SELECT DISTINCT Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'cat' OR T3.PetType = 'dog'",
        "input_tokens": 1570,
        "output_tokens": 353,
        "time": 10.392514083000151,
        "question": "What are the first names of every student who has a cat or dog as a pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT fname FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\")) AND StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Dog\"))",
        "final_sql": "SELECT Fname FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"Cat\"   ) ) AND StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"Dog\"   ) )",
        "input_tokens": 1637,
        "output_tokens": 445,
        "time": 13.359381332999874,
        "question": "Find the first name of students who have both cat and dog pets .",
        "db_id": "pets_1",
        "gold_query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" AND T1.StuID IN (SELECT T1.StuID FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Dog\")",
        "final_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = \"Cat\" AND T1.StuID IN (   SELECT T1.StuID   FROM Student AS T1   JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID   JOIN Pets AS T3 ON T2.PetID = T3.PetID   WHERE T3.PetType = \"Dog\" )",
        "input_tokens": 1736,
        "output_tokens": 482,
        "time": 13.769041125000058,
        "question": "What are the students' first names who have both cats and dogs as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"
    },
    {
        "baseline_sql": "SELECT S.Major, S.Age FROM Student AS S WHERE S.StuID NOT IN (SELECT HP.StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'Cat')",
        "final_sql": "SELECT S.Major, S.Age FROM Student AS S LEFT JOIN Has_Pet AS HP ON S.StuID = HP.StuID LEFT JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType IS NULL OR P.PetType <> 'Cat'",
        "input_tokens": 1647,
        "output_tokens": 384,
        "time": 11.721254042000055,
        "question": "Find the major and age of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT S.Major, S.Age FROM Student AS S WHERE S.StuID NOT IN (SELECT HP.StuID FROM Has_Pet AS HP JOIN Pets AS P ON HP.PetID = P.PetID WHERE P.PetType = 'Cat')",
        "final_sql": "SELECT S.Major, S.Age FROM Student AS S WHERE S.StuID NOT IN (   SELECT HP.StuID   FROM Has_Pet AS HP   JOIN Pets AS P ON HP.PetID = P.PetID   WHERE P.PetType = 'Cat' )",
        "input_tokens": 1536,
        "output_tokens": 304,
        "time": 9.405681917000038,
        "question": "What major is every student who does not own a cat as a pet, and also how old are they?",
        "db_id": "pets_1",
        "gold_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'Cat'))",
        "final_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = 'Cat'   ) )",
        "input_tokens": 1387,
        "output_tokens": 238,
        "time": 7.790973541999847,
        "question": "Find the id of students who do not have a cat pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE PetType = 'Cat')",
        "final_sql": "SELECT StuID FROM Student WHERE StuID NOT IN (   SELECT StuID   FROM Has_Pet   INNER JOIN Pets ON Has_Pet.PetID = Pets.PetID   WHERE PetType = 'Cat' )",
        "input_tokens": 1373,
        "output_tokens": 235,
        "time": 8.615409250000084,
        "question": "What are the ids of the students who do not own cats as pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT s.Fname, s.Age\nFROM Student s\nJOIN Has_Pet hp ON s.StuID = hp.StuID\nJOIN Pets p ON hp.PetID = p.PetID\nWHERE p.PetType = 'dog'\nAND s.StuID NOT IN (\n    SELECT s.StuID\n    FROM Student s\n    JOIN Has_Pet hp ON s.StuID = hp.StuID\n    JOIN Pets p ON hp.PetID = p.PetID\n    WHERE p.PetType = 'cat'\n)",
        "final_sql": "SELECT s.Fname, s.Age FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'dog' AND s.StuID NOT IN (   SELECT s.StuID   FROM Student s   JOIN Has_Pet hp ON s.StuID = hp.StuID   JOIN Pets p ON hp.PetID = p.PetID   WHERE p.PetType = 'cat' )",
        "input_tokens": 1626,
        "output_tokens": 433,
        "time": 12.988427083000033,
        "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (SELECT T4.StuID FROM Has_Pet AS T4 JOIN Pets AS T5 ON T4.PetID = T5.PetID WHERE T5.PetType = 'cat')",
        "final_sql": "SELECT T1.Fname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID JOIN Pets AS T3 ON T2.PetID = T3.PetID WHERE T3.PetType = 'dog' AND T1.StuID NOT IN (SELECT T4.StuID            FROM Has_Pet AS T4            JOIN Pets AS T5 ON T4.PetID = T5.PetID            WHERE T5.PetType = 'cat')",
        "input_tokens": 1764,
        "output_tokens": 486,
        "time": 14.10293558300009,
        "question": "What is the first name of every student who has a dog but does not have a cat?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"
    },
    {
        "baseline_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "final_sql": "SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets)",
        "input_tokens": 1268,
        "output_tokens": 128,
        "time": 5.541327666999905,
        "question": "Find the type and weight of the youngest pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1",
        "final_sql": "SELECT PetType, weight FROM Pets ORDER BY pet_age ASC, weight ASC LIMIT 1;",
        "input_tokens": 1495,
        "output_tokens": 278,
        "time": 9.26989383299997,
        "question": "What type of pet is the youngest animal, and how much does it weigh?",
        "db_id": "pets_1",
        "gold_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"
    },
    {
        "baseline_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "final_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;",
        "input_tokens": 1186,
        "output_tokens": 106,
        "time": 5.271584583000049,
        "question": "Find the id and weight of all pets whose age is older than 1.",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1",
        "final_sql": "SELECT PetID, weight FROM Pets WHERE pet_age > 1;",
        "input_tokens": 1269,
        "output_tokens": 95,
        "time": 4.764772875000062,
        "question": "What is the id and weight of every pet who is older than 1?",
        "db_id": "pets_1",
        "gold_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(pet_age), MAX(pet_age) FROM Pets GROUP BY PetType;",
        "input_tokens": 1317,
        "output_tokens": 148,
        "time": 5.884189291999974,
        "question": "Find the average and maximum age for each type of pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT avg(pet_age), max(pet_age), PetType FROM Pets GROUP BY PetType",
        "final_sql": "SELECT AVG(pet_age), MAX(pet_age), PetType FROM Pets GROUP BY PetType;",
        "input_tokens": 1256,
        "output_tokens": 164,
        "time": 6.192241916000057,
        "question": "What is the average and maximum age for each pet type?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;",
        "final_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType;",
        "input_tokens": 1264,
        "output_tokens": 134,
        "time": 5.542344834000005,
        "question": "Find the average weight for each pet type.",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "final_sql": "SELECT PetType, AVG(weight) FROM Pets GROUP BY PetType",
        "input_tokens": 1213,
        "output_tokens": 134,
        "time": 5.616374958000051,
        "question": "What is the average weight for each type of pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"
    },
    {
        "baseline_sql": "SELECT s.fname, s.age FROM student s INNER JOIN has_pet hp ON s.StuID = hp.StuID",
        "final_sql": "SELECT s.Fname, s.Age FROM Student s INNER JOIN Has_Pet hp ON s.StuID = hp.StuID",
        "input_tokens": 1273,
        "output_tokens": 163,
        "time": 5.987343875000079,
        "question": "Find the first name and age of students who have a pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "final_sql": "SELECT DISTINCT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID",
        "input_tokens": 1362,
        "output_tokens": 170,
        "time": 6.807248125000115,
        "question": "What are the different first names and ages of the students who do have pets?",
        "db_id": "pets_1",
        "gold_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"
    },
    {
        "baseline_sql": "SELECT p.PetID FROM Pets AS p JOIN Has_Pet AS hp ON p.PetID = hp.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "final_sql": "SELECT p.PetID FROM Pets AS p JOIN Has_Pet AS hp ON p.PetID = hp.PetID JOIN Student AS s ON hp.StuID = s.StuID WHERE s.LName = 'Smith'",
        "input_tokens": 1571,
        "output_tokens": 338,
        "time": 11.462691083999971,
        "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'",
        "final_sql": "SELECT PetID FROM Has_Pet JOIN Student ON Has_Pet.StuID = Student.StuID WHERE LName = 'Smith'",
        "input_tokens": 1355,
        "output_tokens": 216,
        "time": 7.728525541999943,
        "question": "What is the id of the pet owned by the student whose last name is 'Smith'?",
        "db_id": "pets_1",
        "gold_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"
    },
    {
        "baseline_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        "final_sql": "SELECT T1.StuID, COUNT(T2.PetID) AS num_pets FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID;",
        "input_tokens": 1586,
        "output_tokens": 306,
        "time": 9.467417541000032,
        "question": "Find the number of pets for each student who has any pet and student id.",
        "db_id": "pets_1",
        "gold_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"
    },
    {
        "baseline_sql": "SELECT T1.StuID, count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        "final_sql": "SELECT T1.StuID, count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID",
        "input_tokens": 1458,
        "output_tokens": 250,
        "time": 8.139312833999838,
        "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .",
        "db_id": "pets_1",
        "gold_query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"
    },
    {
        "baseline_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "final_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(PetID) > 1)",
        "input_tokens": 1347,
        "output_tokens": 197,
        "time": 6.808771959000069,
        "question": "Find the first name and gender of student who have more than one pet.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Fname, Sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet GROUP BY StuID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;",
        "input_tokens": 1422,
        "output_tokens": 243,
        "time": 8.240305916999887,
        "question": "What is the first name and gender of the all the students who have more than one pet?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT LName FROM Student WHERE StuID IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = \"Cat\" AND pet_age = 3))",
        "final_sql": "SELECT LName FROM Student WHERE StuID IN (   SELECT StuID   FROM Has_Pet   WHERE PetID IN (     SELECT PetID     FROM Pets     WHERE PetType = \"cat\"     AND pet_age = 3   ) )",
        "input_tokens": 1646,
        "output_tokens": 395,
        "time": 12.129075374999957,
        "question": "Find the last name of the student who has a cat that is age 3.",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' AND p.pet_age = 3;",
        "final_sql": "SELECT s.LName FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'Cat' AND p.pet_age = 3;",
        "input_tokens": 1587,
        "output_tokens": 315,
        "time": 10.177821458999915,
        "question": "What is the last name of the student who has a cat that is 3 years old?",
        "db_id": "pets_1",
        "gold_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "final_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "input_tokens": 1475,
        "output_tokens": 205,
        "time": 7.107837750000044,
        "question": "Find the average age of students who do not have any pet .",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "final_sql": "SELECT AVG(Age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pet)",
        "input_tokens": 1412,
        "output_tokens": 220,
        "time": 7.837659667000025,
        "question": "What is the average age for all students who do not own any pets ?",
        "db_id": "pets_1",
        "gold_query": "select avg(age) from student where stuid not in (select stuid from has_pet)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM continents",
        "final_sql": "SELECT count(*) FROM continents;",
        "input_tokens": 1495,
        "output_tokens": 77,
        "time": 4.248884500000031,
        "question": "How many continents are there?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM continents",
        "final_sql": "SELECT COUNT(*) FROM continents;",
        "input_tokens": 1484,
        "output_tokens": 70,
        "time": 4.356052042000101,
        "question": "What is the number of continents?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CONTINENTS;"
    },
    {
        "baseline_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
        "final_sql": "SELECT T1.ContId, T1.Continent, COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId, T1.Continent;",
        "input_tokens": 1831,
        "output_tokens": 193,
        "time": 7.013527999999951,
        "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT continents.ContId, continents.Continent, count(countries.CountryId) \nFROM continents \nJOIN countries ON continents.ContId = countries.Continent \nGROUP BY continents.ContId, continents.Continent",
        "final_sql": "SELECT continents.ContId, continents.Continent, count(countries.CountryId) FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;",
        "input_tokens": 1867,
        "output_tokens": 256,
        "time": 8.344957957999895,
        "question": "For each continent, list its id, name, and how many countries it has?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countries",
        "final_sql": "SELECT count(*) FROM countries;",
        "input_tokens": 1499,
        "output_tokens": 61,
        "time": 4.042671500000097,
        "question": "How many countries are listed?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countries;",
        "final_sql": "SELECT count(*) FROM countries;",
        "input_tokens": 1662,
        "output_tokens": 178,
        "time": 6.7089858330000425,
        "question": "How many countries exist?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM COUNTRIES;"
    },
    {
        "baseline_sql": "SELECT T1.FullName, T1.Id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "final_sql": "SELECT T1.FullName, T1.Id, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id;",
        "input_tokens": 1890,
        "output_tokens": 254,
        "time": 9.360808291000012,
        "question": "How many models does each car maker produce? List maker full name, id and the number.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
        "final_sql": "SELECT T1.Id, T1.FullName, COUNT(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName;",
        "input_tokens": 1843,
        "output_tokens": 209,
        "time": 7.037623749999966,
        "question": "What is the full name of each car maker, along with its id and how many models it produces?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data WHERE Horsepower = (SELECT MIN(Horsepower) FROM cars_data) LIMIT 1;",
        "final_sql": "SELECT \"Model\" FROM \"car_names\" JOIN \"cars_data\" ON \"car_names\".\"MakeId\" = \"cars_data\".\"Id\" ORDER BY \"Horsepower\" LIMIT 1;",
        "input_tokens": 1756,
        "output_tokens": 275,
        "time": 8.930786915999988,
        "question": "Which model of the car has the minimum horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId ORDER BY T1.Horsepower ASC LIMIT 1",
        "final_sql": "SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId ORDER BY T1.Horsepower ASC LIMIT 1",
        "input_tokens": 1907,
        "output_tokens": 306,
        "time": 9.98343141700002,
        "question": "What is the model of the car with the smallest amount of horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "final_sql": "SELECT Model FROM model_list WHERE ModelId IN (   SELECT Maker   FROM car_makers   WHERE Id IN (     SELECT MakeId     FROM car_names     WHERE Model IN (       SELECT Id       FROM cars_data       WHERE Weight < (         SELECT AVG(Weight)         FROM cars_data       )     )   ) )",
        "input_tokens": 1667,
        "output_tokens": 212,
        "time": 7.404587374999892,
        "question": "Find the model of the car whose weight is below the average weight.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT model FROM cars_data WHERE Weight < (SELECT AVG(Weight) FROM cars_data)",
        "final_sql": "SELECT Model FROM model_list WHERE ModelId IN (   SELECT Maker   FROM car_makers   WHERE Id IN (     SELECT MakeId     FROM car_names     WHERE Model IN (       SELECT Id       FROM cars_data       WHERE Weight < (         SELECT AVG(Weight)         FROM cars_data       )     )   ) )",
        "input_tokens": 1698,
        "output_tokens": 218,
        "time": 7.540654291999999,
        "question": "What is the model for the car with a weight smaller than the average?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"
    },
    {
        "baseline_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.ModelId = car_names.MakeId JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "final_sql": "SELECT DISTINCT car_makers.Maker FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker JOIN car_names ON model_list.Model = car_names.Model JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Year = 1970",
        "input_tokens": 2063,
        "output_tokens": 331,
        "time": 11.016786082999943,
        "question": "Find the name of the makers that produced some cars in the year of 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.ModelId = cn.MakeId JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;",
        "final_sql": "SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.ModelId = cn.MakeId JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;",
        "input_tokens": 1930,
        "output_tokens": 320,
        "time": 10.589716834,
        "question": "What is the name of the different car makers who produced a car in 1970?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"
    },
    {
        "baseline_sql": "SELECT T1.Make, T2.ProductionTime FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.Id = T2.Id WHERE T2.Year = (SELECT MIN(Year) FROM cars_data)",
        "final_sql": "SELECT T1.FullName AS Make, T2.Year AS ProductionTime FROM car_makers AS T1 JOIN car_names AS T2 ON T1.Id = T2.Maker JOIN cars_data AS T3 ON T2.MakeId = T3.Id WHERE T3.Year = (SELECT MIN(Year) FROM cars_data)",
        "input_tokens": 1972,
        "output_tokens": 254,
        "time": 8.860115709000183,
        "question": "Find the make and production time of the cars that were produced in the earliest year?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT cm.Maker, cd.Year \nFROM car_makers cm \nJOIN model_list ml ON cm.Id = ml.Maker \nJOIN car_names cn ON ml.ModelId = cn.MakeId \nJOIN cars_data cd ON cn.Model = cd.Model \nORDER BY cd.Year ASC \nLIMIT 1",
        "final_sql": "SELECT cm.Maker, cd.Year FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker JOIN car_names cn ON ml.ModelId = cn.MakeId JOIN cars_data cd ON cn.Model = cd.Model ORDER BY cd.Year ASC LIMIT 1",
        "input_tokens": 1890,
        "output_tokens": 332,
        "time": 9.976407791999918,
        "question": "What is the maker of the carr produced in the earliest year and what year was it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"
    },
    {
        "baseline_sql": "SELECT DISTINCT Model\nFROM model_list\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN cars_data ON car_makers.Id = cars_data.Id\nWHERE cars_data.Year > 1980",
        "final_sql": "SELECT DISTINCT model_list.Model FROM model_list JOIN car_makers ON model_list.Maker = car_makers.Id JOIN cars_data ON car_makers.Id = cars_data.Id WHERE cars_data.Year > 1980;",
        "input_tokens": 1759,
        "output_tokens": 241,
        "time": 8.549262291999867,
        "question": "Which distinct car models are the produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Model FROM cards WHERE Year > 1980",
        "final_sql": "SELECT DISTINCT Model FROM model_list JOIN cars_data ON model_list.ModelId = cars_data.Id WHERE cars_data.Year > 1980;",
        "input_tokens": 1608,
        "output_tokens": 99,
        "time": 4.961276415999919,
        "question": "What are the different models for the cards produced after 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"
    },
    {
        "baseline_sql": "SELECT C.Continent, COUNT(DISTINCT CM.Id) AS Count\nFROM continents C\nJOIN countries CO ON C.ContId = CO.Continent\nJOIN car_makers CM ON CO.CountryId = CM.Country\nGROUP BY C.Continent;",
        "final_sql": "SELECT C.Continent, COUNT(DISTINCT CM.Maker) AS Count FROM continents C JOIN countries CO ON C.ContId = CO.Continent JOIN car_makers CM ON CO.CountryId = CM.Country GROUP BY C.Continent;",
        "input_tokens": 2088,
        "output_tokens": 375,
        "time": 12.440259665999974,
        "question": "How many car makers are there in each continents? List the continent name and the count.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT c.Continent, COUNT(cm.Id) \nFROM continents c \nJOIN countries co ON c.ContId = co.Continent \nJOIN car_makers cm ON co.CountryId = cm.Country \nGROUP BY c.Continent",
        "final_sql": "SELECT c.Continent, COUNT(cm.Id) FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;",
        "input_tokens": 1924,
        "output_tokens": 325,
        "time": 10.763275000000021,
        "question": "What is the name of each continent and how many car makers are there in each one?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"
    },
    {
        "baseline_sql": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(*) DESC LIMIT 1;",
        "final_sql": "SELECT T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryName ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1903,
        "output_tokens": 278,
        "time": 9.11568970899998,
        "question": "Which of the countries has the most car makers? List the country name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1849,
        "output_tokens": 262,
        "time": 8.531664874999933,
        "question": "What is the name of the country with the most car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT CM.FullName, COUNT(*) FROM car_makers CM JOIN model_list ML ON CM.Id = ML.Maker GROUP BY CM.FullName",
        "final_sql": "SELECT CM.FullName, COUNT(*) FROM car_makers CM JOIN model_list ML ON CM.Id = ML.Maker GROUP BY CM.FullName;",
        "input_tokens": 1881,
        "output_tokens": 204,
        "time": 7.325988125000094,
        "question": "How many car models are produced by each maker ? Only list the count and the maker full name .",
        "db_id": "car_1",
        "gold_query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.FullName, COUNT(T2.ModelId) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id, T1.FullName",
        "final_sql": "SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id, car_makers.FullName;",
        "input_tokens": 1913,
        "output_tokens": 262,
        "time": 610.271355333,
        "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?",
        "db_id": "car_1",
        "gold_query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"
    },
    {
        "baseline_sql": "SELECT Accelerate FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model WHERE t3.Model = \"amc hornet sportabout (sw)\"",
        "final_sql": "SELECT Accelerate FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model WHERE t3.Model = \"amc hornet sportabout (sw)\"",
        "input_tokens": 1871,
        "output_tokens": 296,
        "time": 11.090069333999963,
        "question": "What is the accelerate of the car make amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE Model = 'amc hornet sportabout (sw)')",
        "final_sql": "SELECT Accelerate FROM cars_data WHERE Id = (SELECT MakeId FROM car_names WHERE LOWER(Model) = LOWER('amc hornet sportabout (sw)'))",
        "input_tokens": 1669,
        "output_tokens": 154,
        "time": 7.116289958999914,
        "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'",
        "final_sql": "SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'France'",
        "input_tokens": 1717,
        "output_tokens": 234,
        "time": 7.835601708000013,
        "question": "How many car makers are there in france?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "final_sql": "SELECT count(DISTINCT Maker) FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'France')",
        "input_tokens": 1706,
        "output_tokens": 209,
        "time": 8.032590208000329,
        "question": "What is the number of makers of care in France?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'USA';",
        "final_sql": "SELECT count(*) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.Country = 'USA';",
        "input_tokens": 1606,
        "output_tokens": 145,
        "time": 5.892467458000283,
        "question": "How many car models are produced in the usa?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM car_makers cm\nJOIN countries c ON cm.Country = c.CountryId\nWHERE c.CountryName = 'United States'",
        "final_sql": "SELECT count(*) FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId WHERE c.CountryName = 'United States'",
        "input_tokens": 1730,
        "output_tokens": 238,
        "time": 8.546522957999969,
        "question": "What is the count of the car models produced in the United States?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"
    },
    {
        "baseline_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "final_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "input_tokens": 1674,
        "output_tokens": 137,
        "time": 8.339331916999981,
        "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4",
        "final_sql": "SELECT AVG(MPG) FROM cars_data WHERE Cylinders = 4;",
        "input_tokens": 1612,
        "output_tokens": 109,
        "time": 4.697792958000264,
        "question": "What is the average miles per gallon of all the cards with 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
    },
    {
        "baseline_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "final_sql": "SELECT MIN(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974;",
        "input_tokens": 1716,
        "output_tokens": 134,
        "time": 5.335649084000124,
        "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "final_sql": "SELECT min(Weight) FROM cars_data WHERE Cylinders = 8 AND Year = 1974",
        "input_tokens": 1685,
        "output_tokens": 133,
        "time": 5.232803375000003,
        "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?",
        "db_id": "car_1",
        "gold_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974"
    },
    {
        "baseline_sql": "SELECT cm.Maker, ml.Model\nFROM car_makers cm\nJOIN model_list ml ON cm.Id = ml.Maker",
        "final_sql": "SELECT cm.Maker, ml.Model FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker",
        "input_tokens": 1603,
        "output_tokens": 158,
        "time": 5.823432624999896,
        "question": "What are all the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "final_sql": "SELECT Maker, Model FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker",
        "input_tokens": 1573,
        "output_tokens": 138,
        "time": 5.725387667000177,
        "question": "What are the makers and models?",
        "db_id": "car_1",
        "gold_query": "SELECT Maker ,  Model FROM MODEL_LIST;"
    },
    {
        "baseline_sql": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId;",
        "final_sql": "SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country;",
        "input_tokens": 1814,
        "output_tokens": 189,
        "time": 7.6849111659998925,
        "question": "What are the countries having at least one car maker? List name and id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId",
        "final_sql": "SELECT countries.CountryId, countries.CountryName FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country",
        "input_tokens": 1834,
        "output_tokens": 202,
        "time": 6.8054367919999095,
        "question": "What are the names and ids of all countries with at least one car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
        "final_sql": "SELECT count(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150",
        "input_tokens": 1629,
        "output_tokens": 126,
        "time": 5.882822499999747,
        "question": "What is the number of the cars with horsepower more than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Horsepower > 150",
        "final_sql": "SELECT count(*) FROM cars_data WHERE CAST(Horsepower AS INTEGER) > 150",
        "input_tokens": 1575,
        "output_tokens": 126,
        "time": 5.265711082999587,
        "question": "What is the number of cars with a horsepower greater than 150?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
    },
    {
        "baseline_sql": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "final_sql": "SELECT Year, AVG(Weight) FROM cars_data GROUP BY Year",
        "input_tokens": 1596,
        "output_tokens": 109,
        "time": 4.657581583999672,
        "question": "What is the average weight of cars each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT avg(weight), year FROM players_data GROUP BY year",
        "final_sql": "SELECT AVG(Weight), Year FROM cars_data GROUP BY Year",
        "input_tokens": 1584,
        "output_tokens": 119,
        "time": 4.971279041999878,
        "question": "What is the average weight and year for each year?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"
    },
    {
        "baseline_sql": "SELECT T2.CountryName\nFROM car_makers AS T1\nJOIN countries AS T2 ON T1.Country = T2.CountryId\nJOIN continents AS T3 ON T2.Continent = T3.ContId\nWHERE T3.Continent = 'Europe'\nGROUP BY T2.CountryName\nHAVING count(*) >= 3",
        "final_sql": "SELECT T2.CountryName FROM car_makers AS T1 JOIN countries AS T2 ON T1.Country = T2.CountryId JOIN continents AS T3 ON T2.Continent = T3.ContId WHERE T3.Continent = 'Europe' GROUP BY T2.CountryName HAVING COUNT(T1.Id) >= 3",
        "input_tokens": 2016,
        "output_tokens": 423,
        "time": 615.7007303340001,
        "question": "Which countries in europe have at least 3 car manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT c.CountryName\nFROM countries AS c\nJOIN car_makers AS cm ON c.CountryId = cm.Country\nGROUP BY c.CountryName\nHAVING COUNT(cm.Id) >= 3\nAND c.Continent IN (\n    SELECT ContId\n    FROM continents\n    WHERE Continent = 'Europe'\n)",
        "final_sql": "SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN continents AS co ON c.Continent = co.ContId WHERE co.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3",
        "input_tokens": 1959,
        "output_tokens": 331,
        "time": 611.0723226659998,
        "question": "What are the names of all European countries with at least 3 manufacturers?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"
    },
    {
        "baseline_sql": "SELECT max(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 3 GROUP BY T2.Make",
        "final_sql": "SELECT MAX(T1.Horsepower), T2.Make FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.ModelId WHERE T1.Cylinders = 3 GROUP BY T2.Make;",
        "input_tokens": 1972,
        "output_tokens": 321,
        "time": 9.987693957999909,
        "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MAX(cars_data.Horsepower), car_makers.Maker\nFROM cars_data\nJOIN model_list ON cars_data.Model = model_list.ModelId\nJOIN car_makers ON model_list.Maker = car_makers.Id\nWHERE cars_data.Cylinders = 3",
        "final_sql": "SELECT MAX(cars_data.Horsepower), car_makers.Maker FROM cars_data JOIN model_list ON cars_data.Model = model_list.ModelId JOIN car_makers ON model_list.Maker = car_makers.Id WHERE cars_data.Cylinders = 3;",
        "input_tokens": 1888,
        "output_tokens": 265,
        "time": 11.299731458000224,
        "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?",
        "db_id": "car_1",
        "gold_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1",
        "final_sql": "SELECT m.Model FROM cars_data c JOIN car_names n ON c.Id = n.MakeId JOIN model_list m ON n.Model = m.Model ORDER BY c.MPG DESC LIMIT 1",
        "input_tokens": 1745,
        "output_tokens": 227,
        "time": 8.108729292000135,
        "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM cars_data ORDER BY MPG DESC LIMIT 1",
        "final_sql": "SELECT model_list.Model FROM cars_data JOIN model_list ON cars_data.Id = model_list.ModelId ORDER BY cars_data.MPG DESC LIMIT 1",
        "input_tokens": 1637,
        "output_tokens": 162,
        "time": 6.545642167000096,
        "question": "What is the car model with the highest mpg ?",
        "db_id": "car_1",
        "gold_query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"
    },
    {
        "baseline_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "final_sql": "SELECT AVG(Horsepower) FROM cars_data WHERE Year < 1980",
        "input_tokens": 1597,
        "output_tokens": 130,
        "time": 6.081488709000041,
        "question": "What is the average horsepower of the cars before 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
    },
    {
        "baseline_sql": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980",
        "final_sql": "SELECT avg(Horsepower) FROM cars_data WHERE Year < 1980;",
        "input_tokens": 1604,
        "output_tokens": 133,
        "time": 6.121734209000351,
        "question": "What is the average horsepower for all cars produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select avg(horsepower) from cars_data where year  <  1980;"
    },
    {
        "baseline_sql": "SELECT AVG(Edispl) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo')",
        "final_sql": "SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo'",
        "input_tokens": 1630,
        "output_tokens": 168,
        "time": 6.353403375000198,
        "question": "What is the average edispl of the cars of model volvo?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT AVG(Edispl) FROM cars_data\nJOIN car_names ON cars_data.Id = car_names.MakeId\nJOIN model_list ON car_names.Model = model_list.Model\nJOIN car_makers ON model_list.Maker = car_makers.Id\nJOIN countries ON car_makers.Country = countries.CountryId\nWHERE countries.CountryName = 'Sweden' AND car_makers.Maker = 'Volvo'",
        "final_sql": "SELECT AVG(Edispl) FROM cars_data JOIN car_names ON cars_data.MakeId = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id JOIN countries ON car_makers.Country = countries.CountryId WHERE car_names.Make = 'Volvo' AND countries.CountryName = 'Sweden'",
        "input_tokens": 2010,
        "output_tokens": 460,
        "time": 14.961687750000237,
        "question": "What is the average edispl for all volvos?",
        "db_id": "car_1",
        "gold_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"
    },
    {
        "baseline_sql": "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders",
        "final_sql": "SELECT MAX(Accelerate), Cylinders FROM cars_data GROUP BY Cylinders;",
        "input_tokens": 1602,
        "output_tokens": 135,
        "time": 5.98772450000024,
        "question": "What is the maximum accelerate for different number of cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
        "final_sql": "SELECT Cylinders, MAX(Accelerate) FROM cars_data GROUP BY Cylinders",
        "input_tokens": 1540,
        "output_tokens": 100,
        "time": 5.051530791999994,
        "question": "What is the maximum accelerate for all the different cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"
    },
    {
        "baseline_sql": "SELECT Model FROM model_list GROUP BY Model ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Model, COUNT(*) AS VersionCount FROM model_list GROUP BY Model ORDER BY VersionCount DESC LIMIT 1",
        "input_tokens": 1731,
        "output_tokens": 226,
        "time": 7.643727041999682,
        "question": "Which model has the most version(make) of cars?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Model FROM car_names GROUP BY Model ORDER BY count(DISTINCT Make) DESC LIMIT 1",
        "final_sql": "SELECT Model FROM car_names GROUP BY Model ORDER BY COUNT(DISTINCT Make) DESC LIMIT 1;",
        "input_tokens": 1611,
        "output_tokens": 150,
        "time": 5.693173083999682,
        "question": "What model has the most different versions?",
        "db_id": "car_1",
        "gold_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "input_tokens": 1646,
        "output_tokens": 148,
        "time": 5.609087999999701,
        "question": "How many cars have more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 4;",
        "input_tokens": 1646,
        "output_tokens": 155,
        "time": 6.0815853750000315,
        "question": "What is the number of cars with more than 4 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980",
        "input_tokens": 1682,
        "output_tokens": 146,
        "time": 6.177292500000021,
        "question": "how many cars were produced in 1980?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980;",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Year = 1980;",
        "input_tokens": 1750,
        "output_tokens": 169,
        "time": 6.22738441599995,
        "question": "In 1980, how many cars were made?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = \"American Motor Company\";",
        "final_sql": "SELECT count(*) FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id",
        "input_tokens": 1872,
        "output_tokens": 235,
        "time": 8.490857292000328,
        "question": "How many car models were produced by the maker with full name American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT count(*) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'American Motor Company'",
        "final_sql": "SELECT count(*) FROM model_list ml JOIN car_makers cm ON ml.Maker = cm.Id WHERE cm.Maker = 'American Motor Company'",
        "input_tokens": 1674,
        "output_tokens": 168,
        "time": 6.279741166999884,
        "question": "What is the number of car models created by the car maker American Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"
    },
    {
        "baseline_sql": "SELECT T1.FullName, T1.Id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING count(*) > 3;",
        "final_sql": "SELECT FullName, Id FROM car_makers WHERE Id IN (   SELECT Maker   FROM model_list   GROUP BY Maker   HAVING COUNT(*) > 3 );",
        "input_tokens": 2032,
        "output_tokens": 280,
        "time": 9.644756291999784,
        "question": "Which makers designed more than 3 car models? List full name and the id.",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.Id ,  T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3",
        "final_sql": "SELECT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(ml.ModelId) > 3;",
        "input_tokens": 1910,
        "output_tokens": 259,
        "time": 8.68917862499984,
        "question": "What are the names and ids of all makers with more than 3 models?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT DISTINCT m.Model FROM model_list AS m JOIN car_makers AS cm ON m.Maker = cm.Id JOIN cars_data AS cd ON cm.Id = cd.Id WHERE cm.FullName = \"General Motors\" OR cd.Weight > 3500",
        "final_sql": "SELECT DISTINCT m.Model FROM model_list AS m JOIN car_makers AS cm ON m.Maker = cm.Id JOIN cars_data AS cd ON cm.Id = cd.Id WHERE cm.FullName = \"General Motors\" OR cd.Weight > 3500",
        "input_tokens": 1937,
        "output_tokens": 317,
        "time": 10.47498483299978,
        "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.Maker = 'General Motors' OR T1.Weight > 3500",
        "final_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN cars_data AS T3 ON T1.ModelId = T3.Id WHERE T2.Maker = 'General Motors' OR T3.Weight > 3500;",
        "input_tokens": 1900,
        "output_tokens": 264,
        "time": 9.094919000000118,
        "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"
    },
    {
        "baseline_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000",
        "final_sql": "SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;",
        "input_tokens": 1799,
        "output_tokens": 196,
        "time": 6.9799856670001645,
        "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000 AND T1.Year IN (SELECT Year FROM cars_data WHERE Weight > 3000)",
        "final_sql": "SELECT DISTINCT T1.Year FROM cars_data AS T1 WHERE T1.Weight < 4000 AND T1.Year IN (SELECT Year FROM cars_data WHERE Weight > 3000)",
        "input_tokens": 1854,
        "output_tokens": 200,
        "time": 8.135556415999872,
        "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?",
        "db_id": "car_1",
        "gold_query": "select distinct year from cars_data where weight between 3000 and 4000;"
    },
    {
        "baseline_sql": "SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT max(Accelerate) FROM cars_data) LIMIT 1",
        "final_sql": "SELECT CAST(Horsepower AS INTEGER) AS Horsepower FROM cars_data WHERE Accelerate = (SELECT max(Accelerate) FROM cars_data) LIMIT 1",
        "input_tokens": 1790,
        "output_tokens": 274,
        "time": 10.142358957999932,
        "question": "What is the horsepower of the car with the largest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
        "final_sql": "SELECT Horsepower FROM cars_data ORDER BY Accelerate DESC LIMIT 1",
        "input_tokens": 1811,
        "output_tokens": 262,
        "time": 8.794268125000144,
        "question": "What is the horsepower of the car with the greatest accelerate?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'))",
        "final_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Model = 'volvo'))",
        "input_tokens": 1942,
        "output_tokens": 372,
        "time": 12.08212474999982,
        "question": "For model volvo, how many cylinders does the car with the least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MIN(cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo'))",
        "final_sql": "SELECT MIN(Cylinders) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo') AND Accelerate = (SELECT MIN(Accelerate) FROM cars_data WHERE Id IN (SELECT MakeId FROM car_names WHERE Make = 'volvo'))",
        "input_tokens": 1827,
        "output_tokens": 282,
        "time": 9.386700000000019,
        "question": "For a volvo model, how many cylinders does the version with least accelerate have?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Accelerate  >  (SELECT max(Accelerate) FROM cars_data WHERE Horsepower  =  (SELECT max(Horsepower) FROM cars_data))",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT Accelerate           FROM cars_data           WHERE Horsepower = (SELECT MAX(Horsepower)                     FROM cars_data))",
        "input_tokens": 1795,
        "output_tokens": 250,
        "time": 8.200230666999687,
        "question": "How many cars have a larger accelerate than the car with the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Horsepower) FROM cars_data)",
        "final_sql": "SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT MAX(CAST(Horsepower AS number)) FROM cars_data)",
        "input_tokens": 1752,
        "output_tokens": 216,
        "time": 7.717173416000151,
        "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"
    },
    {
        "baseline_sql": "SELECT count(*) FROM (SELECT Country, count(*) AS num_car_makers FROM car_makers GROUP BY Country HAVING num_car_makers > 2) AS T1",
        "final_sql": "SELECT count(*) FROM (SELECT Country, count(*) AS num_car_makers FROM car_makers GROUP BY Country HAVING num_car_makers > 2) AS T1",
        "input_tokens": 1786,
        "output_tokens": 248,
        "time": 8.74095408400035,
        "question": "How many countries has more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Country) FROM car_makers GROUP BY Country HAVING COUNT(*) > 2;",
        "final_sql": "SELECT COUNT(DISTINCT Country) FROM car_makers WHERE Country IN (SELECT Country FROM car_makers GROUP BY Country HAVING COUNT(*) > 2);",
        "input_tokens": 1908,
        "output_tokens": 323,
        "time": 11.208218042000226,
        "question": "What is the number of countries with more than 2 car makers ?",
        "db_id": "car_1",
        "gold_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT count(*) FROM cars_data WHERE Cylinders > 6",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6;",
        "input_tokens": 1674,
        "output_tokens": 173,
        "time": 6.478348625000308,
        "question": "How many cars has over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "final_sql": "SELECT COUNT(*) FROM cars_data WHERE Cylinders > 6",
        "input_tokens": 1663,
        "output_tokens": 181,
        "time": 6.5162515840002015,
        "question": "What is the number of carsw ith over 6 cylinders?",
        "db_id": "car_1",
        "gold_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
    },
    {
        "baseline_sql": "SELECT T1.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.ModelId = T2.ModelId WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "final_sql": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1",
        "input_tokens": 1936,
        "output_tokens": 345,
        "time": 11.907462334000229,
        "question": "For the cars with 4 cylinders, which model has the largest horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT T1.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.ModelId = T2.ModelId WHERE T1.Cylinders = 4 GROUP BY T1.Model ORDER BY T1.Horsepower DESC LIMIT 1",
        "final_sql": "SELECT T2.Model FROM cars_data AS T1 JOIN model_list AS T2 ON T1.Model = T2.Model WHERE T1.Cylinders = 4 GROUP BY T2.Model ORDER BY T1.Horsepower DESC LIMIT 1",
        "input_tokens": 1904,
        "output_tokens": 291,
        "time": 9.260734792000221,
        "question": "For all of the 4 cylinder cars, which model has the most horsepower?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT MakeId FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders <= 3)",
        "final_sql": "SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;",
        "input_tokens": 1938,
        "output_tokens": 265,
        "time": 8.845299417000206,
        "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.",
        "db_id": "car_1",
        "gold_query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"
    },
    {
        "baseline_sql": "SELECT MakeId, Make FROM car_names WHERE MakeId IN (SELECT Id FROM cars_data WHERE Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND Cylinders < 4)",
        "final_sql": "SELECT car_names.MakeId, car_names.Make FROM car_names JOIN cars_data ON car_names.MakeId = cars_data.Id WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders < 4;",
        "input_tokens": 1874,
        "output_tokens": 239,
        "time": 9.1910956669999,
        "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?",
        "db_id": "car_1",
        "gold_query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"
    },
    {
        "baseline_sql": "SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "final_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980;",
        "input_tokens": 1799,
        "output_tokens": 181,
        "time": 7.086268832999849,
        "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT max(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "final_sql": "SELECT MAX(MPG) FROM cars_data WHERE Cylinders = 8 OR Year < 1980",
        "input_tokens": 1768,
        "output_tokens": 199,
        "time": 6.804997375000312,
        "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?",
        "db_id": "car_1",
        "gold_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"
    },
    {
        "baseline_sql": "SELECT t4.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id  =  t2.MakeId JOIN model_list AS t3 ON t2.Model  =  t3.Model JOIN car_makers AS t4 ON t3.Maker  =  t4.Id WHERE t1.Weight < 3500 AND t4.Maker != 'Ford Motor Company'",
        "final_sql": "SELECT t4.Model FROM cars_data AS t1 JOIN car_names AS t2 ON t1.Id = t2.MakeId JOIN model_list AS t3 ON t2.Model = t3.Model JOIN car_makers AS t4 ON t3.Maker = t4.Id WHERE t1.Weight < 3500 AND t4.Maker != 'Ford Motor Company'",
        "input_tokens": 2125,
        "output_tokens": 395,
        "time": 12.859256249999817,
        "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.Model = T4.Model WHERE T4.Weight < 3500 AND T2.Maker <> 'Ford Motor Company'",
        "final_sql": "SELECT DISTINCT T1.Model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id JOIN car_names AS T3 ON T1.ModelId = T3.MakeId JOIN cars_data AS T4 ON T3.Model = T4.Model WHERE T4.Weight < 3500 AND T2.Maker <> 'Ford Motor Company'",
        "input_tokens": 2055,
        "output_tokens": 393,
        "time": 12.017530416999762,
        "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?",
        "db_id": "car_1",
        "gold_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"
    },
    {
        "baseline_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "final_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "input_tokens": 1710,
        "output_tokens": 149,
        "time": 6.603845832999923,
        "question": "What are the name of the countries where there is not a single car maker?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "final_sql": "SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers)",
        "input_tokens": 1671,
        "output_tokens": 149,
        "time": 6.149111041999731,
        "question": "What are the names of the countries with no car makers?",
        "db_id": "car_1",
        "gold_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"
    },
    {
        "baseline_sql": "SELECT Id, Maker FROM car_makers WHERE Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(*) >= 2) AND Id IN (SELECT Maker FROM model_list GROUP BY Maker HAVING COUNT(DISTINCT Maker) > 3);",
        "final_sql": "SELECT cm.Id, cm.Maker FROM car_makers cm JOIN model_list ml ON cm.Id = ml.Maker GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(DISTINCT cm.Maker) > 3;",
        "input_tokens": 2061,
        "output_tokens": 331,
        "time": 10.38011008400008,
        "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .",
        "db_id": "car_1",
        "gold_query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id  =  T2.Maker JOIN car_names AS T3 ON T2.ModelId  =  T3.MakeId GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T3.MakeId) > 3",
        "final_sql": "SELECT T1.Id, T1.Maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker JOIN car_names AS T3 ON T2.ModelId = T3.MakeId GROUP BY T1.Id, T1.Maker HAVING COUNT(DISTINCT T2.ModelId) >= 2 AND COUNT(DISTINCT T3.MakeId) > 3;",
        "input_tokens": 2105,
        "output_tokens": 431,
        "time": 13.043768874999842,
        "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"
    },
    {
        "baseline_sql": "SELECT T1.CountryId, T1.CountryName FROM countries AS T1 WHERE T1.CountryId IN (SELECT T2.Country FROM car_makers AS T2 GROUP BY T2.Country HAVING COUNT(*) > 3) OR T1.CountryId IN (SELECT T3.Country FROM car_makers AS T4 JOIN model_list AS T3 ON T4.Id = T3.Maker WHERE T3.Model = 'fiat')",
        "final_sql": "SELECT c.CountryId, c.CountryName FROM countries c WHERE c.CountryId IN (   SELECT cm.Country   FROM car_makers cm   GROUP BY cm.Country   HAVING COUNT(*) > 3 ) OR c.CountryId IN (   SELECT cm.Country   FROM car_makers cm   JOIN model_list ml ON cm.Id = ml.Maker   WHERE ml.Model = 'fiat' )",
        "input_tokens": 2388,
        "output_tokens": 433,
        "time": 13.551453208000112,
        "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?",
        "db_id": "car_1",
        "gold_query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT c.CountryId, c.CountryName FROM countries AS c WHERE c.CountryId IN (SELECT cm.Country FROM car_makers AS cm GROUP BY cm.Country HAVING COUNT(DISTINCT cm.Id) > 3) OR c.CountryId IN (SELECT cm.Country FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker WHERE ml.Model = 'fiat')",
        "final_sql": "SELECT c.CountryId, c.CountryName FROM countries AS c WHERE c.CountryId IN (   SELECT cm.Country   FROM car_makers AS cm   GROUP BY cm.Country   HAVING COUNT(DISTINCT cm.Id) > 3 ) OR c.CountryId IN (   SELECT cm.Country   FROM car_makers AS cm   JOIN model_list AS ml ON cm.Id = ml.Maker   WHERE ml.Model = 'fiat' )",
        "input_tokens": 2125,
        "output_tokens": 468,
        "time": 13.654824083999756,
        "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?",
        "db_id": "car_1",
        "gold_query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"
    },
    {
        "baseline_sql": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "final_sql": "SELECT Country FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "input_tokens": 1245,
        "output_tokens": 124,
        "time": 6.099876083000254,
        "question": "Which country does Airline \"JetBlue Airways\" belong to?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT country FROM airlines WHERE abbreviation = 'B6'",
        "final_sql": "SELECT Country FROM airlines WHERE Abbreviation = 'B6';",
        "input_tokens": 1200,
        "output_tokens": 143,
        "time": 5.8951988750000055,
        "question": "What country is Jetblue Airways affiliated with?",
        "db_id": "flight_2",
        "gold_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = \"JetBlue Airways\"",
        "input_tokens": 1313,
        "output_tokens": 132,
        "time": 5.318348541999967,
        "question": "What is the abbreviation of Airline \"JetBlue Airways\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "final_sql": "SELECT Abbreviation FROM airlines WHERE Airline = 'Jetblue Airways'",
        "input_tokens": 1190,
        "output_tokens": 132,
        "time": 5.05435666700032,
        "question": "Which abbreviation corresponds to Jetblue Airways?",
        "db_id": "flight_2",
        "gold_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = \"USA\"",
        "input_tokens": 1169,
        "output_tokens": 103,
        "time": 4.939851667000312,
        "question": "List all airline names and their abbreviations in \"USA\".",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "final_sql": "SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA'",
        "input_tokens": 1282,
        "output_tokens": 135,
        "time": 5.269199458000003,
        "question": "What are the airline names and abbreviations for airlines in the USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = \"Anthony\"",
        "input_tokens": 1210,
        "output_tokens": 142,
        "time": 5.77837558300007,
        "question": "List the airport code and name in the city of Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "final_sql": "SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony'",
        "input_tokens": 1308,
        "output_tokens": 146,
        "time": 5.974519332999989,
        "question": "Give the airport code and airport name corresonding to the city Anthony.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines",
        "final_sql": "SELECT count(*) FROM airlines;",
        "input_tokens": 1072,
        "output_tokens": 67,
        "time": 3.912466708000011,
        "question": "How many airlines do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines",
        "final_sql": "SELECT COUNT(*) FROM airlines",
        "input_tokens": 1087,
        "output_tokens": 69,
        "time": 4.17161566599998,
        "question": "What is the total number of airlines?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airports",
        "final_sql": "SELECT count(*) FROM airports;",
        "input_tokens": 1075,
        "output_tokens": 66,
        "time": 3.7301238750001176,
        "question": "How many airports do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM airports",
        "final_sql": "SELECT COUNT(*) AS \"Number of Airports\" FROM airports;",
        "input_tokens": 1131,
        "output_tokens": 83,
        "time": 4.4591122920001,
        "question": "Return the number of  airports.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRPORTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1068,
        "output_tokens": 61,
        "time": 3.293675708000137,
        "question": "How many flights do we have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights",
        "final_sql": "SELECT COUNT(*) FROM flights;",
        "input_tokens": 1075,
        "output_tokens": 61,
        "time": 3.3502882920001866,
        "question": "Return the number of flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS"
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "input_tokens": 1188,
        "output_tokens": 130,
        "time": 5.472899583000071,
        "question": "Which airline has abbreviation 'UAL'?",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "final_sql": "SELECT Airline FROM airlines WHERE Abbreviation = 'UAL'",
        "input_tokens": 1276,
        "output_tokens": 136,
        "time": 5.724773165999977,
        "question": "Give the airline with abbreviation 'UAL'.",
        "db_id": "flight_2",
        "gold_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA';",
        "final_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA';",
        "input_tokens": 1130,
        "output_tokens": 84,
        "time": 4.107801375000236,
        "question": "How many airlines are from USA?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines WHERE Country  =  'USA'",
        "final_sql": "SELECT count(*) FROM airlines WHERE Country = 'USA'",
        "input_tokens": 1173,
        "output_tokens": 87,
        "time": 4.501100124999994,
        "question": "Return the number of airlines in the USA.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
    },
    {
        "baseline_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "input_tokens": 1198,
        "output_tokens": 91,
        "time": 4.583895542000391,
        "question": "Which city and country is the Alton airport at?",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "final_sql": "SELECT City, Country FROM airports WHERE AirportName = 'Alton'",
        "input_tokens": 1229,
        "output_tokens": 100,
        "time": 4.6501291669997045,
        "question": "Give the city and country for the Alton airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO';",
        "input_tokens": 1283,
        "output_tokens": 128,
        "time": 5.296355457999653,
        "question": "What is the airport name for airport 'AKO'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode = 'AKO'",
        "input_tokens": 1332,
        "output_tokens": 132,
        "time": 5.6889185830000315,
        "question": "Return the name of the airport with code 'AKO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "input_tokens": 1236,
        "output_tokens": 122,
        "time": 5.245904999999766,
        "question": "What are airport names at City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "final_sql": "SELECT AirportName FROM airports WHERE City = 'Aberdeen'",
        "input_tokens": 1261,
        "output_tokens": 118,
        "time": 4.854791875000046,
        "question": "What are the names of airports in Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1260,
        "output_tokens": 168,
        "time": 5.892817832999754,
        "question": "How many flights depart from 'APG'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1199,
        "output_tokens": 99,
        "time": 4.061824625000099,
        "question": "Count the number of flights departing from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "input_tokens": 1123,
        "output_tokens": 95,
        "time": 4.461061999999856,
        "question": "How many flights have destination ATO?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ATO'",
        "input_tokens": 1112,
        "output_tokens": 91,
        "time": 4.596086084000035,
        "question": "Count the number of flights into ATO.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\";",
        "final_sql": "SELECT count(*) FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\";",
        "input_tokens": 1297,
        "output_tokens": 228,
        "time": 7.871669791999921,
        "question": "How many flights depart from City Aberdeen?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = 'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.AirportName = 'Aberdeen'",
        "input_tokens": 1364,
        "output_tokens": 233,
        "time": 7.931975957999839,
        "question": "Return the number of flights departing from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights\nJOIN airports ON flights.DestAirport = airports.AirportCode\nWHERE airports.City = 'Aberdeen';",
        "final_sql": "SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';",
        "input_tokens": 1231,
        "output_tokens": 187,
        "time": 6.91157499999963,
        "question": "How many flights arriving in Aberdeen city?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport  =  'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport = 'ABZ'",
        "input_tokens": 1295,
        "output_tokens": 136,
        "time": 5.98934300000019,
        "question": "Return the number of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport  =  t2.AirportCode JOIN airports AS t3 ON t1.DestAirport  =  t3.AirportCode WHERE t2.City  =  \"Aberdeen\" AND t3.City  =  \"Ashley\"",
        "final_sql": "SELECT count(*) FROM flights AS t1 JOIN airports AS t2 ON t1.SourceAirport = t2.AirportCode JOIN airports AS t3 ON t1.DestAirport = t3.AirportCode WHERE t2.City = 'Aberdeen' AND t3.City = 'Ashley'",
        "input_tokens": 1803,
        "output_tokens": 482,
        "time": 14.205959041999904,
        "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';",
        "final_sql": "SELECT count(*) FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';",
        "input_tokens": 1305,
        "output_tokens": 174,
        "time": 6.467172749999918,
        "question": "How many flights fly from Aberdeen to Ashley?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'",
        "final_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways'",
        "input_tokens": 1348,
        "output_tokens": 229,
        "time": 7.841726291000214,
        "question": "How many flights does airline 'JetBlue Airways' have?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airlines WHERE Airline = 'Jetblue Airways'",
        "final_sql": "SELECT count(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'Jetblue Airways')",
        "input_tokens": 1220,
        "output_tokens": 119,
        "time": 4.9608365419999245,
        "question": "Give the number of Jetblue Airways flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS t1 JOIN airlines AS t2 ON t1.Airline = t2.uid WHERE t2.Airline = 'United Airlines' AND t1.DestAirport = 'ASY'",
        "final_sql": "SELECT count(*) FROM flights AS t1 JOIN airlines AS t2 ON t1.Airline = t2.uid WHERE t2.Airline = 'United Airlines' AND t1.DestAirport = 'ASY'",
        "input_tokens": 1535,
        "output_tokens": 324,
        "time": 10.39632037499996,
        "question": "How many 'United Airlines' flights go to Airport 'ASY'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY'",
        "final_sql": "SELECT COUNT(*) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport = 'ASY'",
        "input_tokens": 1552,
        "output_tokens": 372,
        "time": 11.714337749999686,
        "question": "Count the number of United Airlines flights arriving in ASY Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'",
        "final_sql": "SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD'",
        "input_tokens": 1509,
        "output_tokens": 333,
        "time": 11.10418374999972,
        "question": "How many 'United Airlines' flights depart from Airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD'",
        "final_sql": "SELECT COUNT(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = 'United Airlines' AND T1.SourceAirport = 'AHD'",
        "input_tokens": 1515,
        "output_tokens": 302,
        "time": 10.801285208000081,
        "question": "Return the number of United Airlines flights leaving from AHD Airport.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid JOIN airports AS T3 ON T1.destairport = T3.airportcode WHERE T2.airline = 'United Airlines' AND T3.city = 'Aberdeen';",
        "final_sql": "SELECT count(*) FROM flights AS T1 JOIN airlines AS T2 ON T1.airline = T2.uid JOIN airports AS T3 ON T1.destairport = T3.airportcode WHERE T2.Airline = 'United Airlines' AND T3.City = 'Aberdeen';",
        "input_tokens": 1623,
        "output_tokens": 461,
        "time": 13.969808124999872,
        "question": "How many United Airlines flights go to City 'Aberdeen'?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Airline = 'United Airlines' AND ap.City = 'Aberdeen'",
        "final_sql": "SELECT count(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid JOIN airports AS ap ON f.DestAirport = ap.AirportCode WHERE a.Abbreviation = 'UA' AND ap.City = 'Aberdeen'",
        "input_tokens": 1533,
        "output_tokens": 357,
        "time": 11.830989957999918,
        "question": "Count the number of United Airlines flights that arrive in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT a.City\nFROM airports AS a\nJOIN flights AS f ON a.AirportCode = f.DestAirport\nGROUP BY a.City\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1427,
        "output_tokens": 278,
        "time": 9.454817834000096,
        "question": "Which city has most number of arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.City FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport GROUP BY t1.City ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT t1.City FROM airports AS t1 JOIN flights AS t2 ON t1.AirportCode = t2.DestAirport GROUP BY t1.City ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1436,
        "output_tokens": 293,
        "time": 9.678113834000214,
        "question": "Which city has the most frequent destination airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1549,
        "output_tokens": 395,
        "time": 11.956664958999681,
        "question": "Which city has most number of departing flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1260,
        "output_tokens": 164,
        "time": 6.281908750000184,
        "question": "Which city is the most frequent source airport?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1585,
        "output_tokens": 346,
        "time": 11.003944541999772,
        "question": "What is the code of airport that has the highest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1552,
        "output_tokens": 342,
        "time": 10.59245487499993,
        "question": "What is the airport code of the airport with the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1",
        "final_sql": "SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1616,
        "output_tokens": 315,
        "time": 10.382569458000035,
        "question": "What is the code of airport that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1",
        "final_sql": "SELECT T1.AirportCode FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.SourceAirport OR T1.AirportCode = T2.DestAirport GROUP BY T1.AirportCode ORDER BY count(*) ASC LIMIT 1",
        "input_tokens": 1541,
        "output_tokens": 361,
        "time": 11.029587582999739,
        "question": "Give the code of the airport with the least flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Airline, COUNT(*) AS num_flights FROM flights GROUP BY Airline ORDER BY num_flights DESC LIMIT 1;",
        "input_tokens": 1280,
        "output_tokens": 209,
        "time": 7.702891375000036,
        "question": "Which airline has most number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY Airline ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline GROUP BY airlines.Airline ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1350,
        "output_tokens": 260,
        "time": 8.747107790999507,
        "question": "What airline serves the most flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT A.Abbreviation, A.Country\nFROM airlines A\nJOIN flights F ON A.uid = F.Airline\nGROUP BY A.Abbreviation, A.Country\nHAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY Airline))",
        "final_sql": "SELECT A.Abbreviation, A.Country FROM airlines A JOIN flights F ON A.Airline = F.Airline GROUP BY A.Abbreviation, A.Country HAVING COUNT(*) = (SELECT MIN(cnt) FROM (SELECT COUNT(*) as cnt FROM flights GROUP BY Airline))",
        "input_tokens": 1520,
        "output_tokens": 334,
        "time": 11.430536000000757,
        "question": "Find the abbreviation and country of the airline that has fewest number of flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT A.Abbreviation, A.Country\nFROM airlines A\nJOIN flights F ON A.uid = F.Airline\nGROUP BY A.Abbreviation, A.Country\nHAVING COUNT(*) = (SELECT MIN(count) FROM (SELECT COUNT(*) as count FROM flights GROUP BY Airline)) LIMIT 1",
        "final_sql": "SELECT Abbreviation, Country FROM airlines WHERE uid = (SELECT Airline FROM flights GROUP BY Airline ORDER BY COUNT(*) ASC LIMIT 1)",
        "input_tokens": 1568,
        "output_tokens": 298,
        "time": 9.65929374999996,
        "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline WHERE flights.SourceAirport = 'AHD'",
        "final_sql": "SELECT DISTINCT airlines.Airline FROM airlines JOIN flights ON airlines.uid = flights.Airline JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.AirportCode = 'AHD'",
        "input_tokens": 1405,
        "output_tokens": 237,
        "time": 7.928502791000028,
        "question": "What are airlines that have some flight departing from airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'",
        "final_sql": "SELECT DISTINCT Airline FROM flights WHERE SourceAirport = 'AHD'",
        "input_tokens": 1218,
        "output_tokens": 136,
        "time": 5.676024417000008,
        "question": "Which airlines have a flight with source airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'",
        "final_sql": "SELECT DISTINCT Airline FROM flights WHERE DestAirport = 'AHD'",
        "input_tokens": 1210,
        "output_tokens": 134,
        "time": 6.29082895800002,
        "question": "What are airlines that have flights arriving at airport 'AHD'?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights WHERE DestAirport = 'AHD'",
        "final_sql": "SELECT Airline FROM flights WHERE DestAirport = 'AHD'",
        "input_tokens": 1229,
        "output_tokens": 132,
        "time": 5.7872995830002765,
        "question": "Which airlines have a flight with destination airport AHD?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.AirportCode = 'APG' AND T3.AirportCode = 'CVO'",
        "final_sql": "SELECT DISTINCT T1.Airline FROM flights AS T1 JOIN airports AS T2 ON T1.SourceAirport = T2.AirportCode JOIN airports AS T3 ON T1.DestAirport = T3.AirportCode WHERE T2.AirportCode = 'APG' AND T3.AirportCode = 'CVO'",
        "input_tokens": 1690,
        "output_tokens": 387,
        "time": 12.233428542000183,
        "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT A.Airline\nFROM flights AS F\nJOIN airlines AS A ON F.Airline = A.uid\nWHERE F.SourceAirport = 'APG' AND F.DestAirport = 'CVO'\nINTERSECT\nSELECT A.Airline\nFROM flights AS F\nJOIN airlines AS A ON F.Airline = A.uid\nWHERE F.SourceAirport = 'CVO' AND F.DestAirport = 'APG'",
        "final_sql": "SELECT A.Airline FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid WHERE F.SourceAirport = 'APG' AND F.DestAirport = 'CVO' INTERSECT SELECT A.Airline FROM flights AS F JOIN airlines AS A ON F.Airline = A.uid WHERE F.SourceAirport = 'CVO' AND F.DestAirport = 'APG'",
        "input_tokens": 1657,
        "output_tokens": 441,
        "time": 614.2694920839995,
        "question": "Which airlines have departing flights from both APG and CVO airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Airline NOT IN (SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'APG')",
        "final_sql": "SELECT DISTINCT T1.Airline FROM airlines AS T1 JOIN flights AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = 'CVO' AND T1.Airline NOT IN (   SELECT DISTINCT T1.Airline   FROM airlines AS T1   JOIN flights AS T2 ON T1.uid = T2.Airline   WHERE T2.SourceAirport = 'APG' )",
        "input_tokens": 1641,
        "output_tokens": 380,
        "time": 12.947642500000256,
        "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights WHERE SourceAirport = 'APG')",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights WHERE SourceAirport = 'CVO') AND uid NOT IN (SELECT Airline FROM flights)",
        "input_tokens": 1419,
        "output_tokens": 254,
        "time": 8.343045874999916,
        "question": "Which airlines have departures from CVO but not from APG airports?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10;",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) >= 10;",
        "input_tokens": 1250,
        "output_tokens": 138,
        "time": 5.807408791999478,
        "question": "Find all airlines that have at least 10 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) >= 10",
        "input_tokens": 1279,
        "output_tokens": 168,
        "time": 6.315478124999572,
        "question": "Which airlines have at least 10 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline FROM flights GROUP BY Airline HAVING COUNT(*) < 200)",
        "final_sql": "SELECT Airline FROM airlines WHERE uid IN (SELECT Airline        FROM flights        GROUP BY Airline        HAVING COUNT(*) < 200)",
        "input_tokens": 1335,
        "output_tokens": 244,
        "time": 8.175693542000772,
        "question": "Find all airlines that have fewer than 200 flights.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200;",
        "final_sql": "SELECT Airline FROM flights GROUP BY Airline HAVING count(*) < 200;",
        "input_tokens": 1324,
        "output_tokens": 194,
        "time": 7.629378167000141,
        "question": "Which airlines have less than 200 flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = \"United Airlines\")",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = \"United Airlines\")",
        "input_tokens": 1462,
        "output_tokens": 246,
        "time": 8.540032541000073,
        "question": "What are flight numbers of Airline \"United Airlines\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
        "final_sql": "SELECT FlightNo FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines')",
        "input_tokens": 1412,
        "output_tokens": 245,
        "time": 8.137252291999175,
        "question": "Which flight numbers correspond to United Airlines flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = \"APG\"",
        "input_tokens": 1276,
        "output_tokens": 130,
        "time": 5.001402917000632,
        "question": "What are flight numbers of flights departing from Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'APG'",
        "input_tokens": 1209,
        "output_tokens": 108,
        "time": 4.931774874999974,
        "question": "Give the flight numbers of flights leaving from APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = \"APG\"",
        "input_tokens": 1259,
        "output_tokens": 132,
        "time": 4.957813582999734,
        "question": "What are flight numbers of flights arriving at Airport \"APG\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'APG'",
        "input_tokens": 1239,
        "output_tokens": 128,
        "time": 7.631232875000023,
        "question": "Give the flight numbers of flights landing at APG.",
        "db_id": "flight_2",
        "gold_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"",
        "final_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"",
        "input_tokens": 1374,
        "output_tokens": 211,
        "time": 7.319331874999989,
        "question": "What are flight numbers of flights departing from City \"Aberdeen \"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "final_sql": "SELECT FlightNo FROM flights WHERE SourceAirport = 'Aberdeen'",
        "input_tokens": 1204,
        "output_tokens": 128,
        "time": 5.376754750000146,
        "question": "Give the flight numbers of flights leaving from Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"",
        "final_sql": "SELECT FlightNo FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = \"Aberdeen\"",
        "input_tokens": 1378,
        "output_tokens": 220,
        "time": 7.639805625000008,
        "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'",
        "final_sql": "SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen'",
        "input_tokens": 1204,
        "output_tokens": 128,
        "time": 4.951018708999982,
        "question": "Give the flight numbers of flights arriving in Aberdeen.",
        "db_id": "flight_2",
        "gold_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.AirportCode = T2.DestAirport WHERE T1.City = 'Aberdeen' OR T1.City = 'Abilene'",
        "final_sql": "SELECT count(*) FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen' OR airports.City = 'Abilene'",
        "input_tokens": 1473,
        "output_tokens": 267,
        "time": 8.587337500000103,
        "question": "Find the number of flights landing in the city of Aberdeen or Abilene.",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "final_sql": "SELECT count(*) FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');",
        "input_tokens": 1202,
        "output_tokens": 115,
        "time": 6.175640041999941,
        "question": "How many flights land in Aberdeen or Abilene?",
        "db_id": "flight_2",
        "gold_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""
    },
    {
        "baseline_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights)",
        "final_sql": "SELECT AirportName FROM airports WHERE AirportCode NOT IN (   SELECT SourceAirport   FROM flights   UNION   SELECT DestAirport   FROM flights )",
        "input_tokens": 1479,
        "output_tokens": 258,
        "time": 8.944341209000413,
        "question": "Find the name of airports which do not have any flight in and out.",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);",
        "final_sql": "SELECT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);",
        "input_tokens": 1296,
        "output_tokens": 197,
        "time": 7.210167041999739,
        "question": "Which airports do not have departing or arriving flights?",
        "db_id": "flight_2",
        "gold_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM employee;",
        "final_sql": "SELECT count(*) FROM employee;",
        "input_tokens": 1205,
        "output_tokens": 64,
        "time": 3.8336954579999656,
        "question": "How many employees are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT count(*) FROM employee",
        "final_sql": "SELECT COUNT(*) FROM employee;",
        "input_tokens": 1202,
        "output_tokens": 53,
        "time": 3.3266745830005675,
        "question": "Count the number of employees",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) FROM employee"
    },
    {
        "baseline_sql": "SELECT Name FROM employee ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1308,
        "output_tokens": 101,
        "time": 4.377076125000713,
        "question": "Sort employee names by their age in ascending order.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT Name FROM employee ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM employee ORDER BY Age ASC;",
        "input_tokens": 1308,
        "output_tokens": 105,
        "time": 4.722850999999537,
        "question": "List the names of employees and sort in ascending order of age.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee ORDER BY age"
    },
    {
        "baseline_sql": "SELECT City, count(*) FROM employee GROUP BY City",
        "final_sql": "SELECT City, count(*) FROM employee GROUP BY City",
        "input_tokens": 1312,
        "output_tokens": 103,
        "time": 605.8789692090004,
        "question": "What is the number of employees from each city?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT City, count(*) as Employee_Count FROM employee GROUP BY City",
        "final_sql": "SELECT City, COUNT(*) as Employee_Count FROM employee GROUP BY City;",
        "input_tokens": 1343,
        "output_tokens": 156,
        "time": 6.809234834000563,
        "question": "Count the number of employees for each city.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  city FROM employee GROUP BY city"
    },
    {
        "baseline_sql": "SELECT city\nFROM employee\nWHERE age < 30\nGROUP BY city\nHAVING COUNT(*) > 1;",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;",
        "input_tokens": 1510,
        "output_tokens": 203,
        "time": 223.38061262500014,
        "question": "Which cities do more than one employee under age 30 come from?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1",
        "final_sql": "SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(*) > 1;",
        "input_tokens": 1505,
        "output_tokens": 226,
        "time": 8.022668417000204,
        "question": "Find the cities that have more than one employee under age 30.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "final_sql": "SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location;",
        "input_tokens": 1412,
        "output_tokens": 167,
        "time": 6.497528832999706,
        "question": "Find the number of shops in each location.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT Location, COUNT(*) FROM shop GROUP BY Location",
        "final_sql": "SELECT Location, COUNT(Shop_ID) FROM shop GROUP BY Location",
        "input_tokens": 1414,
        "output_tokens": 159,
        "time": 6.39435845800017,
        "question": "How many shops are there in each location?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"
    },
    {
        "baseline_sql": "SELECT t1.Manager_name, t1.District FROM shop AS t1 ORDER BY t1.Number_products DESC LIMIT 1",
        "final_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "input_tokens": 1540,
        "output_tokens": 177,
        "time": 6.602294666000489,
        "question": "Find the manager name and district of the shop whose number of products is the largest.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Manager_name ,  T1.District FROM shop AS T1 JOIN (SELECT Shop_ID, MAX(Number_products) AS max_products FROM shop) AS T2 ON T1.Shop_ID  =  T2.Shop_ID WHERE T1.Number_products  =  T2.max_products",
        "final_sql": "SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop)",
        "input_tokens": 1686,
        "output_tokens": 277,
        "time": 9.262314208000134,
        "question": "What are the manager name and district of the shop that sells the largest number of products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT min(Number_products) AS min_products, max(Number_products) AS max_products FROM shop",
        "final_sql": "SELECT MIN(Number_products) AS min_products, MAX(Number_products) AS max_products FROM shop;",
        "input_tokens": 1237,
        "output_tokens": 66,
        "time": 4.955962207999619,
        "question": "find the minimum and maximum number of products of all stores.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT MIN(Number_products), MAX(Number_products) FROM shop",
        "final_sql": "SELECT MIN(Number_products), MAX(Number_products) FROM shop;",
        "input_tokens": 1268,
        "output_tokens": 52,
        "time": 3.529574875000435,
        "question": "What are the minimum and maximum number of products across all the shops?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop"
    },
    {
        "baseline_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1337,
        "output_tokens": 111,
        "time": 8.237818000000516,
        "question": "Return the name, location and district of all shops in descending order of number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC",
        "final_sql": "SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;",
        "input_tokens": 1371,
        "output_tokens": 100,
        "time": 4.965443334000156,
        "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "input_tokens": 1450,
        "output_tokens": 169,
        "time": 6.189601417000631,
        "question": "Find the names of stores whose number products is more than the average number of products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "final_sql": "SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop)",
        "input_tokens": 1471,
        "output_tokens": 161,
        "time": 5.682216041000174,
        "question": "Which shops' number products is above the average? Give me the shop names.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID GROUP BY T1.Employee_ID ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1641,
        "output_tokens": 271,
        "time": 8.95332983299977,
        "question": "find the name of employee who was awarded the most times in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t1.Name ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT e.Name FROM employee e JOIN evaluation ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1689,
        "output_tokens": 303,
        "time": 9.461792750000313,
        "question": "Which employee received the most awards in evaluations? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = (SELECT MAX(Bonus) FROM evaluation) LIMIT 1",
        "final_sql": "SELECT T1.Name FROM employee AS T1 JOIN evaluation AS T2 ON T1.Employee_ID = T2.Employee_ID WHERE T2.Bonus = (SELECT MAX(Bonus) FROM evaluation) LIMIT 1;",
        "input_tokens": 1706,
        "output_tokens": 331,
        "time": 9.97839062499952,
        "question": "Find the name of the employee who got the highest one time bonus.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.Bonus DESC LIMIT 1",
        "final_sql": "SELECT t1.Name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.Bonus DESC LIMIT 1;",
        "input_tokens": 1651,
        "output_tokens": 279,
        "time": 8.707011082999998,
        "question": "Which employee received the biggest bonus? Give me the employee name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "final_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "input_tokens": 1391,
        "output_tokens": 140,
        "time": 5.4159120000003895,
        "question": "Find the names of employees who never won any award in the evaluation.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "final_sql": "SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)",
        "input_tokens": 1463,
        "output_tokens": 140,
        "time": 5.371802667000338,
        "question": "What are the names of the employees who never received any evaluation?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.Name FROM hiring AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1656,
        "output_tokens": 275,
        "time": 9.261582625000301,
        "question": "What is the name of the shop that is hiring the largest number of employees?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM shop AS T2 JOIN hiring AS T1 ON T2.Shop_ID = T1.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.Name FROM shop AS T2 JOIN hiring AS T1 ON T2.Shop_ID = T1.Shop_ID GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1634,
        "output_tokens": 261,
        "time": 7.86562720800066,
        "question": "Which shop has the most employees? Give me the shop name.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "final_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "input_tokens": 1441,
        "output_tokens": 140,
        "time": 5.45313704199998,
        "question": "Find the name of the shops that do not hire any employee.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "final_sql": "SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring)",
        "input_tokens": 1386,
        "output_tokens": 168,
        "time": 6.497812165999676,
        "question": "Which shops run with no employees? Find the shop names",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"
    },
    {
        "baseline_sql": "SELECT COUNT(*) AS num_employees, shop.Name AS shop_name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name",
        "final_sql": "SELECT COUNT(*) AS num_employees, shop.Name AS shop_name FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;",
        "input_tokens": 1602,
        "output_tokens": 250,
        "time": 8.442441250000229,
        "question": "Find the number of employees hired in each shop; show the shop name as well.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT COUNT(*) AS num_employees, Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, Name",
        "final_sql": "SELECT COUNT(*) AS num_employees, shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID, shop.Name",
        "input_tokens": 1674,
        "output_tokens": 268,
        "time": 8.237600625000596,
        "question": "For each shop, return the number of employees working there and the name of the shop.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"
    },
    {
        "baseline_sql": "SELECT sum(Bonus) FROM evaluation",
        "final_sql": "SELECT sum(Bonus) FROM evaluation;",
        "input_tokens": 1275,
        "output_tokens": 98,
        "time": 4.965600957999413,
        "question": "What is total bonus given in all evaluations?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT sum(Bonus) FROM evaluation",
        "final_sql": "SELECT sum(Bonus) FROM evaluation;",
        "input_tokens": 1262,
        "output_tokens": 74,
        "time": 4.758706874999916,
        "question": "Find the total amount of bonus given in all the evaluations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT sum(bonus) FROM evaluation"
    },
    {
        "baseline_sql": "SELECT * FROM hiring;",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1330,
        "output_tokens": 150,
        "time": 5.98499291600001,
        "question": "Give me all the information about hiring.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT * FROM hiring",
        "final_sql": "SELECT * FROM hiring;",
        "input_tokens": 1345,
        "output_tokens": 151,
        "time": 5.57987970800059,
        "question": "What is all the information about hiring?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT * FROM hiring"
    },
    {
        "baseline_sql": "SELECT District FROM shop WHERE Number_products  <  3000 INTERSECT SELECT District FROM shop WHERE Number_products  >  10000",
        "final_sql": "SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000",
        "input_tokens": 1526,
        "output_tokens": 207,
        "time": 7.724502708000728,
        "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT district FROM shop WHERE number_products  <  3000 INTERSECT SELECT district FROM shop WHERE number_products  >  10000",
        "final_sql": "SELECT district FROM shop WHERE number_products < 3000 AND district IN (   SELECT district   FROM shop   WHERE number_products > 10000 )",
        "input_tokens": 1560,
        "output_tokens": 208,
        "time": 8.338798916999622,
        "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Location) FROM shop",
        "final_sql": "SELECT count(DISTINCT Location) FROM shop;",
        "input_tokens": 1199,
        "output_tokens": 43,
        "time": 3.4286993750001784,
        "question": "How many different store locations are there?",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Location) FROM shop",
        "final_sql": "SELECT count(DISTINCT Location) FROM shop;",
        "input_tokens": 1207,
        "output_tokens": 46,
        "time": 3.2219574579994514,
        "question": "Count the number of distinct store locations.",
        "db_id": "employee_hire_evaluation",
        "gold_query": "SELECT count(DISTINCT LOCATION) FROM shop"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents",
        "final_sql": "SELECT count(*) FROM Documents;",
        "input_tokens": 1266,
        "output_tokens": 57,
        "time": 3.524251875000118,
        "question": "How many documents do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents",
        "final_sql": "SELECT count(*) FROM Documents;",
        "input_tokens": 1256,
        "output_tokens": 57,
        "time": 4.197285041000214,
        "question": "Count the number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents"
    },
    {
        "baseline_sql": "SELECT document_id, document_name, document_description FROM Documents;",
        "final_sql": "SELECT document_id, document_name, document_description FROM Documents;",
        "input_tokens": 1375,
        "output_tokens": 93,
        "time": 4.2342234170000665,
        "question": "List document IDs, document names, and document descriptions for all documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents",
        "final_sql": "SELECT Document_ID, Document_Name, Document_Description FROM Documents;",
        "input_tokens": 1328,
        "output_tokens": 68,
        "time": 3.632342167000388,
        "question": "What are the ids, names, and descriptions for all documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  document_name ,  document_description FROM Documents"
    },
    {
        "baseline_sql": "SELECT d.Document_Name, d.Template_ID\nFROM Documents d\nWHERE d.Document_Description LIKE '%w%'",
        "final_sql": "SELECT d.Document_Name, d.Template_ID FROM Documents d WHERE d.Document_Description LIKE '%w%'",
        "input_tokens": 1459,
        "output_tokens": 132,
        "time": 5.376719500000036,
        "question": "What is the document name and template id for document with description with the letter 'w' in it?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT d.document_name, d.template_id FROM documents AS d WHERE d.document_description LIKE '%w%'",
        "final_sql": "SELECT d.Document_Name, d.Template_ID FROM Documents AS d WHERE d.Document_Description LIKE '%w%'",
        "input_tokens": 1561,
        "output_tokens": 160,
        "time": 5.981436625000242,
        "question": "Return the names and template ids for documents that contain the letter w in their description.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""
    },
    {
        "baseline_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\";",
        "final_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = \"Robbin CV\";",
        "input_tokens": 1496,
        "output_tokens": 137,
        "time": 5.674794415999713,
        "question": "What is the document id, template id and description for document named \"Robbin CV\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "final_sql": "SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV'",
        "input_tokens": 1530,
        "output_tokens": 142,
        "time": 6.189282375000403,
        "question": "Return the document id, template id, and description for the document with the name Robbin CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Template_ID) FROM Documents",
        "final_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents;",
        "input_tokens": 1342,
        "output_tokens": 86,
        "time": 4.344654875000742,
        "question": "How many different templates do all document use?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT Template_ID) FROM Documents",
        "final_sql": "SELECT COUNT(DISTINCT Template_Type_Code) FROM Templates",
        "input_tokens": 1279,
        "output_tokens": 50,
        "time": 3.3206664580002325,
        "question": "Count the number of different templates used for documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(DISTINCT template_id) FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "final_sql": "SELECT count(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = 'PPT'",
        "input_tokens": 1511,
        "output_tokens": 197,
        "time": 6.600881416999982,
        "question": "How many documents are using the template with type code 'PPT'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Documents WHERE Template_Type_Code = \"PPT\"",
        "final_sql": "SELECT COUNT(*) FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"PPT\"",
        "input_tokens": 1438,
        "output_tokens": 161,
        "time": 6.365478875000008,
        "question": "Count the number of documents that use the PPT template type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"
    },
    {
        "baseline_sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",
        "final_sql": "SELECT Template_ID, COUNT(*) AS Number_of_Documents FROM Documents GROUP BY Template_ID;",
        "input_tokens": 1386,
        "output_tokens": 109,
        "time": 4.6500548750000235,
        "question": "Show all template ids and number of documents using each template.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID",
        "final_sql": "SELECT Template_ID, COUNT(*) FROM Documents GROUP BY Template_ID;",
        "input_tokens": 1615,
        "output_tokens": 244,
        "time": 7.829191167000317,
        "question": "What are all different template ids used for documents, and how many times were each of them used?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"
    },
    {
        "baseline_sql": "SELECT T1.Template_ID, T1.Template_Type_Code\nFROM Templates AS T1\nJOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID\nGROUP BY T1.Template_ID, T1.Template_Type_Code\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1701,
        "output_tokens": 314,
        "time": 10.470089832999292,
        "question": "What is the id and type code for the template used by the most documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T.Template_ID, T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID GROUP BY T.Template_ID, T.Template_Type_Code ORDER BY COUNT(D.Document_ID) DESC LIMIT 1",
        "input_tokens": 1677,
        "output_tokens": 259,
        "time": 10.044914291999703,
        "question": "Return the id and type code of the template that is used for the greatest number of documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT template_id FROM Templates WHERE template_id IN (SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1);",
        "final_sql": "SELECT template_id FROM Templates WHERE template_id IN (   SELECT template_id   FROM Documents   GROUP BY template_id   HAVING COUNT(*) > 1 );",
        "input_tokens": 1577,
        "output_tokens": 230,
        "time": 8.501005500000247,
        "question": "Show ids for all templates that are used by more than one document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT template_id FROM Templates WHERE template_id IN (SELECT template_id FROM Documents GROUP BY template_id HAVING count(*) > 1)",
        "final_sql": "SELECT template_id FROM Templates WHERE template_id IN (   SELECT template_id   FROM Documents   GROUP BY template_id   HAVING COUNT(DISTINCT document_id) > 1 )",
        "input_tokens": 1551,
        "output_tokens": 202,
        "time": 7.5011051249994125,
        "question": "What are the template ids of any templates used in more than a single document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "input_tokens": 1537,
        "output_tokens": 193,
        "time": 7.235323707999669,
        "question": "Show ids for all templates not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents)",
        "input_tokens": 1441,
        "output_tokens": 114,
        "time": 4.753294999999525,
        "question": "What are the ids for templates that are not used in any documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Templates;",
        "final_sql": "SELECT count(*) FROM Templates;",
        "input_tokens": 1361,
        "output_tokens": 122,
        "time": 5.479523957999845,
        "question": "How many templates do we have?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT count(*) FROM templates",
        "final_sql": "SELECT COUNT(*) FROM Templates;",
        "input_tokens": 1340,
        "output_tokens": 97,
        "time": 4.140811166000276,
        "question": "Count the number of templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "final_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;",
        "input_tokens": 1410,
        "output_tokens": 91,
        "time": 3.8361166670001694,
        "question": "Show template ids, version numbers, and template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "final_sql": "SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates",
        "input_tokens": 1379,
        "output_tokens": 71,
        "time": 4.238742375000584,
        "question": "What are the ids, version numbers, and type codes for each template?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT DISTINCT template_type_code FROM Templates",
        "final_sql": "SELECT DISTINCT Template_Type_Code FROM Templates;",
        "input_tokens": 1302,
        "output_tokens": 40,
        "time": 2.8481685839997226,
        "question": "Show all distinct template type codes for all templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types",
        "final_sql": "SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;",
        "input_tokens": 1268,
        "output_tokens": 52,
        "time": 3.432886999999937,
        "question": "What are the different template type codes?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "input_tokens": 1520,
        "output_tokens": 162,
        "time": 6.035924167000303,
        "question": "What are the ids of templates with template type code PP or PPT?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT'",
        "input_tokens": 1530,
        "output_tokens": 168,
        "time": 7.9696028329999535,
        "question": "Return the ids of templates that have the code PP or PPT.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
        "final_sql": "SELECT count(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
        "input_tokens": 1377,
        "output_tokens": 90,
        "time": 4.347054584000034,
        "question": "How many templates have template type code CV?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = \"CV\"",
        "final_sql": "SELECT COUNT(*) FROM Templates WHERE Template_Type_Code = 'CV'",
        "input_tokens": 1539,
        "output_tokens": 181,
        "time": 6.972675459000129,
        "question": "Count the number of templates of the type CV.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;",
        "input_tokens": 1597,
        "output_tokens": 201,
        "time": 7.523959875000401,
        "question": "What is the version number and template type code for the template with version number later than 5?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5",
        "final_sql": "SELECT Version_Number, Template_Type_Code FROM Templates WHERE CAST(Version_Number AS INTEGER) > 5;",
        "input_tokens": 1627,
        "output_tokens": 200,
        "time": 6.574196000000484,
        "question": "Return the version numbers and template type codes of templates with a version number greater than 5.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 3336,
        "output_tokens": 1045,
        "time": 28.336968915999933,
        "question": "Show all template type codes and number of templates for each.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1373,
        "output_tokens": 78,
        "time": 4.2469843340004445,
        "question": "What are the different template type codes, and how many templates correspond to each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1505,
        "output_tokens": 154,
        "time": 6.193272500000603,
        "question": "Which template type code has most number of templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1512,
        "output_tokens": 170,
        "time": 6.308378749999974,
        "question": "Return the type code of the template type that the most templates belong to.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "input_tokens": 1484,
        "output_tokens": 174,
        "time": 7.096934125000189,
        "question": "Show all template type codes with less than three templates.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING count(*) < 3",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code HAVING COUNT(*) < 3",
        "input_tokens": 1578,
        "output_tokens": 236,
        "time": 8.943333791999976,
        "question": "What are the codes of template types that have fewer than 3 templates?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1294,
        "output_tokens": 52,
        "time": 3.40626654100015,
        "question": "What the smallest version number and its template type code?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates",
        "final_sql": "SELECT MIN(Version_Number), Template_Type_Code FROM Templates;",
        "input_tokens": 1460,
        "output_tokens": 99,
        "time": 5.6415023750005275,
        "question": "Return the lowest version number, along with its corresponding template type code.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates"
    },
    {
        "baseline_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Data base\"",
        "final_sql": "SELECT T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Document_Name = \"Data base\"",
        "input_tokens": 1499,
        "output_tokens": 155,
        "time": 6.050661541999943,
        "question": "What is the template type code of the template used by document with the name \"Data base\"?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "final_sql": "SELECT T.Template_Type_Code FROM Templates AS T JOIN Documents AS D ON T.Template_ID = D.Template_ID WHERE D.Document_Name = 'Data base'",
        "input_tokens": 1514,
        "output_tokens": 143,
        "time": 5.820666791999429,
        "question": "Return the template type code of the template that is used by a document named Data base.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""
    },
    {
        "baseline_sql": "SELECT document_name FROM Documents\nJOIN Templates ON Documents.template_id = Templates.template_id\nWHERE Templates.template_type_code = \"BK\"",
        "final_sql": "SELECT Document_Name FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Templates.Template_Type_Code = \"BK\"",
        "input_tokens": 1516,
        "output_tokens": 191,
        "time": 6.795272416999978,
        "question": "Show all document names using templates with template type code BK.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT D.document_name FROM Documents AS D JOIN Templates AS T ON D.template_id = T.template_id WHERE T.template_type_code = \"BK\"",
        "final_sql": "SELECT D.Document_Name FROM Documents AS D JOIN Templates AS T ON D.Template_ID = T.Template_ID WHERE T.Template_Type_Code = \"BK\"",
        "input_tokens": 1602,
        "output_tokens": 234,
        "time": 7.738354041999628,
        "question": "What are the names of documents that use templates with the code BK?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1439,
        "output_tokens": 143,
        "time": 5.643572750000203,
        "question": "Show all template type codes and the number of documents using each type.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, COUNT(*) FROM Templates GROUP BY Template_Type_Code",
        "final_sql": "SELECT Template_Type_Code, COUNT(*) AS Record_Count FROM Templates GROUP BY Template_Type_Code;",
        "input_tokens": 1458,
        "output_tokens": 151,
        "time": 6.237536583999827,
        "question": "What are the different template type codes, and how many documents use each type?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"
    },
    {
        "baseline_sql": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Template_Type_Code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.Template_Type_Code = T2.Template_Type_Code GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1674,
        "output_tokens": 252,
        "time": 8.030695874999765,
        "question": "Which template type code is used by most number of documents?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1541,
        "output_tokens": 169,
        "time": 7.009652290999838,
        "question": "Return the code of the template type that is most commonly used in documents.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "input_tokens": 1447,
        "output_tokens": 158,
        "time": 5.987435207999624,
        "question": "Show all template type codes that are not used by any document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT DISTINCT Template_Type_Code FROM Templates)",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates)",
        "input_tokens": 1561,
        "output_tokens": 215,
        "time": 8.652129166999657,
        "question": "What are the codes of template types that are not used for any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1289,
        "output_tokens": 62,
        "time": 3.321041041999706,
        "question": "Show all template type codes and descriptions.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types",
        "final_sql": "SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;",
        "input_tokens": 1349,
        "output_tokens": 80,
        "time": 4.7597446669997225,
        "question": "What are the type codes and descriptions for all template types?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types"
    },
    {
        "baseline_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "input_tokens": 1428,
        "output_tokens": 130,
        "time": 5.288643292000415,
        "question": "What is the template type descriptions for template type code \"AD\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "final_sql": "SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = \"AD\"",
        "input_tokens": 1432,
        "output_tokens": 132,
        "time": 5.757608041999447,
        "question": "Return the template type description of the template type with the code AD.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "input_tokens": 1390,
        "output_tokens": 100,
        "time": 4.738808459000211,
        "question": "What is the template type code for template type description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = \"Book\"",
        "final_sql": "SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book'",
        "input_tokens": 1412,
        "output_tokens": 125,
        "time": 5.235547000000224,
        "question": "Return the type code of the template type with the description \"Book\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID",
        "final_sql": "SELECT DISTINCT Template_Type_Description FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID;",
        "input_tokens": 1502,
        "output_tokens": 191,
        "time": 7.392473457999586,
        "question": "What are the distinct template type descriptions for the templates ever used by any document?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        "final_sql": "SELECT DISTINCT T1.Template_Details FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID",
        "input_tokens": 1494,
        "output_tokens": 134,
        "time": 6.42944633299976,
        "question": "Return the different descriptions for templates that have been used in a document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"
    },
    {
        "baseline_sql": "SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = \"Presentation\"",
        "final_sql": "SELECT Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Template_Type_Description = \"Presentation\"",
        "input_tokens": 1667,
        "output_tokens": 246,
        "time": 8.582981333999669,
        "question": "What are the template ids with template type description \"Presentation\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT template_id FROM templates WHERE template_details = 'Presentation'",
        "final_sql": "SELECT Template_ID FROM Templates WHERE Template_Type_Code IN (SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Presentation')",
        "input_tokens": 1416,
        "output_tokens": 140,
        "time": 5.61603283400018,
        "question": "Return the ids corresponding to templates with the description 'Presentation'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs;",
        "final_sql": "SELECT count(*) FROM Paragraphs;",
        "input_tokens": 1280,
        "output_tokens": 74,
        "time": 6.082582082999579,
        "question": "How many paragraphs in total?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs",
        "final_sql": "SELECT count(*) FROM Paragraphs;",
        "input_tokens": 1267,
        "output_tokens": 67,
        "time": 4.243153541000538,
        "question": "Count the number of paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "final_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "input_tokens": 1593,
        "output_tokens": 236,
        "time": 9.100813707999805,
        "question": "How many paragraphs for the document with name 'Summer Show'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "final_sql": "SELECT count(*) FROM Paragraphs AS p JOIN Documents AS d ON p.Document_ID = d.Document_ID WHERE d.Document_Name = 'Summer Show'",
        "input_tokens": 1590,
        "output_tokens": 239,
        "time": 7.585334874999717,
        "question": "Count the number of paragraphs in the document named 'Summer Show'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"
    },
    {
        "baseline_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text = 'Korea'",
        "final_sql": "SELECT * FROM Paragraphs WHERE LOWER(Paragraph_Text) = 'korea'",
        "input_tokens": 1412,
        "output_tokens": 132,
        "time": 5.88402487500025,
        "question": "Show paragraph details for paragraph with text 'Korea ' .",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "final_sql": "SELECT * FROM Paragraphs WHERE Paragraph_Text LIKE '%Korea%'",
        "input_tokens": 1503,
        "output_tokens": 128,
        "time": 6.121077624999998,
        "question": "What are the details for the paragraph that includes the text 'Korea ' ?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "select other_details from paragraphs where paragraph_text like 'korea'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "input_tokens": 1625,
        "output_tokens": 227,
        "time": 8.423602666000079,
        "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "final_sql": "SELECT Paragraph_ID, Paragraph_Text FROM Paragraphs WHERE Document_ID IN (SELECT Document_ID FROM Documents WHERE Document_Name = 'Welcome to NY')",
        "input_tokens": 1606,
        "output_tokens": 215,
        "time": 8.591557083000225,
        "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"
    },
    {
        "baseline_sql": "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = \"Customer reviews\"",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_ID IN (   SELECT Document_ID   FROM Documents   JOIN Templates ON Documents.Template_ID = Templates.Template_ID   WHERE Templates.Template_Type_Code = \"Customer reviews\" )",
        "input_tokens": 1575,
        "output_tokens": 245,
        "time": 9.324772375000066,
        "question": "Show all paragraph texts for the document \"Customer reviews\".",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT paragraph_text FROM Paragraphs WHERE document_id = (SELECT document_id FROM Documents WHERE document_name = 'Customer reviews')",
        "final_sql": "SELECT Paragraph_Text FROM Paragraphs WHERE Document_ID = (SELECT Document_ID            FROM Documents            WHERE Document_Name = 'Customer reviews')",
        "input_tokens": 1499,
        "output_tokens": 172,
        "time": 6.088171250000414,
        "question": "What are the paragraph texts for the document with the name 'Customer reviews'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""
    },
    {
        "baseline_sql": "SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id ASC",
        "final_sql": "SELECT Document_ID, COUNT(*) FROM Paragraphs GROUP BY Document_ID ORDER BY Document_ID ASC;",
        "input_tokens": 1634,
        "output_tokens": 275,
        "time": 9.885762166999484,
        "question": "Show all document ids and the number of paragraphs in each document. Order by document id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID\nORDER BY d.Document_ID ASC",
        "final_sql": "SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS num_paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID ASC",
        "input_tokens": 1607,
        "output_tokens": 262,
        "time": 9.250629000000117,
        "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name",
        "final_sql": "SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;",
        "input_tokens": 1589,
        "output_tokens": 247,
        "time": 8.955361250000351,
        "question": "Show all document ids, names and the number of paragraphs in each document.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS num_paragraphs\nFROM Documents AS D\nJOIN Paragraphs AS P ON D.document_id = P.document_id\nGROUP BY D.document_id, D.document_name",
        "final_sql": "SELECT D.document_id, D.document_name, COUNT(P.paragraph_id) AS num_paragraphs FROM Documents AS D JOIN Paragraphs AS P ON D.document_id = P.document_id GROUP BY D.document_id, D.document_name;",
        "input_tokens": 1632,
        "output_tokens": 253,
        "time": 8.93968620800024,
        "question": "What are the ids and names of each document, as well as the number of paragraphs in each?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
    },
    {
        "baseline_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2;",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2;",
        "input_tokens": 1478,
        "output_tokens": 188,
        "time": 7.688802167000176,
        "question": "List all document ids with at least two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT document_id FROM paragraphs GROUP BY document_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(*) >= 2",
        "input_tokens": 1510,
        "output_tokens": 201,
        "time": 7.321730167000169,
        "question": "What are the ids of documents that have 2 or more paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name \nFROM Documents d \nJOIN Paragraphs p ON d.Document_ID = p.Document_ID \nGROUP BY d.Document_ID, d.Document_Name \nORDER BY COUNT(p.Paragraph_ID) DESC \nLIMIT 1",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1",
        "input_tokens": 1689,
        "output_tokens": 304,
        "time": 11.370597665999412,
        "question": "What is the document id and name with greatest number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT d.Document_ID, d.Document_Name\nFROM Documents d\nJOIN Paragraphs p ON d.Document_ID = p.Document_ID\nGROUP BY d.Document_ID, d.Document_Name\nORDER BY COUNT(p.Paragraph_ID) DESC\nLIMIT 1",
        "final_sql": "SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1",
        "input_tokens": 1739,
        "output_tokens": 309,
        "time": 10.44607624999935,
        "question": "Return the id and name of the document with the most paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;",
        "final_sql": "SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(*) ASC LIMIT 1;",
        "input_tokens": 1592,
        "output_tokens": 235,
        "time": 9.056873957999414,
        "question": "What is the document id with least number of paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.document_id FROM documents AS t1 JOIN paragraphs AS t2 ON t1.document_id = t2.document_id GROUP BY t1.document_id ORDER BY count(*) ASC LIMIT 1",
        "final_sql": "SELECT t1.Document_ID FROM Documents AS t1 JOIN Paragraphs AS t2 ON t1.Document_ID = t2.Document_ID GROUP BY t1.Document_ID ORDER BY COUNT(t2.Paragraph_ID) ASC LIMIT 1",
        "input_tokens": 1857,
        "output_tokens": 427,
        "time": 13.152199207999729,
        "question": "Return the id of the document with the fewest paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS num_paragraphs FROM Paragraphs GROUP BY Document_ID) WHERE num_paragraphs >= 1 AND num_paragraphs <= 2;",
        "final_sql": "SELECT Document_ID FROM (SELECT Document_ID, COUNT(*) AS num_paragraphs    FROM Paragraphs    GROUP BY Document_ID) WHERE num_paragraphs >= 1 AND num_paragraphs <= 2;",
        "input_tokens": 1563,
        "output_tokens": 227,
        "time": 8.13909645900003,
        "question": "What is the document id with 1 to 2 paragraphs?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT document_id FROM Documents GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2",
        "final_sql": "SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(*) BETWEEN 1 AND 2;",
        "input_tokens": 1639,
        "output_tokens": 286,
        "time": 9.885005791999902,
        "question": "Give the ids of documents that have between one and two paragraphs.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"
    },
    {
        "baseline_sql": "SELECT T1.document_id FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.document_id = T2.document_id WHERE T1.paragraph_text = 'Brazil' AND T2.paragraph_text = 'Ireland'",
        "final_sql": "SELECT T1.Document_ID FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Paragraph_Text = 'Brazil' AND T2.Paragraph_Text = 'Ireland'",
        "input_tokens": 1670,
        "output_tokens": 271,
        "time": 9.165660667000338,
        "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT T1.document_id FROM Paragraphs AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text  =  'Brazil' AND T2.paragraph_text  =  'Ireland'",
        "final_sql": "SELECT DISTINCT P1.Document_ID FROM Paragraphs P1 JOIN Paragraphs P2 ON P1.Document_ID = P2.Document_ID WHERE P1.Paragraph_Text = 'Brazil' AND P2.Paragraph_Text = 'Ireland'",
        "input_tokens": 1715,
        "output_tokens": 290,
        "time": 9.571272583999416,
        "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?",
        "db_id": "cre_Doc_Template_Mgt",
        "gold_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM teacher",
        "final_sql": "SELECT count(*) FROM teacher;",
        "input_tokens": 1077,
        "output_tokens": 119,
        "time": 6.297886833999655,
        "question": "How many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT count(*) FROM teacher",
        "final_sql": "SELECT COUNT(*) FROM teacher;",
        "input_tokens": 1012,
        "output_tokens": 66,
        "time": 3.3270718750000015,
        "question": "What is the total count of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT count(*) FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "input_tokens": 1108,
        "output_tokens": 113,
        "time": 4.4427340000002005,
        "question": "List the names of teachers in ascending order of age.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM teacher ORDER BY Age ASC",
        "input_tokens": 1150,
        "output_tokens": 119,
        "time": 5.166637290999461,
        "question": "What are the names of the teachers ordered by ascending age?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher",
        "final_sql": "SELECT Age, Hometown FROM teacher;",
        "input_tokens": 1036,
        "output_tokens": 42,
        "time": 4.87226550000014,
        "question": "What are the age and hometown of teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Age, Hometown FROM teacher",
        "final_sql": "SELECT Age, Hometown FROM teacher",
        "input_tokens": 1036,
        "output_tokens": 49,
        "time": 3.8052970830003687,
        "question": "What is the age and hometown of every teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Age ,  Hometown FROM teacher"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Hometown <> \"Little Lever Urban District\"",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'",
        "input_tokens": 1325,
        "output_tokens": 137,
        "time": 5.331676042000254,
        "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District'",
        "final_sql": "SELECT Name FROM teacher WHERE Hometown <> 'Little Lever Urban District'",
        "input_tokens": 1298,
        "output_tokens": 156,
        "time": 6.980641791999915,
        "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?",
        "db_id": "course_teach",
        "gold_query": "select name from teacher where hometown != \"little lever urban district\""
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Age = '32' OR Age = '33'",
        "final_sql": "SELECT Name FROM teacher WHERE Age = 32 OR Age = 33",
        "input_tokens": 1260,
        "output_tokens": 174,
        "time": 6.496138959000746,
        "question": "Show the name of teachers aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33)",
        "final_sql": "SELECT Name FROM teacher WHERE Age IN (32, 33)",
        "input_tokens": 1165,
        "output_tokens": 114,
        "time": 5.379968416999873,
        "question": "What are the names of the teachers who are aged either 32 or 33?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1122,
        "output_tokens": 114,
        "time": 5.3682758750001085,
        "question": "What is the hometown of the youngest teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "final_sql": "SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher)",
        "input_tokens": 1113,
        "output_tokens": 132,
        "time": 5.779060250000839,
        "question": "Where is the youngest teacher from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "final_sql": "SELECT Hometown, COUNT(*) AS Num_Teachers FROM teacher GROUP BY Hometown",
        "input_tokens": 1198,
        "output_tokens": 152,
        "time": 5.812566500000685,
        "question": "Show different hometown of teachers and the number of teachers from each hometown.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "final_sql": "SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",
        "input_tokens": 1130,
        "output_tokens": 111,
        "time": 4.725677417000043,
        "question": "For each hometown, how many teachers are there?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 1161,
        "output_tokens": 156,
        "time": 6.6004144160006035,
        "question": "List the most common hometown of teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "final_sql": "SELECT Hometown, COUNT(*) AS Count FROM teacher GROUP BY Hometown ORDER BY Count DESC LIMIT 1;",
        "input_tokens": 1225,
        "output_tokens": 181,
        "time": 6.598824125000647,
        "question": "What is the most commmon hometowns for teachers?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) > 1",
        "input_tokens": 1230,
        "output_tokens": 188,
        "time": 7.314483541999834,
        "question": "Show the hometowns shared by at least two teachers.",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2",
        "input_tokens": 1204,
        "output_tokens": 189,
        "time": 6.910231458000453,
        "question": "What are the towns from which at least two teachers come from?",
        "db_id": "course_teach",
        "gold_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T1\nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nJOIN course AS T3 ON T1.Course_ID = T3.Course_ID",
        "final_sql": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;",
        "input_tokens": 1340,
        "output_tokens": 193,
        "time": 7.723962834000304,
        "question": "Show names of teachers and the courses they are arranged to teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT T1.Name, T3.Course\nFROM teacher AS T1\nJOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nJOIN course AS T3 ON T2.Course_ID = T3.Course_ID",
        "final_sql": "SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID",
        "input_tokens": 1479,
        "output_tokens": 282,
        "time": 10.695116333999977,
        "question": "What is the name of each teacher and what course they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T1\nJOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID\nORDER BY T2.Name ASC",
        "final_sql": "SELECT teacher.Name, course.Course FROM course_arrange JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC",
        "input_tokens": 1405,
        "output_tokens": 231,
        "time": 8.44240095799978,
        "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name, T1.Course\nFROM course_arrange AS T3\nJOIN course AS T1 ON T3.Course_ID = T1.Course_ID\nJOIN teacher AS T2 ON T3.Teacher_ID = T2.Teacher_ID\nORDER BY T2.Name ASC;",
        "final_sql": "SELECT teacher.Name, course.Course FROM course_arrange JOIN course ON course_arrange.Course_ID = course.Course_ID JOIN teacher ON course_arrange.Teacher_ID = teacher.Teacher_ID ORDER BY teacher.Name ASC;",
        "input_tokens": 1487,
        "output_tokens": 262,
        "time": 9.020865999999842,
        "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"
    },
    {
        "baseline_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "final_sql": "SELECT t.Name FROM teacher t JOIN course_arrange ca ON t.Teacher_ID = ca.Teacher_ID JOIN course c ON ca.Course_ID = c.Course_ID WHERE c.Course = 'math'",
        "input_tokens": 1363,
        "output_tokens": 274,
        "time": 9.405522875000315,
        "question": "Show the name of the teacher for the math course.",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT DISTINCT T2.Name FROM course AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID WHERE T1.Course = 'Math'",
        "final_sql": "SELECT DISTINCT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID JOIN course AS T3 ON T1.Course_ID = T3.Course_ID WHERE T3.Course = 'Math'",
        "input_tokens": 1309,
        "output_tokens": 245,
        "time": 8.851690790999783,
        "question": "What are the names of the people who teach math courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""
    },
    {
        "baseline_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name",
        "final_sql": "SELECT teacher.Name, COUNT(course_arrange.Course_ID) FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name",
        "input_tokens": 1407,
        "output_tokens": 269,
        "time": 9.570604583999739,
        "question": "Show names of teachers and the number of courses they teach.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "final_sql": "SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name;",
        "input_tokens": 1355,
        "output_tokens": 213,
        "time": 7.425264416000573,
        "question": "What are the names of the teachers and how many courses do they teach?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2",
        "final_sql": "SELECT T.Name FROM teacher AS T JOIN course_arrange AS CA ON T.Teacher_ID = CA.Teacher_ID GROUP BY T.Teacher_ID HAVING COUNT(CA.Course_ID) >= 2",
        "input_tokens": 1384,
        "output_tokens": 252,
        "time": 8.935126707999189,
        "question": "Show names of teachers that teach at least two courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Teacher_ID HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID IN (SELECT Teacher_ID FROM course_arrange GROUP BY Teacher_ID HAVING COUNT(*) >= 2)",
        "input_tokens": 1353,
        "output_tokens": 241,
        "time": 8.97744104100002,
        "question": "What are the names of the teachers who teach at least two courses?",
        "db_id": "course_teach",
        "gold_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "input_tokens": 1227,
        "output_tokens": 152,
        "time": 7.173034749999715,
        "question": "List the names of teachers who have not been arranged to teach courses.",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "final_sql": "SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange)",
        "input_tokens": 1226,
        "output_tokens": 146,
        "time": 5.526150499999858,
        "question": "What are the names of the teachers whose courses have not been arranged?",
        "db_id": "course_teach",
        "gold_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM visitor WHERE Age < 30",
        "final_sql": "SELECT count(*) FROM visitor WHERE Age < 30",
        "input_tokens": 1189,
        "output_tokens": 114,
        "time": 6.28548900000078,
        "question": "How many visitors below age 30 are there?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE age  <  30"
    },
    {
        "baseline_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
        "final_sql": "SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;",
        "input_tokens": 1306,
        "output_tokens": 158,
        "time": 6.333471875000214,
        "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"
    },
    {
        "baseline_sql": "SELECT avg(Age) FROM visitor WHERE Level_of_membership <= 4",
        "final_sql": "SELECT AVG(Age) FROM visitor WHERE Level_of_membership <= 4;",
        "input_tokens": 1320,
        "output_tokens": 165,
        "time": 6.497675500000696,
        "question": "What is the average age of the visitors whose membership level is not higher than 4?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"
    },
    {
        "baseline_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC",
        "final_sql": "SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;",
        "input_tokens": 1447,
        "output_tokens": 192,
        "time": 6.831015957999625,
        "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"
    },
    {
        "baseline_sql": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "final_sql": "SELECT Museum_ID, Name FROM museum WHERE Num_of_Staff = (SELECT MAX(Num_of_Staff) FROM museum)",
        "input_tokens": 1314,
        "output_tokens": 140,
        "time": 6.169838499999969,
        "question": "Find the id and name of the museum that has the most staff members?",
        "db_id": "museum_visit",
        "gold_query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < \"2009\";",
        "final_sql": "SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < \"2009\";",
        "input_tokens": 1317,
        "output_tokens": 142,
        "time": 6.296926207999604,
        "question": "Find the average number of staff working for the museums that were open before 2009.",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
    },
    {
        "baseline_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
        "final_sql": "SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum'",
        "input_tokens": 1278,
        "output_tokens": 125,
        "time": 5.3711351250003645,
        "question": "What are the opening year and staff number of the museum named Plaza Museum?",
        "db_id": "museum_visit",
        "gold_query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"
    },
    {
        "baseline_sql": "SELECT t1.Name FROM museum AS t1 WHERE t1.Num_of_Staff > (SELECT MIN(t2.Num_of_Staff) FROM museum AS t2 WHERE t2.Open_Year > '2010')",
        "final_sql": "SELECT t1.Name FROM museum AS t1 WHERE t1.Num_of_Staff > (   SELECT MIN(t2.Num_of_Staff)   FROM museum AS t2   WHERE t2.Open_Year > '2010' )",
        "input_tokens": 1615,
        "output_tokens": 311,
        "time": 9.508772084000157,
        "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT T1.ID, T1.Name, T1.Age FROM visitor AS T1 JOIN visit AS T2 ON T1.ID = T2.visitor_ID GROUP BY T1.ID, T1.Name, T1.Age HAVING COUNT(*) > 1",
        "final_sql": "SELECT visitor.ID, visitor.Name, visitor.Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Age HAVING COUNT(*) > 1;",
        "input_tokens": 1532,
        "output_tokens": 273,
        "time": 8.608869958000469,
        "question": "find the id, name and age for visitors who visited some museums more than once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"
    },
    {
        "baseline_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership\nFROM visitor\nJOIN visit ON visitor.ID = visit.visitor_ID\nGROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership\nHAVING SUM(visit.Total_spent) = (\n    SELECT MAX(total_spent)\n    FROM visit\n)",
        "final_sql": "SELECT visitor.ID, visitor.Name, visitor.Level_of_membership FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY visitor.ID, visitor.Name, visitor.Level_of_membership HAVING SUM(visit.Total_spent) = (   SELECT MAX(total_spent)   FROM visit )",
        "input_tokens": 1486,
        "output_tokens": 282,
        "time": 9.891456916000607,
        "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Museum_ID, T2.Name \nFROM visit AS T1 \nJOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID \nGROUP BY T1.Museum_ID \nORDER BY COUNT(*) DESC \nLIMIT 1",
        "final_sql": "SELECT T1.Museum_ID, T2.Name FROM visit AS T1 JOIN museum AS T2 ON T1.Museum_ID = T2.Museum_ID GROUP BY T1.Museum_ID, T2.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1509,
        "output_tokens": 310,
        "time": 11.409479417000512,
        "question": "What are the id and name of the museum visited most times?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "final_sql": "SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit)",
        "input_tokens": 1212,
        "output_tokens": 131,
        "time": 5.680926707999788,
        "question": "What is the name of the museum that had no visitor yet?",
        "db_id": "museum_visit",
        "gold_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"
    },
    {
        "baseline_sql": "SELECT v.Name, v.Age FROM visitor AS v JOIN visit AS vs ON v.ID = vs.visitor_ID WHERE vs.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit) LIMIT 1",
        "final_sql": "SELECT v.Name, v.Age FROM visitor AS v JOIN visit AS vs ON v.ID = vs.visitor_ID GROUP BY v.Name, v.Age HAVING vs.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit)",
        "input_tokens": 1511,
        "output_tokens": 281,
        "time": 10.49745675000031,
        "question": "Find the name and age of the visitor who bought the most tickets at once.",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT avg(Num_of_Ticket) ,  max(Num_of_Ticket) FROM visit",
        "final_sql": "SELECT AVG(Num_of_Ticket), MAX(Num_of_Ticket) FROM visit;",
        "input_tokens": 1133,
        "output_tokens": 70,
        "time": 3.7354619160005313,
        "question": "What are the average and maximum number of tickets bought in all visits?",
        "db_id": "museum_visit",
        "gold_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"
    },
    {
        "baseline_sql": "SELECT sum(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1",
        "final_sql": "SELECT sum(Total_spent) FROM visit JOIN visitor ON visit.visitor_ID = visitor.ID WHERE Level_of_membership = 1;",
        "input_tokens": 1310,
        "output_tokens": 194,
        "time": 7.216163875000348,
        "question": "What is the total ticket expense of the visitors whose membership level is 1?",
        "db_id": "museum_visit",
        "gold_query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"
    },
    {
        "baseline_sql": "SELECT visitor.Name FROM visitor JOIN visit AS v1 ON visitor.ID = v1.visitor_ID JOIN museum AS m1 ON v1.Museum_ID = m1.Museum_ID JOIN visit AS v2 ON visitor.ID = v2.visitor_ID JOIN museum AS m2 ON v2.Museum_ID = m2.Museum_ID WHERE m1.Open_Year < '2009' AND m2.Open_Year > '2011'",
        "final_sql": "SELECT v.Name FROM visitor AS v JOIN visit AS v1 ON v.ID = v1.visitor_ID JOIN museum AS m1 ON v1.Museum_ID = m1.Museum_ID JOIN visit AS v2 ON v.ID = v2.visitor_ID JOIN museum AS m2 ON v2.Museum_ID = m2.Museum_ID WHERE CAST(m1.Open_Year AS INTEGER) < 2009 AND CAST(m2.Open_Year AS INTEGER) > 2011",
        "input_tokens": 1604,
        "output_tokens": 401,
        "time": 12.231861750000462,
        "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?",
        "db_id": "museum_visit",
        "gold_query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"
    },
    {
        "baseline_sql": "SELECT count(*) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID LEFT JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year <= 2010 OR T3.Open_Year IS NULL;",
        "final_sql": "SELECT COUNT(*) FROM visitor AS T1 LEFT JOIN visit AS T2 ON T1.ID = T2.visitor_ID LEFT JOIN museum AS T3 ON T2.Museum_ID = T3.Museum_ID WHERE T3.Open_Year <= 2010 OR T3.Open_Year IS NULL;",
        "input_tokens": 1798,
        "output_tokens": 453,
        "time": 14.278895916999318,
        "question": "Find the number of visitors who did not visit any museum opened after 2010.",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"
    },
    {
        "baseline_sql": "SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008",
        "final_sql": "SELECT count(*) FROM museum WHERE Open_Year > 2013 OR Open_Year < 2008 AND Open_Year != 2008",
        "input_tokens": 1353,
        "output_tokens": 183,
        "time": 6.979823749999923,
        "question": "How many museums were opened after 2013 or before 2008?",
        "db_id": "museum_visit",
        "gold_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players",
        "final_sql": "SELECT COUNT(*) FROM players;",
        "input_tokens": 1631,
        "output_tokens": 70,
        "time": 4.2833171660004155,
        "question": "Find the total number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players",
        "final_sql": "SELECT count(*) FROM players;",
        "input_tokens": 1603,
        "output_tokens": 57,
        "time": 4.651853499999561,
        "question": "How many players are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM players"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches",
        "final_sql": "SELECT COUNT(match_num) FROM matches",
        "input_tokens": 1638,
        "output_tokens": 73,
        "time": 3.9371817080000255,
        "question": "Find the total number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches",
        "final_sql": "SELECT COUNT(match_num) FROM matches",
        "input_tokens": 1846,
        "output_tokens": 288,
        "time": 10.386861166000017,
        "question": "Count the number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = 'USA'",
        "input_tokens": 1822,
        "output_tokens": 140,
        "time": 6.087586582999393,
        "question": "List the first name and birth date of all players from the country with code USA.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
        "final_sql": "SELECT first_name, birth_date FROM players WHERE country_code = \"USA\"",
        "input_tokens": 1773,
        "output_tokens": 116,
        "time": 5.475942000000032,
        "question": "What are the first names and birth dates of players from the USA?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"
    },
    {
        "baseline_sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches;",
        "input_tokens": 1729,
        "output_tokens": 101,
        "time": 5.066819957999542,
        "question": "Find the average age of losers and winners of all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches",
        "final_sql": "SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches",
        "input_tokens": 1724,
        "output_tokens": 81,
        "time": 4.653537082999719,
        "question": "What are the average ages of losers and winners across matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches"
    },
    {
        "baseline_sql": "SELECT AVG(winner_rank) FROM matches",
        "final_sql": "SELECT AVG(winner_rank) FROM matches;",
        "input_tokens": 1670,
        "output_tokens": 79,
        "time": 4.553189875000498,
        "question": "Find the average rank of winners in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT avg(winner_rank) FROM matches",
        "final_sql": "SELECT AVG(winner_rank) FROM matches",
        "input_tokens": 1735,
        "output_tokens": 84,
        "time": 4.560786791999817,
        "question": "What is the average rank for winners in all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(winner_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT MAX(loser_rank) FROM matches",
        "final_sql": "SELECT MAX(loser_rank) FROM matches;",
        "input_tokens": 1645,
        "output_tokens": 46,
        "time": 3.4813182079997205,
        "question": "Find the highest rank of losers in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT max(loser_rank) FROM matches",
        "final_sql": "SELECT MAX(loser_rank) FROM matches;",
        "input_tokens": 1701,
        "output_tokens": 98,
        "time": 5.9375489580006615,
        "question": "What is the best rank of losers across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT min(loser_rank) FROM matches"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
        "final_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
        "input_tokens": 1633,
        "output_tokens": 50,
        "time": 3.218968749999476,
        "question": "find the number of distinct country codes of all players.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT country_code) FROM players",
        "final_sql": "SELECT COUNT(DISTINCT country_code) FROM players;",
        "input_tokens": 1644,
        "output_tokens": 50,
        "time": 3.6393659590003153,
        "question": "How many distinct countries do players come from?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT country_code) FROM players"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "final_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "input_tokens": 1614,
        "output_tokens": 50,
        "time": 4.064420042000165,
        "question": "Find the number of distinct name of losers.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT loser_name) FROM matches",
        "final_sql": "SELECT count(DISTINCT loser_name) FROM matches;",
        "input_tokens": 1621,
        "output_tokens": 50,
        "time": 3.347452458000589,
        "question": "How many different loser names are there?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT loser_name) FROM matches"
    },
    {
        "baseline_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "input_tokens": 1823,
        "output_tokens": 172,
        "time": 6.575509708000027,
        "question": "Find the name of tourney that has more than 10 matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "final_sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10",
        "input_tokens": 1908,
        "output_tokens": 167,
        "time": 6.360701040999629,
        "question": "What are the names of tournaments that have more than 10 matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
    },
    {
        "baseline_sql": "SELECT DISTINCT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016",
        "final_sql": "SELECT DISTINCT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 1950,
        "output_tokens": 227,
        "time": 8.531913707999593,
        "question": "List the names of all winners who played in both 2013 and 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m1 ON p.player_id = m1.winner_id\nJOIN matches m2 ON p.player_id = m2.winner_id\nWHERE m1.year = 2013 AND m2.year = 2016",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m1 ON p.player_id = m1.winner_id JOIN matches m2 ON p.player_id = m2.winner_id WHERE m1.year = 2013 AND m2.year = 2016;",
        "input_tokens": 2039,
        "output_tokens": 225,
        "time": 8.45139462499992,
        "question": "What are the names of players who won in both 2013 and 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016",
        "final_sql": "SELECT COUNT(*) FROM matches WHERE year = 2013 OR year = 2016;",
        "input_tokens": 2033,
        "output_tokens": 165,
        "time": 6.083098625000275,
        "question": "List the number of all matches who played in years of 2013 or 2016.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016",
        "final_sql": "SELECT count(*) FROM matches WHERE year = 2013 OR year = 2016",
        "input_tokens": 1825,
        "output_tokens": 127,
        "time": 5.575518874999943,
        "question": "How many matches were played in 2013 or 2016?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"
    },
    {
        "baseline_sql": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "final_sql": "SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "input_tokens": 2458,
        "output_tokens": 382,
        "time": 11.929127417000018,
        "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'",
        "final_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' AND T2.tourney_level = 'F' INTERSECT SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open' AND T2.tourney_level = 'G';",
        "input_tokens": 2287,
        "output_tokens": 341,
        "time": 10.797584500000085,
        "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"
    },
    {
        "baseline_sql": "SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players)",
        "final_sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;",
        "input_tokens": 1870,
        "output_tokens": 159,
        "time": 6.204706542000167,
        "question": "Find the first name and country code of the oldest player.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players p\nORDER BY p.birth_date\nLIMIT 1;",
        "final_sql": "SELECT p.first_name, p.country_code FROM players p WHERE p.birth_date = (SELECT MIN(p2.birth_date) FROM players p2)",
        "input_tokens": 1886,
        "output_tokens": 183,
        "time": 6.586700457999541,
        "question": "What is the first name and country code of the oldest player?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date",
        "final_sql": "SELECT first_name, last_name FROM players ORDER BY birth_date;",
        "input_tokens": 1730,
        "output_tokens": 98,
        "time": 4.655165666000357,
        "question": "List the first and last name of all players in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date",
        "final_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date ASC;",
        "input_tokens": 1943,
        "output_tokens": 175,
        "time": 6.501329415999862,
        "question": "What are the full names of all players, sorted by birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC",
        "final_sql": "SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;",
        "input_tokens": 1861,
        "output_tokens": 146,
        "time": 5.61408208300054,
        "question": "List the first and last name of all players who are left / L hand in the order of birth date.",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date",
        "final_sql": "SELECT first_name || ' ' || last_name AS full_name FROM players WHERE hand = 'left' ORDER BY birth_date;",
        "input_tokens": 2058,
        "output_tokens": 181,
        "time": 6.461606124999889,
        "question": "What are the full names of all left handed players, in order of birth date?",
        "db_id": "wta_1",
        "gold_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code\nFROM players AS p\nJOIN rankings AS r ON p.player_id = r.player_id\nGROUP BY p.player_id\nHAVING COUNT(r.tours) = (\n    SELECT MAX(tour_count)\n    FROM (\n        SELECT COUNT(tours) AS tour_count\n        FROM rankings\n        GROUP BY player_id\n    )\n)",
        "final_sql": "SELECT p.first_name, p.country_code FROM players AS p JOIN (   SELECT player_id, SUM(tours) AS tour_count   FROM rankings   GROUP BY player_id ) AS r ON p.player_id = r.player_id WHERE r.tour_count = (   SELECT MAX(tour_count)   FROM (     SELECT SUM(tours) AS tour_count     FROM rankings     GROUP BY player_id   ) )",
        "input_tokens": 2150,
        "output_tokens": 366,
        "time": 11.428454416999557,
        "question": "Find the first name and country code of the player who did the most number of tours.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(T2.tours) DESC LIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1",
        "input_tokens": 2084,
        "output_tokens": 305,
        "time": 9.98102608299996,
        "question": "What is the first name and country code of the player with the most tours?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "final_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1856,
        "output_tokens": 167,
        "time": 6.60184583299997,
        "question": "Find the year that has the most number of matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT year FROM matches GROUP BY year ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1866,
        "output_tokens": 217,
        "time": 7.418749499999649,
        "question": "Which year had the most matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.winner_name, T1.winner_rank_points\nFROM matches AS T1\nGROUP BY T1.winner_id\nHAVING COUNT(*) = (\n    SELECT MAX(win_count)\n    FROM (\n        SELECT COUNT(*) AS win_count\n        FROM matches\n        GROUP BY winner_id\n    )\n)",
        "final_sql": "SELECT T1.winner_name, T1.winner_rank_points FROM matches AS T1 GROUP BY T1.winner_id HAVING COUNT(*) = (   SELECT MAX(win_count)   FROM (     SELECT COUNT(*) AS win_count     FROM matches     GROUP BY winner_id   ) )",
        "input_tokens": 2021,
        "output_tokens": 265,
        "time": 8.64749920900067,
        "question": "Find the name and rank points of the winner who won the most times.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name, p.winner_rank_points\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nGROUP BY p.player_id\nHAVING COUNT(m.match_num) = (\n    SELECT MAX(match_count)\n    FROM (\n        SELECT COUNT(match_num) AS match_count\n        FROM matches\n        GROUP BY winner_id\n    )\n)",
        "final_sql": "SELECT p.first_name, p.last_name, p.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY p.player_id HAVING COUNT(m.match_num) = (   SELECT MAX(match_count)   FROM (     SELECT COUNT(match_num) AS match_count     FROM matches     GROUP BY winner_id   ) )",
        "input_tokens": 2023,
        "output_tokens": 322,
        "time": 10.165143541999896,
        "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY p.winner_rank_points DESC\nLIMIT 1;",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1;",
        "input_tokens": 2128,
        "output_tokens": 341,
        "time": 10.320247333000225,
        "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.last_name\nFROM players p\nJOIN matches m ON p.player_id = m.winner_id\nWHERE m.tourney_name = 'Australian Open'\nORDER BY m.winner_rank_points DESC\nLIMIT 1",
        "final_sql": "SELECT p.first_name, p.last_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open' ORDER BY m.winner_rank_points DESC LIMIT 1",
        "input_tokens": 2080,
        "output_tokens": 259,
        "time": 8.541107582999757,
        "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p1.first_name || ' ' || p1.last_name AS loser_name, p2.first_name || ' ' || p2.last_name AS winner_name\nFROM matches AS m\nJOIN players AS p1 ON m.loser_id = p1.player_id\nJOIN players AS p2 ON m.winner_id = p2.player_id\nWHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "final_sql": "SELECT p1.first_name || ' ' || p1.last_name AS loser_name, p2.first_name || ' ' || p2.last_name AS winner_name FROM matches AS m JOIN players AS p1 ON m.loser_id = p1.player_id JOIN players AS p2 ON m.winner_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "input_tokens": 2141,
        "output_tokens": 307,
        "time": 9.786302333000094,
        "question": "find the names of loser and winner who played in the match with greatest number of minutes.",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p1.first_name || ' ' || p1.last_name AS winner_name, p2.first_name || ' ' || p2.last_name AS loser_name\nFROM matches AS m\nJOIN players AS p1 ON m.winner_id = p1.player_id\nJOIN players AS p2 ON m.loser_id = p2.player_id\nWHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "final_sql": "SELECT p1.first_name || ' ' || p1.last_name AS winner_name, p2.first_name || ' ' || p2.last_name AS loser_name FROM matches AS m JOIN players AS p1 ON m.winner_id = p1.player_id JOIN players AS p2 ON m.loser_id = p2.player_id WHERE m.minutes = (SELECT MAX(minutes) FROM matches)",
        "input_tokens": 2084,
        "output_tokens": 357,
        "time": 11.197669291000238,
        "question": "What are the names of the winner and loser who played in the longest match?",
        "db_id": "wta_1",
        "gold_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT players.first_name, AVG(rankings.ranking) \nFROM players \nJOIN rankings ON players.player_id = rankings.player_id \nGROUP BY players.player_id, players.first_name",
        "final_sql": "SELECT AVG(ranking) FROM rankings;",
        "input_tokens": 1828,
        "output_tokens": 171,
        "time": 6.701989250000224,
        "question": "Find the average ranking for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "final_sql": "SELECT first_name, AVG(ranking) FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "input_tokens": 1822,
        "output_tokens": 152,
        "time": 609.1476458750003,
        "question": "What are the first names of all players, and their average rankings?",
        "db_id": "wta_1",
        "gold_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT p.first_name, sum(r.ranking_points) AS total_ranking_points\nFROM players p\nJOIN rankings r ON p.player_id = r.player_id\nGROUP BY p.player_id, p.first_name",
        "final_sql": "SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;",
        "input_tokens": 1943,
        "output_tokens": 265,
        "time": 9.540648833999512,
        "question": "Find the total ranking points for each player and their first name.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "final_sql": "SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name",
        "input_tokens": 1837,
        "output_tokens": 166,
        "time": 7.98378912499993,
        "question": "What are the first names of all players, and their total ranking points?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"
    },
    {
        "baseline_sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code",
        "final_sql": "SELECT COUNT(*) AS num_players, country_code FROM players GROUP BY country_code;",
        "input_tokens": 1732,
        "output_tokens": 126,
        "time": 5.566834792000009,
        "question": "find the number of players for each country.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code;",
        "final_sql": "SELECT country_code, COUNT(*) FROM players GROUP BY country_code;",
        "input_tokens": 1873,
        "output_tokens": 180,
        "time": 7.8290146670005925,
        "question": "How many players are from each country?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 2055,
        "output_tokens": 273,
        "time": 9.561397500000567,
        "question": "find the code of the country where has the greatest number of players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 2062,
        "output_tokens": 303,
        "time": 9.276600958999552,
        "question": "What is the code of the country with the most players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50",
        "input_tokens": 1883,
        "output_tokens": 136,
        "time": 5.507681457999752,
        "question": "Find the codes of countries that have more than 50 players.",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "final_sql": "SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;",
        "input_tokens": 1782,
        "output_tokens": 138,
        "time": 5.747503833000337,
        "question": "What are the codes of countries with more than 50 players?",
        "db_id": "wta_1",
        "gold_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
    },
    {
        "baseline_sql": "SELECT ranking_date, COUNT(tours) FROM rankings GROUP BY ranking_date",
        "final_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1785,
        "output_tokens": 164,
        "time": 6.398249415999999,
        "question": "Find the total number of tours for each ranking date.",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date",
        "final_sql": "SELECT ranking_date, COUNT(*) AS total_tours FROM rankings GROUP BY ranking_date;",
        "input_tokens": 1747,
        "output_tokens": 140,
        "time": 6.296664499999679,
        "question": "How many total tours were there for each ranking date?",
        "db_id": "wta_1",
        "gold_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"
    },
    {
        "baseline_sql": "SELECT year, count(*) FROM matches GROUP BY year",
        "final_sql": "SELECT year, count(*) FROM matches GROUP BY year",
        "input_tokens": 1729,
        "output_tokens": 123,
        "time": 5.27382466600011,
        "question": "Find the number of matches happened in each year.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "final_sql": "SELECT year, COUNT(*) FROM matches GROUP BY year",
        "input_tokens": 1768,
        "output_tokens": 109,
        "time": 5.0705888329994195,
        "question": "How many matches were played in each year?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"
    },
    {
        "baseline_sql": "SELECT T1.winner_name, T1.winner_rank\nFROM matches AS T1\nORDER BY T1.winner_age ASC\nLIMIT 3",
        "final_sql": "SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;",
        "input_tokens": 1972,
        "output_tokens": 166,
        "time": 6.47793187499974,
        "question": "Find the name and rank of the 3 youngest winners across all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT T1.winner_name, T1.winner_rank FROM matches AS T1 JOIN (SELECT winner_name, winner_age FROM matches ORDER BY winner_age ASC LIMIT 3) AS T2 ON T1.winner_name = T2.winner_name AND T1.winner_age = T2.winner_age",
        "final_sql": "SELECT T1.winner_name, T1.winner_rank FROM matches AS T1 JOIN (   SELECT winner_name, winner_rank, winner_age   FROM matches   ORDER BY winner_age ASC   LIMIT 3 ) AS T2 ON T1.winner_name = T2.winner_name AND T1.winner_rank = T2.winner_rank AND T1.winner_age = T2.winner_age;",
        "input_tokens": 2044,
        "output_tokens": 315,
        "time": 10.231206834000659,
        "question": "What are the names and ranks of the three youngest winners across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'Left'",
        "final_sql": "SELECT count(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'Left'",
        "input_tokens": 1957,
        "output_tokens": 254,
        "time": 8.090473416999885,
        "question": "How many different winners both participated in the WTA Championships and were left handed?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name = 'WTA Championships'",
        "final_sql": "SELECT COUNT(*) FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T1.hand = 'L' AND T2.tourney_name = 'WTA Championships'",
        "input_tokens": 1963,
        "output_tokens": 261,
        "time": 9.01578545800021,
        "question": "Find the number of left handed winners who participated in the WTA Championships.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"
    },
    {
        "baseline_sql": "SELECT p.first_name, p.country_code, p.birth_date\nFROM players AS p\nJOIN matches AS m ON p.player_id = m.winner_id\nWHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "final_sql": "SELECT p.first_name, p.country_code, p.birth_date FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)",
        "input_tokens": 1998,
        "output_tokens": 266,
        "time": 9.086373999999523,
        "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date\nFROM players AS T1\nJOIN matches AS T2 ON T1.player_id = T2.winner_id\nWHERE T2.winner_rank_points = (\n    SELECT MAX(winner_rank_points)\n    FROM matches\n)\nLIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.winner_rank_points = (   SELECT MAX(winner_rank_points)   FROM matches )",
        "input_tokens": 2093,
        "output_tokens": 261,
        "time": 9.33867887499946,
        "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?",
        "db_id": "wta_1",
        "gold_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) , hand FROM players GROUP BY hand",
        "final_sql": "SELECT COUNT(*) , hand FROM players GROUP BY hand;",
        "input_tokens": 1815,
        "output_tokens": 163,
        "time": 6.422326832999715,
        "question": "Find the number of players for each hand type.",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT hand, count(*) FROM players GROUP BY hand",
        "final_sql": "SELECT hand, count(*) FROM players GROUP BY hand;",
        "input_tokens": 1721,
        "output_tokens": 120,
        "time": 5.244136541999978,
        "question": "How many players are there for each hand type?",
        "db_id": "wta_1",
        "gold_query": "SELECT count(*) ,  hand FROM players GROUP BY hand"
    },
    {
        "baseline_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "final_sql": "SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';",
        "input_tokens": 1214,
        "output_tokens": 96,
        "time": 4.870136707999336,
        "question": "How many ships ended up being 'Captured'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
    },
    {
        "baseline_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC",
        "final_sql": "SELECT name, tonnage FROM ship ORDER BY name DESC, tonnage ASC",
        "input_tokens": 1217,
        "output_tokens": 84,
        "time": 5.311932208000144,
        "question": "List the name and tonnage ordered by in descending alphaetical order for the names.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC"
    },
    {
        "baseline_sql": "SELECT name, date, result FROM battle;",
        "final_sql": "SELECT name, date, result FROM battle;",
        "input_tokens": 1311,
        "output_tokens": 100,
        "time": 4.410217958999965,
        "question": "List the name, date and result of each battle.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  date FROM battle"
    },
    {
        "baseline_sql": "SELECT MAX(death_toll), MIN(death_toll) FROM incident",
        "final_sql": "SELECT MAX(killed + injured) AS maximum_death_toll, MIN(killed + injured) AS minimum_death_toll FROM death;",
        "input_tokens": 1188,
        "output_tokens": 75,
        "time": 4.145521833000203,
        "question": "What is maximum and minimum death toll caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT max(killed) ,  min(killed) FROM death"
    },
    {
        "baseline_sql": "SELECT avg(injured) FROM death",
        "final_sql": "SELECT avg(injured) FROM death",
        "input_tokens": 1128,
        "output_tokens": 43,
        "time": 3.2213719589999528,
        "question": "What is the average number of injuries caused each time?",
        "db_id": "battle_death",
        "gold_query": "SELECT avg(injured) FROM death"
    },
    {
        "baseline_sql": "SELECT D.note, D.killed, D.injured FROM death AS D JOIN ship AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'",
        "final_sql": "SELECT D.note, D.killed, D.injured FROM death AS D JOIN ship AS S ON D.caused_by_ship_id = S.id WHERE S.tonnage = 't'",
        "input_tokens": 1484,
        "output_tokens": 237,
        "time": 8.131054333000066,
        "question": "What are the death and injury situations caused by the ship with tonnage 't'?",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"
    },
    {
        "baseline_sql": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
        "final_sql": "SELECT name, result FROM battle WHERE bulgarian_commander <> 'Boril'",
        "input_tokens": 1533,
        "output_tokens": 160,
        "time": 5.578686374999961,
        "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"
    },
    {
        "baseline_sql": "SELECT DISTINCT b.id, b.name \nFROM battle b \nJOIN ship s ON b.id = s.lost_in_battle \nWHERE s.ship_type = 'Brig'",
        "final_sql": "SELECT DISTINCT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle WHERE s.ship_type = 'Brig' AND b.result = 'lost'",
        "input_tokens": 1503,
        "output_tokens": 267,
        "time": 8.444907916000375,
        "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?",
        "db_id": "battle_death",
        "gold_query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"
    },
    {
        "baseline_sql": "SELECT id, name FROM battle WHERE id IN (SELECT caused_by_ship_id FROM death GROUP BY caused_by_ship_id HAVING SUM(killed) > 10)",
        "final_sql": "SELECT b.id, b.name FROM battle b JOIN ship s ON b.id = s.lost_in_battle JOIN death d ON s.id = d.caused_by_ship_id GROUP BY b.id, b.name HAVING SUM(d.killed) > 10;",
        "input_tokens": 1516,
        "output_tokens": 245,
        "time": 8.142832167000051,
        "question": "What are the ids and names of the battles that led to more than 10 people killed in total.",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"
    },
    {
        "baseline_sql": "SELECT caused_by_ship_id, name\nFROM ship\nJOIN (\n    SELECT caused_by_ship_id, SUM(injured) AS total_injuries\n    FROM death\n    GROUP BY caused_by_ship_id\n    ORDER BY total_injuries DESC\n    LIMIT 1\n) AS T ON ship.id = T.caused_by_ship_id;",
        "final_sql": "SELECT ship.id, ship.name FROM ship JOIN (   SELECT caused_by_ship_id, SUM(injured) AS total_injuries   FROM death   GROUP BY caused_by_ship_id   ORDER BY total_injuries DESC   LIMIT 1 ) AS T ON ship.id = T.caused_by_ship_id;",
        "input_tokens": 1663,
        "output_tokens": 401,
        "time": 12.076131417000397,
        "question": "What is the ship id and name that caused most total injuries?",
        "db_id": "battle_death",
        "gold_query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "final_sql": "SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I'",
        "input_tokens": 1542,
        "output_tokens": 250,
        "time": 9.01373758400041,
        "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?",
        "db_id": "battle_death",
        "gold_query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT result) FROM battle",
        "final_sql": "SELECT count(DISTINCT result) FROM battle;",
        "input_tokens": 1193,
        "output_tokens": 70,
        "time": 3.934682832999897,
        "question": "How many different results are there for the battles?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(DISTINCT RESULT) FROM battle"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "final_sql": "SELECT COUNT(*) FROM battle WHERE id NOT IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225')",
        "input_tokens": 1420,
        "output_tokens": 220,
        "time": 7.9351232909994,
        "question": "How many battles did not lose any ship with tonnage '225'?",
        "db_id": "battle_death",
        "gold_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"
    },
    {
        "baseline_sql": "SELECT b.name, b.date\nFROM battle AS b\nJOIN ship AS s1 ON b.id = s1.lost_in_battle\nJOIN ship AS s2 ON b.id = s2.lost_in_battle\nWHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'",
        "final_sql": "SELECT b.name, b.date FROM battle AS b JOIN ship AS s1 ON b.id = s1.lost_in_battle JOIN ship AS s2 ON b.id = s2.lost_in_battle WHERE s1.name = 'Lettice' AND s2.name = 'HMS Atalanta'",
        "input_tokens": 1805,
        "output_tokens": 374,
        "time": 11.360774083999786,
        "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'",
        "db_id": "battle_death",
        "gold_query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"
    },
    {
        "baseline_sql": "SELECT b.name, b.result, b.bulgarian_commander\nFROM battle AS b\nLEFT JOIN ship AS s ON b.id = s.lost_in_battle\nWHERE s.id IS NULL AND s.location = 'English Channel'",
        "final_sql": "SELECT b.name, b.result, b.bulgarian_commander FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.location = 'English Channel' AND s.id IS NULL;",
        "input_tokens": 1596,
        "output_tokens": 296,
        "time": 9.112025583001014,
        "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.",
        "db_id": "battle_death",
        "gold_query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"
    },
    {
        "baseline_sql": "SELECT note FROM death WHERE note LIKE '%East%'",
        "final_sql": "SELECT note FROM death WHERE note LIKE '%East%' AND caused_by_ship_id IS NOT NULL;",
        "input_tokens": 1319,
        "output_tokens": 172,
        "time": 6.297286332999647,
        "question": "What are the notes of the death events which has substring 'East'?",
        "db_id": "battle_death",
        "gold_query": "SELECT note FROM death WHERE note LIKE '%East%'"
    },
    {
        "baseline_sql": "SELECT line_1, line_2 FROM Addresses",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2852,
        "output_tokens": 62,
        "time": 3.732298291999541,
        "question": "what are all the addresses including line 1 and line 2?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT line_1, line_2 FROM Addresses",
        "final_sql": "SELECT line_1, line_2 FROM Addresses;",
        "input_tokens": 2814,
        "output_tokens": 62,
        "time": 3.942166000000725,
        "question": "What is the first and second line for all addresses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT line_1 ,  line_2 FROM addresses"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Courses",
        "final_sql": "SELECT COUNT(*) FROM Courses;",
        "input_tokens": 2846,
        "output_tokens": 100,
        "time": 4.491478166999514,
        "question": "How many courses in total are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Courses",
        "final_sql": "SELECT count(*) FROM Courses;",
        "input_tokens": 2761,
        "output_tokens": 57,
        "time": 4.103678375000527,
        "question": "How many courses are there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Courses"
    },
    {
        "baseline_sql": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name = 'Math'",
        "input_tokens": 2897,
        "output_tokens": 102,
        "time": 4.7584796249993815,
        "question": "How is the math course described?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "final_sql": "SELECT course_description FROM Courses WHERE course_name LIKE '%math%'",
        "input_tokens": 2921,
        "output_tokens": 126,
        "time": 5.374181624998528,
        "question": "What are the descriptions for all the math courses?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
    },
    {
        "baseline_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';",
        "input_tokens": 2903,
        "output_tokens": 122,
        "time": 5.880225417000474,
        "question": "What is the zip code of the address in the city Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\";",
        "final_sql": "SELECT zip_postcode FROM Addresses WHERE city = \"Port Chelsea\";",
        "input_tokens": 2887,
        "output_tokens": 118,
        "time": 5.3764154159998725,
        "question": "What is the zip code for Port Chelsea?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
    },
    {
        "baseline_sql": "SELECT T1.department_name, T1.department_id FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT D.department_name, D.department_id FROM Departments AS D JOIN Degree_Programs AS DP ON D.department_id = DP.department_id GROUP BY D.department_name, D.department_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3173,
        "output_tokens": 265,
        "time": 9.202896917000544,
        "question": "Which department offers the most number of degrees? List department name and id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT department_name, department_id FROM Departments WHERE department_id IN (SELECT department_id FROM Degree_Programs GROUP BY department_id HAVING COUNT(*) = (SELECT MAX(degree_count) FROM (SELECT department_id, COUNT(*) AS degree_count FROM Degree_Programs GROUP BY department_id)))",
        "final_sql": "SELECT department_name, department_id FROM Departments WHERE department_id IN (   SELECT department_id   FROM Degree_Programs   GROUP BY department_id   HAVING COUNT(*) = (     SELECT MAX(degree_count)     FROM (       SELECT department_id, COUNT(*) AS degree_count       FROM Degree_Programs       GROUP BY department_id     )   ) )",
        "input_tokens": 3212,
        "output_tokens": 298,
        "time": 9.522907834001671,
        "question": "What is the name and id of the department with the most number of degrees ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT department_id) FROM degree_programs",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Degree_Programs;",
        "input_tokens": 2841,
        "output_tokens": 116,
        "time": 5.066505417000371,
        "question": "How many departments offer any degree?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT department_id) FROM Degree_Programs",
        "final_sql": "SELECT COUNT(DISTINCT department_id) FROM Departments",
        "input_tokens": 2798,
        "output_tokens": 72,
        "time": 3.9412325840003177,
        "question": "How many different departments offer degrees?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT degree_name) FROM degree_program",
        "final_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "input_tokens": 2820,
        "output_tokens": 96,
        "time": 4.766430375000709,
        "question": "How many different degree names are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT degree_name) FROM degree_program",
        "final_sql": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;",
        "input_tokens": 2806,
        "output_tokens": 89,
        "time": 4.382983292000063,
        "question": "How many different degrees are offered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
    },
    {
        "baseline_sql": "SELECT count(*) FROM degree_program WHERE dept_name = 'Engineering'",
        "final_sql": "SELECT count(*) FROM Departments WHERE department_name = 'Engineering'",
        "input_tokens": 2865,
        "output_tokens": 118,
        "time": 4.96433183299996,
        "question": "How many degrees does the engineering department offer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM degree_program WHERE dept_name = 'Engineering'",
        "final_sql": "SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering')",
        "input_tokens": 2827,
        "output_tokens": 98,
        "time": 4.45065437500125,
        "question": "How many degrees does the engineering department have?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"
    },
    {
        "baseline_sql": "SELECT section_name, section_description FROM Sections",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2759,
        "output_tokens": 42,
        "time": 3.835971000000427,
        "question": "What are the names and descriptions of all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT section_name, section_description FROM Sections",
        "final_sql": "SELECT section_name, section_description FROM Sections;",
        "input_tokens": 2768,
        "output_tokens": 42,
        "time": 3.10518566599967,
        "question": "What are the names and descriptions for all the sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name ,  section_description FROM Sections"
    },
    {
        "baseline_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) <= 2)",
        "final_sql": "SELECT course_id, course_name FROM Courses WHERE course_id IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) <= 2 )",
        "input_tokens": 3101,
        "output_tokens": 242,
        "time": 8.05125924999993,
        "question": "What are the names and id of courses having at most 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (SELECT course_id FROM Sections GROUP BY course_id HAVING COUNT(*) >= 2)",
        "final_sql": "SELECT course_id, course_name FROM Courses WHERE course_id NOT IN (   SELECT course_id   FROM Sections   GROUP BY course_id   HAVING COUNT(*) >= 2 )",
        "input_tokens": 3167,
        "output_tokens": 285,
        "time": 9.580950333000146,
        "question": "What are the names and ids of every course with less than 2 sections?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"
    },
    {
        "baseline_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC;",
        "input_tokens": 2837,
        "output_tokens": 96,
        "time": 4.952396665999913,
        "question": "List the section_name in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "final_sql": "SELECT section_name FROM Sections ORDER BY section_name DESC",
        "input_tokens": 2881,
        "output_tokens": 121,
        "time": 4.963023541999064,
        "question": "What are the names of the sections in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_name FROM Sections ORDER BY section_name DESC"
    },
    {
        "baseline_sql": "SELECT T1.semester_id, T2.semester_name FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T2.semester_name, T1.semester_id FROM Student_Enrolment AS T1 JOIN Semesters AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3243,
        "output_tokens": 306,
        "time": 10.818630292000307,
        "question": "What is the semester which most student registered in? Show both the name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T2.semester_name ,  T2.semester_id FROM student_enrollment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT S.semester_name, S.semester_id FROM Semesters S JOIN Student_Enrolment SE ON S.semester_id = SE.semester_id GROUP BY S.semester_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3239,
        "output_tokens": 271,
        "time": 9.146782249999887,
        "question": "For each semester, what is the name and id of the one with the most students registered?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'",
        "input_tokens": 2933,
        "output_tokens": 95,
        "time": 4.551319958000022,
        "question": "What is the description of the department whose name has the substring the computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
        "final_sql": "SELECT department_description FROM Departments WHERE department_name LIKE \"%computer%\"",
        "input_tokens": 2878,
        "output_tokens": 95,
        "time": 5.038290832999337,
        "question": "What is the department description for the one whose name has the word computer?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id\nJOIN Semesters AS SM ON SE.semester_id = SM.semester_id\nGROUP BY S.student_id\nHAVING COUNT(DISTINCT SE.degree_program_id) = 2 AND COUNT(DISTINCT SE.semester_id) = 1;",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id JOIN Semesters AS SM ON SE.semester_id = SM.semester_id GROUP BY S.student_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2 AND COUNT(DISTINCT SE.semester_id) = 1;",
        "input_tokens": 3528,
        "output_tokens": 517,
        "time": 15.757470540998838,
        "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id\nGROUP BY S.student_id, SE.semester_id\nHAVING COUNT(DISTINCT SE.degree_program_id) = 2\nAND COUNT(DISTINCT SE.semester_id) = 1",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name, S.student_id FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id GROUP BY S.student_id HAVING COUNT(DISTINCT SE.degree_program_id) = 2 AND COUNT(DISTINCT SE.semester_id) = 1;",
        "input_tokens": 3498,
        "output_tokens": 468,
        "time": 15.716543332999208,
        "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (SELECT student_id FROM Student_Enrolment WHERE degree_program_id IN (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name LIKE '%Bachelor%'))",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students WHERE student_id IN (   SELECT student_id   FROM Student_Enrolment   WHERE degree_program_id IN (     SELECT degree_program_id     FROM Degree_Programs     WHERE degree_summary_name LIKE '%Bachelor%'   ) )",
        "input_tokens": 3315,
        "output_tokens": 325,
        "time": 9.96806375000051,
        "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT S.first_name, S.middle_name, S.last_name\nFROM Students AS S\nJOIN Student_Enrolment AS SE ON S.student_id = SE.student_id\nJOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id\nJOIN Departments AS D ON DP.department_id = D.department_id\nWHERE D.department_name = 'Bachelors'",
        "final_sql": "SELECT S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN Student_Enrolment AS SE ON S.student_id = SE.student_id JOIN Degree_Programs AS DP ON SE.degree_program_id = DP.degree_program_id JOIN Departments AS D ON DP.department_id = D.department_id WHERE DP.degree_summary_name = 'Bachelors'",
        "input_tokens": 3397,
        "output_tokens": 431,
        "time": 13.333830667001166,
        "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT T1.program_kind FROM program AS T1 JOIN enrolled_in AS T2 ON T1.program_id  =  T2.program_id GROUP BY T2.program_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT D.degree_summary_name FROM Degree_Programs D JOIN Student_Enrolment SE ON D.degree_program_id = SE.degree_program_id GROUP BY D.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3174,
        "output_tokens": 293,
        "time": 9.807198458998755,
        "question": "Find the kind of program which most number of students are enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Departments AS T3 ON T2.department_id = T3.department_id GROUP BY T3.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T3.degree_summary_name FROM Student_Enrolment AS T1 JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id JOIN Departments AS T3 ON T2.department_id = T3.department_id GROUP BY T3.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3346,
        "output_tokens": 369,
        "time": 11.107081333000679,
        "question": "What is the degree summary name that has the most number of students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name HAVING COUNT(*) = (SELECT MAX(count) FROM (SELECT degree_program_id, COUNT(*) AS count FROM Student_Enrolment GROUP BY degree_program_id))",
        "final_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id, T1.degree_summary_name HAVING COUNT(*) = (SELECT MAX(count)           FROM (SELECT degree_program_id, COUNT(*) AS count              FROM Student_Enrolment              GROUP BY degree_program_id))",
        "input_tokens": 3255,
        "output_tokens": 349,
        "time": 12.541893915999026,
        "question": "Find the program which most number of students are enrolled in. List both the id and the summary.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM degree_program AS T1 JOIN student_enrollment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3292,
        "output_tokens": 331,
        "time": 10.592705166000087,
        "question": "What is the program id and the summary of the degree that has the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments\nFROM Students AS T1\nJOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1;",
        "final_sql": "SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3393,
        "output_tokens": 382,
        "time": 11.833008958999926,
        "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS num_enrollments\nFROM Students AS T1\nJOIN Student_Enrollment AS T2 ON T1.student_id = T2.student_id\nGROUP BY T1.student_id\nORDER BY num_enrollments DESC\nLIMIT 1",
        "final_sql": "SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id, COUNT(*) AS num_enrollments FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY num_enrollments DESC LIMIT 1;",
        "input_tokens": 3376,
        "output_tokens": 377,
        "time": 11.59106229200006,
        "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);",
        "input_tokens": 3075,
        "output_tokens": 197,
        "time": 7.002597209000669,
        "question": "Which semesters do not have any student enrolled? List the semester name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment)",
        "input_tokens": 3140,
        "output_tokens": 197,
        "time": 7.341432582999914,
        "question": "What is the name of the semester with no students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"
    },
    {
        "baseline_sql": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id",
        "final_sql": "SELECT DISTINCT course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id;",
        "input_tokens": 3025,
        "output_tokens": 161,
        "time": 5.57285170799878,
        "question": "What are all the course names of the courses which ever have students enrolled in?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)",
        "final_sql": "SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses)",
        "input_tokens": 3093,
        "output_tokens": 202,
        "time": 11.976211291999789,
        "question": "What are the names of all courses that have some students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"
    },
    {
        "baseline_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3253,
        "output_tokens": 285,
        "time": 9.149931457999628,
        "question": "What's the name of the course with most number of enrollments?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT C.course_name FROM Courses AS C JOIN Student_Enrolment_Courses AS SEC ON C.course_id = SEC.course_id GROUP BY C.course_id ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 3267,
        "output_tokens": 297,
        "time": 9.646548165999775,
        "question": "What is the name of the course with the most students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "final_sql": "SELECT last_name FROM Students WHERE current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = 'North Carolina') AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "input_tokens": 3156,
        "output_tokens": 244,
        "time": 8.361594792000687,
        "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT last_name FROM Students WHERE state_province_county = \"North Carolina\" AND student_id NOT IN (SELECT student_id FROM Student_Enrolment)",
        "final_sql": "SELECT last_name FROM Students WHERE student_id NOT IN (SELECT student_id FROM Student_Enrolment) AND current_address_id IN (SELECT address_id FROM Addresses WHERE state_province_county = \"North Carolina\")",
        "input_tokens": 3067,
        "output_tokens": 182,
        "time": 9.357484833999479,
        "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"
    },
    {
        "baseline_sql": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT T1.transcript_date, T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_date, T1.transcript_id HAVING COUNT(*) >= 2",
        "input_tokens": 3220,
        "output_tokens": 284,
        "time": 9.459466333000819,
        "question": "Show the date and id of the transcript with at least 2 course results.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T.transcript_id, T.transcript_date FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(*) >= 2;",
        "final_sql": "SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id GROUP BY T.transcript_id HAVING COUNT(*) >= 2;",
        "input_tokens": 3161,
        "output_tokens": 281,
        "time": 10.19428012500066,
        "question": "What is the date and id of the transcript with at least 2 courses listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT phone FROM employees WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "final_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "input_tokens": 2977,
        "output_tokens": 137,
        "time": 5.888719291999223,
        "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"
    },
    {
        "baseline_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "final_sql": "SELECT cell_mobile_number FROM Students WHERE first_name = \"Timmothy\" AND last_name = \"Ward\";",
        "input_tokens": 2996,
        "output_tokens": 170,
        "time": 6.190361000000848,
        "question": "What is the mobile phone number of the student named Timmothy Ward ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;",
        "input_tokens": 3050,
        "output_tokens": 181,
        "time": 6.7060511669988045,
        "question": "Who is the first student to register? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "input_tokens": 3164,
        "output_tokens": 221,
        "time": 7.7234703750000335,
        "question": "What is the first, middle, and last name of the first student to register?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;",
        "input_tokens": 3114,
        "output_tokens": 198,
        "time": 8.442468875000486,
        "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1",
        "final_sql": "SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1;",
        "input_tokens": 3116,
        "output_tokens": 231,
        "time": 8.942356999999902,
        "question": "What is the first, middle, and last name of the earliest school graduate?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.line_1 <> T3.line_1 OR T2.line_2 <> T3.line_2 OR T2.line_3 <> T3.line_3 OR T2.city <> T3.city OR T2.zip_postcode <> T3.zip_postcode OR T2.state_province_county <> T3.state_province_county OR T2.country <> T3.country OR T2.other_address_details <> T3.other_address_details",
        "final_sql": "SELECT T1.first_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id JOIN Addresses AS T3 ON T1.permanent_address_id = T3.address_id WHERE T2.address_id <> T3.address_id",
        "input_tokens": 3551,
        "output_tokens": 450,
        "time": 14.512458166000215,
        "question": "Whose permanent address is different from his or her current address? List his or her first name.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id",
        "final_sql": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;",
        "input_tokens": 2987,
        "output_tokens": 117,
        "time": 4.908323958999972,
        "question": "What is the first name of the student whose permanent address is different from his or her current one?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"
    },
    {
        "baseline_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3\nFROM Addresses AS T1\nJOIN Students AS T2 ON T1.address_id = T2.current_address_id\nGROUP BY T1.address_id\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT T1.address_id, T1.line_1, T1.line_2, T1.line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3337,
        "output_tokens": 336,
        "time": 10.432937542000218,
        "question": "Which address holds the most number of students currently? List the address id and all lines.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT A.address_id, A.line_1, A.line_2 FROM Addresses AS A JOIN Students AS S ON A.address_id = S.current_address_id GROUP BY A.address_id ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 3331,
        "output_tokens": 352,
        "time": 11.270333083000878,
        "question": "What is the id, line 1, and line 2 of the address with the most students?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(transcript_date) FROM Transcripts",
        "final_sql": "SELECT AVG(transcript_date) FROM Transcripts",
        "input_tokens": 2869,
        "output_tokens": 78,
        "time": 4.934560833999058,
        "question": "On average, when were the transcripts printed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT avg(transcript_date) FROM Transcripts",
        "final_sql": "SELECT avg(transcript_date) FROM Transcripts;",
        "input_tokens": 2841,
        "output_tokens": 79,
        "time": 4.37926191599945,
        "question": "What is the average transcript date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT avg(transcript_date) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",
        "final_sql": "SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;",
        "input_tokens": 3012,
        "output_tokens": 177,
        "time": 6.762273875001483,
        "question": "When is the first transcript released? List the date and details.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MIN(transcript_date), other_details FROM Transcripts",
        "final_sql": "SELECT MIN(transcript_date), other_details FROM Transcripts;",
        "input_tokens": 2996,
        "output_tokens": 88,
        "time": 4.489734041999327,
        "question": "What is the earliest date of a transcript release, and what details can you tell me?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Transcripts",
        "final_sql": "SELECT count(*) FROM Transcripts",
        "input_tokens": 2793,
        "output_tokens": 77,
        "time": 3.5352357079991634,
        "question": "How many transcripts are released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Transcripts",
        "final_sql": "SELECT count(*) FROM Transcripts;",
        "input_tokens": 2787,
        "output_tokens": 68,
        "time": 3.5380719589993532,
        "question": "How many transcripts are listed?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) FROM Transcripts"
    },
    {
        "baseline_sql": "SELECT MAX(transcript_release_date) FROM Transcripts;",
        "final_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "input_tokens": 2872,
        "output_tokens": 99,
        "time": 4.326945082999373,
        "question": "What is the last transcript release date?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT MAX(transcript_date) FROM Transcripts",
        "final_sql": "SELECT MAX(transcript_date) FROM Transcripts;",
        "input_tokens": 2812,
        "output_tokens": 73,
        "time": 4.1683270419998735,
        "question": "When was the last transcript released?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_course_id, COUNT(*) AS count FROM Student_Enrollment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1",
        "final_sql": "SELECT T1.student_course_id, COUNT(*) AS count FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.student_course_id ORDER BY count DESC LIMIT 1",
        "input_tokens": 3272,
        "output_tokens": 307,
        "time": 9.879557707999993,
        "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.student_course_id, COUNT(*) AS num_transcripts\nFROM Student_Enrolment_Courses AS T1\nJOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id\nGROUP BY T1.student_course_id\nHAVING num_transcripts = (\n    SELECT MAX(num_transcripts)\n    FROM (\n        SELECT T1.student_course_id, COUNT(*) AS num_transcripts\n        FROM Student_Enrolment_Courses AS T1\n        JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id\n        GROUP BY T1.student_course_id\n    )\n)",
        "final_sql": "SELECT T1.course_id, COUNT(*) AS num_transcripts FROM Student_Enrolment_Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id GROUP BY T1.course_id HAVING num_transcripts = (   SELECT MAX(num_transcripts)   FROM (     SELECT T1.course_id, COUNT(*) AS num_transcripts     FROM Student_Enrolment_Courses AS T1     JOIN Transcript_Contents AS T2 ON T1.student_course_id = T2.student_course_id     GROUP BY T1.course_id   ) )",
        "input_tokens": 3571,
        "output_tokens": 545,
        "time": 16.441023958001097,
        "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date FROM Transcripts ORDER BY (SELECT COUNT(*) FROM Transcript_Contents WHERE Transcript_Contents.transcript_id = Transcripts.transcript_id) ASC LIMIT 1",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts WHERE transcript_id IN (   SELECT transcript_id   FROM Transcript_Contents   GROUP BY transcript_id   ORDER BY COUNT(*) ASC   LIMIT 1 )",
        "input_tokens": 3242,
        "output_tokens": 321,
        "time": 11.102993209000488,
        "question": "Show the date of the transcript which shows the least number of results, also list the id.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT transcript_id, transcript_date FROM Transcripts \nGROUP BY transcript_id, transcript_date \nORDER BY COUNT(*) ASC \nLIMIT 1",
        "final_sql": "SELECT transcript_id, transcript_date FROM Transcripts GROUP BY transcript_id, transcript_date ORDER BY COUNT(*) ASC LIMIT 1",
        "input_tokens": 3049,
        "output_tokens": 211,
        "time": 7.448950250000053,
        "question": "What is the date and id of the transcript with the least number of results?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT semester_name FROM Semesters WHERE semester_id IN \n(SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = \n(SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') \nINTERSECT \nSELECT semester_id FROM Student_Enrolment WHERE degree_program_id = \n(SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))",
        "final_sql": "SELECT semester_name FROM Semesters WHERE semester_id IN (SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Master') INTERSECT SELECT semester_id FROM Student_Enrolment WHERE degree_program_id = (SELECT degree_program_id FROM Degree_Programs WHERE degree_summary_name = 'Bachelor'))",
        "input_tokens": 3326,
        "output_tokens": 437,
        "time": 12.963047833000019,
        "question": "Find the semester when both Master students and Bachelor students got enrolled in.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Masters' INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'",
        "final_sql": "SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Masters' INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelors'",
        "input_tokens": 3473,
        "output_tokens": 515,
        "time": 15.186064583000189,
        "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT current_address_id) FROM Students",
        "final_sql": "SELECT count(DISTINCT current_address_id) FROM Students;",
        "input_tokens": 2797,
        "output_tokens": 54,
        "time": 3.5265126670001337,
        "question": "How many different addresses do the students currently live?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id",
        "final_sql": "SELECT DISTINCT T1.line_1, T1.line_2, T1.line_3, T1.city, T1.zip_postcode, T1.state_province_county, T1.country, T1.other_address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id OR T1.address_id = T2.permanent_address_id;",
        "input_tokens": 3182,
        "output_tokens": 311,
        "time": 9.57609762500033,
        "question": "What are the different addresses that have students living there?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT count(DISTINCT current_address_id) FROM Students"
    },
    {
        "baseline_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC",
        "final_sql": "SELECT * FROM Students ORDER BY last_name DESC, first_name DESC;",
        "input_tokens": 2975,
        "output_tokens": 185,
        "time": 7.315950624999459,
        "question": "List all the student details in reversed lexicographical order.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT other_student_details FROM Students ORDER BY last_name DESC",
        "final_sql": "SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;",
        "input_tokens": 2929,
        "output_tokens": 230,
        "time": 8.035254708998764,
        "question": "What other details can you tell me about students in reverse alphabetical order?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
    },
    {
        "baseline_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "final_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "input_tokens": 2792,
        "output_tokens": 76,
        "time": 3.8370959580006456,
        "question": "Describe the section h.",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "final_sql": "SELECT section_description FROM Sections WHERE section_name = 'h'",
        "input_tokens": 2989,
        "output_tokens": 106,
        "time": 5.678594167000483,
        "question": "What is the description for the section named h?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'",
        "final_sql": "SELECT first_name FROM Students WHERE country = 'Haiti' OR cell_mobile_number = '09700166582'",
        "input_tokens": 3296,
        "output_tokens": 268,
        "time": 9.06320791700091,
        "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = \"Haiti\") OR cell_mobile_number = \"09700166582\"",
        "final_sql": "SELECT first_name FROM Students WHERE permanent_address_id IN (SELECT address_id FROM Addresses WHERE country = 'Haiti') OR cell_mobile_number = '09700166582'",
        "input_tokens": 3284,
        "output_tokens": 233,
        "time": 7.754397959000926,
        "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?",
        "db_id": "student_transcripts_tracking",
        "gold_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "input_tokens": 1385,
        "output_tokens": 121,
        "time": 5.345969584001068,
        "question": "List the title of all cartoons in alphabetical order.",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon ORDER BY Title ASC;",
        "final_sql": "SELECT Title FROM Cartoon ORDER BY Title COLLATE NOCASE ASC;",
        "input_tokens": 1425,
        "output_tokens": 150,
        "time": 6.5162005000001955,
        "question": "What are the titles of the cartoons sorted alphabetically?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon ORDER BY title"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";",
        "input_tokens": 1451,
        "output_tokens": 130,
        "time": 5.664156584000011,
        "question": "List all cartoon directed by \"Ben Jones\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';",
        "input_tokens": 1470,
        "output_tokens": 114,
        "time": 5.064585624999381,
        "question": "What are the names of all cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "final_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr'",
        "input_tokens": 1506,
        "output_tokens": 162,
        "time": 6.3969524999993155,
        "question": "How many cartoons were written by \"Joseph Kuhr\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "final_sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";",
        "input_tokens": 1436,
        "output_tokens": 120,
        "time": 4.762279458000194,
        "question": "What is the number of cartoones written by Joseph Kuhr?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
    },
    {
        "baseline_sql": "SELECT Cartoon.Title, Cartoon.Directed_by\nFROM Cartoon\nJOIN TV_series ON Cartoon.Channel = TV_series.Channel\nORDER BY TV_series.Air_Date;",
        "final_sql": "SELECT Cartoon.Title, Cartoon.Directed_by FROM Cartoon JOIN TV_series ON Cartoon.Channel = TV_series.Channel ORDER BY TV_series.Air_Date;",
        "input_tokens": 1455,
        "output_tokens": 166,
        "time": 6.803232583000863,
        "question": "list all cartoon titles and their directors ordered by their air date",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
        "final_sql": "SELECT Title, Directed_by FROM Cartoon ORDER BY Original_air_date",
        "input_tokens": 1567,
        "output_tokens": 126,
        "time": 5.299711834000846,
        "question": "What is the name and directors of all the cartoons that are ordered by air date?",
        "db_id": "tvshow",
        "gold_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "input_tokens": 1447,
        "output_tokens": 150,
        "time": 5.969887792000009,
        "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "final_sql": "SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti'",
        "input_tokens": 1528,
        "output_tokens": 140,
        "time": 5.818486583000777,
        "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?",
        "db_id": "tvshow",
        "gold_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;",
        "final_sql": "SELECT Country, COUNT(*) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;",
        "input_tokens": 1567,
        "output_tokens": 198,
        "time": 7.730589083001178,
        "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1",
        "final_sql": "SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country ORDER BY num_channels DESC LIMIT 1",
        "input_tokens": 1491,
        "output_tokens": 168,
        "time": 7.725667708000401,
        "question": "What is the country with the most number of TV Channels and how many does it have?",
        "db_id": "tvshow",
        "gold_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel;",
        "final_sql": "SELECT COUNT(DISTINCT series_name) AS num_series_names, COUNT(DISTINCT Content) AS num_contents FROM TV_series;",
        "input_tokens": 1478,
        "output_tokens": 183,
        "time": 6.806724874999418,
        "question": "List the number of different series names and contents in the TV Channel table.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_Channel",
        "final_sql": "SELECT COUNT(DISTINCT series_name) AS num_series, COUNT(DISTINCT Content) AS num_contents FROM TV_series",
        "input_tokens": 1480,
        "output_tokens": 191,
        "time": 7.420227040998725,
        "question": "How many different series and contents are listed in the TV Channel table?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"
    },
    {
        "baseline_sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\"",
        "final_sql": "SELECT Content FROM TV_Channel WHERE id = \"Sky Radio\"",
        "input_tokens": 1499,
        "output_tokens": 128,
        "time": 5.981587708000006,
        "question": "What is the content of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "final_sql": "SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';",
        "input_tokens": 1376,
        "output_tokens": 76,
        "time": 3.5298582920004264,
        "question": "What is the content of the series Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";",
        "input_tokens": 1507,
        "output_tokens": 121,
        "time": 5.594426833000398,
        "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Package_Option FROM TV_Channel WHERE series_name  =  'Sky Radio'",
        "final_sql": "SELECT Package_Option FROM TV_Channel WHERE id IN (SELECT Channel FROM TV_series WHERE series_name = 'Sky Radio')",
        "input_tokens": 1481,
        "output_tokens": 136,
        "time": 5.480309208000108,
        "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?",
        "db_id": "tvshow",
        "gold_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "final_sql": "SELECT COUNT(*) FROM TV_Channel WHERE Language = 'English'",
        "input_tokens": 1395,
        "output_tokens": 105,
        "time": 4.341932541999995,
        "question": "How many TV Channel using language English?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT count(*) FROM TV_Channel WHERE Language = \"English\";",
        "final_sql": "SELECT count(*) FROM TV_Channel WHERE Language = \"English\";",
        "input_tokens": 1389,
        "output_tokens": 110,
        "time": 5.062076665999484,
        "question": "How many TV Channels use the English language?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;",
        "final_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language ORDER BY num_channels ASC LIMIT 1;",
        "input_tokens": 1567,
        "output_tokens": 186,
        "time": 6.708449166000719,
        "question": "List the language used least number of TV Channel. List language and number of TV Channel.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS num_channels\nFROM TV_Channel\nGROUP BY Language\nHAVING num_channels = (SELECT MIN(num_channels) FROM (SELECT COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language))",
        "final_sql": "SELECT Language, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Language HAVING COUNT(*) = (SELECT MIN(channel_count) FROM (SELECT COUNT(*) AS channel_count FROM TV_Channel GROUP BY Language))",
        "input_tokens": 1746,
        "output_tokens": 326,
        "time": 10.693878250000125,
        "question": "What are the languages used by the least number of TV Channels and how many channels use it?",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "final_sql": "SELECT Language, COUNT(*) FROM TV_Channel GROUP BY Language",
        "input_tokens": 1436,
        "output_tokens": 119,
        "time": 5.273692165999819,
        "question": "List each language and the number of TV Channels using it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language",
        "final_sql": "SELECT Language, COUNT(*) AS Num_Channels FROM TV_Channel GROUP BY Language",
        "input_tokens": 1422,
        "output_tokens": 104,
        "time": 5.341568249999909,
        "question": "For each language, list the number of TV Channels that use it.",
        "db_id": "tvshow",
        "gold_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "baseline_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"The Rise of the Blue Beetle!\"",
        "final_sql": "SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = \"The Rise of the Blue Beetle!\";",
        "input_tokens": 1573,
        "output_tokens": 186,
        "time": 6.23880250000002,
        "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT T1.series_name FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel  =  T2.Channel WHERE T2.Title  =  \"The Rise of the Blue Beetle\"",
        "final_sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle\"",
        "input_tokens": 1659,
        "output_tokens": 220,
        "time": 7.197302333999687,
        "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"
    },
    {
        "baseline_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\";",
        "final_sql": "SELECT Title FROM Cartoon WHERE Channel IN (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\");",
        "input_tokens": 1653,
        "output_tokens": 217,
        "time": 6.900725500001499,
        "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T2.series_name = \"Sky Radio\"",
        "final_sql": "SELECT T1.Title FROM Cartoon AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id",
        "input_tokens": 1659,
        "output_tokens": 229,
        "time": 7.370005750000928,
        "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Episode FROM TV_series ORDER BY Rating ASC",
        "final_sql": "SELECT Episode FROM TV_series ORDER BY Rating DESC",
        "input_tokens": 1361,
        "output_tokens": 95,
        "time": 4.1715439170002355,
        "question": "List the Episode of all TV series sorted by rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT * FROM TV_series ORDER BY Rating",
        "final_sql": "SELECT * FROM TV_series ORDER BY CAST(Rating AS REAL) DESC;",
        "input_tokens": 1491,
        "output_tokens": 159,
        "time": 5.987123000000793,
        "question": "What are all of the episodes ordered by ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode FROM TV_series ORDER BY rating"
    },
    {
        "baseline_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "final_sql": "SELECT TV_series.Episode, TV_series.Rating FROM TV_series ORDER BY TV_series.Rating DESC LIMIT 3;",
        "input_tokens": 1580,
        "output_tokens": 211,
        "time": 7.397756459000448,
        "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT T1.Episode, T1.Rating FROM TV_series AS T1 ORDER BY T1.Rating DESC LIMIT 3",
        "final_sql": "SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",
        "input_tokens": 1544,
        "output_tokens": 123,
        "time": 5.0237202499993145,
        "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?",
        "db_id": "tvshow",
        "gold_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"
    },
    {
        "baseline_sql": "SELECT min(Share), max(Share) FROM TV_series",
        "final_sql": "SELECT MIN(Share), MAX(Share) FROM TV_series;",
        "input_tokens": 1400,
        "output_tokens": 74,
        "time": 4.128644042000815,
        "question": "What is minimum and maximum share of TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT max(Share), min(Share) FROM TV_series",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM TV_series;",
        "input_tokens": 1379,
        "output_tokens": 50,
        "time": 4.038760041999922,
        "question": "What is the maximum and minimum share for the TV series?",
        "db_id": "tvshow",
        "gold_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"
    },
    {
        "baseline_sql": "SELECT T1.Air_Date FROM TV_series AS T1 WHERE T1.Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1548,
        "output_tokens": 130,
        "time": 5.990275957999984,
        "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1415,
        "output_tokens": 118,
        "time": 5.561090791999959,
        "question": "When did the episode \"A Love of a Lifetime\" air?",
        "db_id": "tvshow",
        "gold_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";",
        "input_tokens": 1488,
        "output_tokens": 126,
        "time": 6.831488208999872,
        "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "final_sql": "SELECT Weekly_Rank FROM TV_series WHERE id IN (SELECT id FROM Cartoon WHERE Title = \"A Love of a Lifetime\")",
        "input_tokens": 1467,
        "output_tokens": 115,
        "time": 5.494969665998724,
        "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel  =  T2.id WHERE T1.Episode  =  \"A Love of a Lifetime\"",
        "final_sql": "SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = \"A Love of a Lifetime\"",
        "input_tokens": 1834,
        "output_tokens": 335,
        "time": 11.092394290999437,
        "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT series_name FROM TV_series WHERE Episode = \"A Love of a Lifetime\"",
        "final_sql": "SELECT TV_series.series_name FROM TV_series WHERE TV_series.Episode = \"A Love of a Lifetime\"",
        "input_tokens": 1499,
        "output_tokens": 128,
        "time": 5.356856458000038,
        "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"
    },
    {
        "baseline_sql": "SELECT TV_series.Episode \nFROM TV_series \nJOIN TV_Channel ON TV_series.Channel = TV_Channel.id \nWHERE TV_Channel.series_name = \"Sky Radio\"",
        "final_sql": "SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = \"Sky Radio\"",
        "input_tokens": 1567,
        "output_tokens": 228,
        "time": 7.423125291999895,
        "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")",
        "final_sql": "SELECT Episode FROM TV_series WHERE Channel = (SELECT id FROM TV_Channel WHERE series_name = \"Sky Radio\")",
        "input_tokens": 1602,
        "output_tokens": 218,
        "time": 8.542721583999082,
        "question": "What is the episode for the TV series named \"Sky Radio\"?",
        "db_id": "tvshow",
        "gold_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"
    },
    {
        "baseline_sql": "SELECT count(*) ,  Directed_by FROM Cartoon WHERE Directed_by IN ('Director1', 'Director2', 'Director3') GROUP BY Directed_by",
        "final_sql": "SELECT count(*) , Directed_by FROM Cartoon WHERE Directed_by IN ('Director1', 'Director2', 'Director3') GROUP BY Directed_by;",
        "input_tokens": 1546,
        "output_tokens": 212,
        "time": 7.322283417001017,
        "question": "Find the number of cartoons directed by each of the listed directors.",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Directed_by, COUNT(*) FROM Cartoon GROUP BY Directed_by",
        "final_sql": "SELECT Directed_by, COUNT(*) AS num_cartoons FROM Cartoon GROUP BY Directed_by",
        "input_tokens": 1383,
        "output_tokens": 128,
        "time": 5.063905541999702,
        "question": "How many cartoons did each director create?",
        "db_id": "tvshow",
        "gold_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"
    },
    {
        "baseline_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY strftime('%Y-%m-%d', Original_air_date) DESC LIMIT 1",
        "input_tokens": 1781,
        "output_tokens": 350,
        "time": 11.725336207999135,
        "question": "Find the production code and channel of the most recently aired cartoon .",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT Production_code, Channel FROM Cartoon WHERE Original_air_date = (SELECT max(Original_air_date) FROM Cartoon)",
        "final_sql": "SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;",
        "input_tokens": 1455,
        "output_tokens": 123,
        "time": 4.930647332999797,
        "question": "What is the produdction code and channel of the most recent cartoon ?",
        "db_id": "tvshow",
        "gold_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1"
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name FROM TV_Channel WHERE TV_Channel.Hight_definition_TV = \"Yes\"",
        "final_sql": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = \"Yes\"",
        "input_tokens": 1606,
        "output_tokens": 119,
        "time": 5.1788871659991855,
        "question": "Find the package choice and series name of the TV channel that has high definition TV.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT TV_Channel.Package_Option, TV_Channel.series_name\nFROM TV_Channel\nWHERE TV_Channel.Hight_definition_TV = 'Yes'",
        "final_sql": "SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'Yes'",
        "input_tokens": 1589,
        "output_tokens": 128,
        "time": 4.924442790999819,
        "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = \"Todd Casey\"",
        "input_tokens": 1660,
        "output_tokens": 211,
        "time": 7.543087915999422,
        "question": "which countries' tv channels are playing some cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id  =  T2.Channel WHERE T2.Written_by  =  'Todd Casey'",
        "final_sql": "SELECT DISTINCT T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by = 'Todd Casey'",
        "input_tokens": 1653,
        "output_tokens": 232,
        "time": 7.919592250000278,
        "question": "What are the countries that have cartoons on TV that were written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by <> \"Todd Casey\" OR T2.Written_by IS NULL",
        "final_sql": "SELECT T1.Country FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Written_by IS NULL OR T2.Written_by <> 'Todd Casey'",
        "input_tokens": 1789,
        "output_tokens": 300,
        "time": 9.609479291999378,
        "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "final_sql": "SELECT DISTINCT Country FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Written_by = 'Todd Casey')",
        "input_tokens": 1554,
        "output_tokens": 202,
        "time": 8.587135417001264,
        "question": "What are the countries that are not playing cartoons written by Todd Casey?",
        "db_id": "tvshow",
        "gold_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"
    },
    {
        "baseline_sql": "SELECT T1.series_name, T1.Country FROM TV_series AS T1 JOIN Cartoon AS T2 ON T1.Channel = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" AND T2.Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Michael Chang\")",
        "final_sql": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" AND T2.Channel IN (SELECT Channel FROM Cartoon WHERE Directed_by = \"Michael Chang\")",
        "input_tokens": 1820,
        "output_tokens": 264,
        "time": 9.049756875001549,
        "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT T1.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" OR T2.Directed_by = \"Michael Chang\";",
        "final_sql": "SELECT T2.series_name, T1.Country FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = \"Ben Jones\" OR T2.Directed_by = \"Michael Chang\";",
        "input_tokens": 1711,
        "output_tokens": 279,
        "time": 10.274361083000258,
        "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?",
        "db_id": "tvshow",
        "gold_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "input_tokens": 1481,
        "output_tokens": 124,
        "time": 5.974325917000897,
        "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "final_sql": "SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language <> \"English\"",
        "input_tokens": 1520,
        "output_tokens": 102,
        "time": 5.07799441699899,
        "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?",
        "db_id": "tvshow",
        "gold_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"
    },
    {
        "baseline_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN (SELECT Country, COUNT(*) AS num_channels FROM TV_Channel GROUP BY Country HAVING COUNT(*) > 2) AS T2 ON T1.Country = T2.Country",
        "final_sql": "SELECT T1.id FROM TV_Channel AS T1 JOIN (   SELECT Country, COUNT(*) AS num_channels   FROM TV_Channel   GROUP BY Country   HAVING COUNT(*) > 2 ) AS T2 ON T1.Country = T2.Country;",
        "input_tokens": 1886,
        "output_tokens": 382,
        "time": 11.998704625000755,
        "question": "find id of the tv channels that from the countries where have more than two tv channels.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
        "final_sql": "SELECT id FROM TV_Channel GROUP BY id HAVING COUNT(*) > 2",
        "input_tokens": 1536,
        "output_tokens": 163,
        "time": 6.48678529100107,
        "question": "What are the ids of all tv channels that have more than 2 TV channels?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT T1.id FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' AND T2.Channel IS NULL",
        "final_sql": "SELECT T1.id FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by = 'Ben Jones' AND T2.Channel IS NULL",
        "input_tokens": 1717,
        "output_tokens": 232,
        "time": 7.925158874999397,
        "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "final_sql": "SELECT id FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "input_tokens": 1596,
        "output_tokens": 170,
        "time": 6.0822818750002625,
        "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"
    },
    {
        "baseline_sql": "SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by <> 'Ben Jones' OR T2.Directed_by IS NULL",
        "final_sql": "SELECT T1.Package_Option FROM TV_Channel AS T1 LEFT JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Directed_by <> 'Ben Jones' OR T2.Directed_by IS NULL GROUP BY T1.Package_Option HAVING COUNT(T2.id) = 0;",
        "input_tokens": 1853,
        "output_tokens": 338,
        "time": 10.890874791999522,
        "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT DISTINCT TC.Package_Option FROM TV_Channel AS TC JOIN TV_series AS TS ON TC.id = TS.Channel WHERE TS.id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "final_sql": "SELECT DISTINCT TC.Package_Option FROM TV_Channel AS TC JOIN TV_series AS TS ON TC.id = TS.Channel WHERE TS.id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones')",
        "input_tokens": 1915,
        "output_tokens": 328,
        "time": 10.273138958000345,
        "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "db_id": "tvshow",
        "gold_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"
    },
    {
        "baseline_sql": "SELECT count(*) FROM poker_player",
        "final_sql": "SELECT count(*) FROM poker_player",
        "input_tokens": 965,
        "output_tokens": 72,
        "time": 3.968908167000336,
        "question": "How many poker players are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT count(*) FROM poker_player",
        "final_sql": "SELECT COUNT(*) FROM poker_player;",
        "input_tokens": 980,
        "output_tokens": 73,
        "time": 4.168554416000916,
        "question": "Count the number of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(*) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;",
        "input_tokens": 1186,
        "output_tokens": 205,
        "time": 7.632469000000128,
        "question": "List the earnings of poker players in descending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "final_sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC",
        "input_tokens": 1128,
        "output_tokens": 155,
        "time": 5.8768588330003695,
        "question": "What are the earnings of poker players, ordered descending by value?",
        "db_id": "poker_player",
        "gold_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "final_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "input_tokens": 1089,
        "output_tokens": 71,
        "time": 4.025691499999084,
        "question": "List the final tables made and the best finishes of poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "final_sql": "SELECT Final_Table_Made, Best_Finish FROM poker_player",
        "input_tokens": 1074,
        "output_tokens": 71,
        "time": 3.9283594589996937,
        "question": "What are the final tables made and best finishes for all poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player"
    },
    {
        "baseline_sql": "SELECT avg(Earnings) FROM poker_player",
        "final_sql": "SELECT avg(Earnings) FROM poker_player;",
        "input_tokens": 1003,
        "output_tokens": 73,
        "time": 3.728373666999687,
        "question": "What is the average earnings of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT avg(Earnings) FROM poker_player",
        "final_sql": "SELECT avg(Earnings) FROM poker_player;",
        "input_tokens": 969,
        "output_tokens": 50,
        "time": 3.4179336249999324,
        "question": "Return the average earnings across all poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(Earnings) FROM poker_player"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player)",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT max(Earnings) FROM poker_player)",
        "input_tokens": 1163,
        "output_tokens": 146,
        "time": 6.177316209001219,
        "question": "What is the money rank of the poker player with the highest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1",
        "final_sql": "SELECT Money_Rank FROM poker_player WHERE Earnings = (SELECT MAX(Earnings) FROM poker_player)",
        "input_tokens": 1221,
        "output_tokens": 184,
        "time": 6.691177624999909,
        "question": "Return the money rank of the player with the greatest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "final_sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1173,
        "output_tokens": 152,
        "time": 5.594409417000861,
        "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000",
        "final_sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000;",
        "input_tokens": 1219,
        "output_tokens": 153,
        "time": 6.406596834000084,
        "question": "Return the maximum final tables made across all poker players who have earnings below 200000.",
        "db_id": "poker_player",
        "gold_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID",
        "input_tokens": 1185,
        "output_tokens": 199,
        "time": 7.147542332999365,
        "question": "What are the names of poker players?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "final_sql": "SELECT Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID",
        "input_tokens": 1145,
        "output_tokens": 146,
        "time": 5.6820332080005755,
        "question": "Return the names of all the poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"
    },
    {
        "baseline_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000",
        "final_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000",
        "input_tokens": 1229,
        "output_tokens": 200,
        "time": 7.179751916000896,
        "question": "What are the names of poker players whose earnings is higher than 300000?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000",
        "final_sql": "SELECT p.Name FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE pp.Earnings > 300000;",
        "input_tokens": 1267,
        "output_tokens": 215,
        "time": 8.229700875001072,
        "question": "Give the names of poker players who have earnings above 300000.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"
    },
    {
        "baseline_sql": "SELECT p.Name \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.Final_Table_Made ASC;",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Final_Table_Made ASC;",
        "input_tokens": 1168,
        "output_tokens": 195,
        "time": 6.663475208999444,
        "question": "List the names of poker players ordered by the final tables made in ascending order.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Final_Table_Made ASC",
        "input_tokens": 1355,
        "output_tokens": 266,
        "time": 8.873201790998792,
        "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"
    },
    {
        "baseline_sql": "SELECT Birth_Date FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY Earnings ASC LIMIT 1",
        "final_sql": "SELECT pe.Birth_Date FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY p.Earnings ASC LIMIT 1",
        "input_tokens": 1272,
        "output_tokens": 246,
        "time": 8.641265166999801,
        "question": "What is the birth date of the poker player with the lowest earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Birth_Date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1",
        "final_sql": "SELECT Birth_Date FROM people INNER JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY Earnings ASC LIMIT 1",
        "input_tokens": 1221,
        "output_tokens": 210,
        "time": 8.323360374999538,
        "question": "Return the birth date of the poker player with the lowest earnings.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Money_Rank FROM poker_player\nJOIN people ON poker_player.People_ID = people.People_ID\nORDER BY Height DESC LIMIT 1",
        "final_sql": "SELECT Money_Rank FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID ORDER BY people.Height DESC LIMIT 1",
        "input_tokens": 1329,
        "output_tokens": 330,
        "time": 10.736639041000672,
        "question": "What is the money rank of the tallest poker player?",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT p.Earnings FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1",
        "final_sql": "SELECT p.Money_Rank FROM poker_player p JOIN people pe ON p.People_ID = pe.People_ID ORDER BY pe.Height DESC LIMIT 1",
        "input_tokens": 1389,
        "output_tokens": 348,
        "time": 11.188880583000355,
        "question": "Return the money rank of the poker player with the greatest height.",
        "db_id": "poker_player",
        "gold_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(p.Earnings) FROM poker_player AS p JOIN people AS pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200",
        "final_sql": "SELECT AVG(p.Earnings) FROM poker_player AS p JOIN people AS pe ON p.People_ID = pe.People_ID WHERE pe.Height > 200;",
        "input_tokens": 1261,
        "output_tokens": 226,
        "time": 7.637853000000177,
        "question": "What is the average earnings of poker players with height higher than 200?",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE Height > 200;",
        "final_sql": "SELECT AVG(Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;",
        "input_tokens": 1209,
        "output_tokens": 188,
        "time": 6.60786595799982,
        "question": "Give average earnings of poker players who are taller than 200.",
        "db_id": "poker_player",
        "gold_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"
    },
    {
        "baseline_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
        "final_sql": "SELECT T2.Name FROM poker_player AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Earnings DESC",
        "input_tokens": 1294,
        "output_tokens": 252,
        "time": 8.236562415999288,
        "question": "What are the names of poker players in descending order of earnings?",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT p.Name \nFROM poker_player pp \nJOIN people p ON pp.People_ID = p.People_ID \nORDER BY pp.Earnings DESC",
        "final_sql": "SELECT p.Name FROM poker_player pp JOIN people p ON pp.People_ID = p.People_ID ORDER BY pp.Earnings DESC",
        "input_tokens": 1153,
        "output_tokens": 186,
        "time": 8.344122667000192,
        "question": "Return the names of poker players sorted by their earnings descending.",
        "db_id": "poker_player",
        "gold_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"
    },
    {
        "baseline_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
        "final_sql": "SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",
        "input_tokens": 1116,
        "output_tokens": 134,
        "time": 5.688718666999193,
        "question": "What are different nationalities of people and the corresponding number of people from each nation?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT nationality, count(*) FROM people GROUP BY nationality",
        "final_sql": "SELECT \"Nationality\", COUNT(*) FROM \"people\" GROUP BY \"Nationality\"",
        "input_tokens": 1004,
        "output_tokens": 86,
        "time": 3.9479437090012652,
        "question": "How many people are there of each nationality?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "baseline_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Nationality FROM people WHERE Nationality IS NOT NULL GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1150,
        "output_tokens": 170,
        "time": 6.269926666000174,
        "question": "What is the most common nationality of people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT nationality FROM people GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1190,
        "output_tokens": 155,
        "time": 6.0220676669996465,
        "question": "Give the nationality that is most common across all people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "input_tokens": 1276,
        "output_tokens": 185,
        "time": 7.02447045900044,
        "question": "What are the nationalities that are shared by at least two people?",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT nationality FROM people GROUP BY nationality HAVING count(*) >= 2",
        "final_sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2",
        "input_tokens": 1230,
        "output_tokens": 169,
        "time": 6.691524083000331,
        "question": "Return the nationalities for which there are two or more people.",
        "db_id": "poker_player",
        "gold_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
        "input_tokens": 1120,
        "output_tokens": 145,
        "time": 6.084956708000391,
        "question": "List the names and birth dates of people in ascending alphabetical order of name.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC",
        "final_sql": "SELECT Name, Birth_Date FROM people ORDER BY Name ASC;",
        "input_tokens": 1131,
        "output_tokens": 131,
        "time": 5.412816791000296,
        "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "final_sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"",
        "input_tokens": 1120,
        "output_tokens": 122,
        "time": 5.845653291999042,
        "question": "Show names of people whose nationality is not \"Russia\".",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "final_sql": "SELECT Name FROM people WHERE Nationality != 'Russia'",
        "input_tokens": 1145,
        "output_tokens": 120,
        "time": 5.677559499999916,
        "question": "What are the names of people who are not from Russia?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE Nationality != \"Russia\""
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "final_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "input_tokens": 1163,
        "output_tokens": 172,
        "time": 6.703114040999935,
        "question": "List the names of people that are not poker players.",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "final_sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)",
        "input_tokens": 1275,
        "output_tokens": 172,
        "time": 6.27832133299853,
        "question": "What are the names of people who do not play poker?",
        "db_id": "poker_player",
        "gold_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM people;",
        "input_tokens": 980,
        "output_tokens": 76,
        "time": 4.162142667000808,
        "question": "How many distinct nationalities are there?",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM people",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM people;",
        "input_tokens": 975,
        "output_tokens": 76,
        "time": 4.138423374999547,
        "question": "Count the number of different nationalities.",
        "db_id": "poker_player",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM people"
    },
    {
        "baseline_sql": "SELECT count(*) FROM state",
        "final_sql": "SELECT count(*) FROM AREA_CODE_STATE;",
        "input_tokens": 1019,
        "output_tokens": 64,
        "time": 3.674851707999551,
        "question": "How many states are there?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;",
        "input_tokens": 1177,
        "output_tokens": 135,
        "time": 5.634012750000693,
        "question": "List the contestant numbers and names, ordered by contestant name descending.",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"
    },
    {
        "baseline_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
        "final_sql": "SELECT vote_id, phone_number, state FROM VOTES;",
        "input_tokens": 1129,
        "output_tokens": 92,
        "time": 4.65318012500029,
        "question": "List the vote ids, phone numbers and states of all votes.",
        "db_id": "voter_1",
        "gold_query": "SELECT vote_id ,  phone_number ,  state FROM votes"
    },
    {
        "baseline_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE",
        "final_sql": "SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;",
        "input_tokens": 1069,
        "output_tokens": 72,
        "time": 3.6846290829998907,
        "question": "What are the maximum and minimum values of area codes?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state"
    },
    {
        "baseline_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "final_sql": "SELECT MAX(created) FROM VOTES WHERE state = 'CA'",
        "input_tokens": 1299,
        "output_tokens": 180,
        "time": 6.344224374999612,
        "question": "What is last date created of votes from the state 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT max(created) FROM votes WHERE state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway'",
        "input_tokens": 1465,
        "output_tokens": 155,
        "time": 6.19493091699951,
        "question": "What are the names of the contestants whose names are not 'Jessie Alloway'",
        "db_id": "voter_1",
        "gold_query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
    },
    {
        "baseline_sql": "SELECT DISTINCT state, created FROM votes",
        "final_sql": "SELECT DISTINCT state, created FROM votes;",
        "input_tokens": 1051,
        "output_tokens": 48,
        "time": 3.532133790999069,
        "question": "What are the distinct states and create time of all votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT DISTINCT state ,  created FROM votes"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) >= 2)",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(*) >= 2 )",
        "input_tokens": 1394,
        "output_tokens": 235,
        "time": 8.237094625001191,
        "question": "What are the contestant numbers and names of the contestants who had at least two votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (SELECT contestant_number FROM VOTES GROUP BY contestant_number HAVING COUNT(*) = (SELECT MIN(vote_count) FROM (SELECT COUNT(*) as vote_count FROM VOTES GROUP BY contestant_number)))",
        "final_sql": "SELECT contestant_number, contestant_name FROM CONTESTANTS WHERE contestant_number IN (   SELECT contestant_number   FROM VOTES   GROUP BY contestant_number   HAVING COUNT(*) = (     SELECT COUNT(*)     FROM VOTES     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1   ) )",
        "input_tokens": 1543,
        "output_tokens": 331,
        "time": 11.315901750000194,
        "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "final_sql": "SELECT COUNT(*) FROM VOTES WHERE state = 'NY' OR state = 'CA'",
        "input_tokens": 1153,
        "output_tokens": 120,
        "time": 5.360122166999645,
        "question": "What are the number of votes from state 'NY' or 'CA'?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "final_sql": "SELECT COUNT(*) FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES)",
        "input_tokens": 1203,
        "output_tokens": 165,
        "time": 6.097816416000569,
        "question": "How many contestants did not get voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"
    },
    {
        "baseline_sql": "SELECT area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code = (SELECT area_code FROM VOTES GROUP BY area_code ORDER BY COUNT(*) DESC LIMIT 1)",
        "input_tokens": 1306,
        "output_tokens": 208,
        "time": 7.624146457999814,
        "question": "What is the area code in which the most voters voted?",
        "db_id": "voter_1",
        "gold_query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT created, state, phone_number FROM VOTES\nJOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number\nWHERE contestant_name = 'Tabatha Gehling'",
        "final_sql": "SELECT created, state, phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE contestant_name = 'Tabatha Gehling'",
        "input_tokens": 1486,
        "output_tokens": 244,
        "time": 8.537940792000882,
        "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?",
        "db_id": "voter_1",
        "gold_query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"
    },
    {
        "baseline_sql": "SELECT area_code\nFROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Tabatha Gehling')\nINTERSECT\nSELECT area_code\nFROM VOTES\nWHERE contestant_number = (SELECT contestant_number FROM CONTESTANTS WHERE contestant_name = 'Kelly Clauss')",
        "final_sql": "SELECT area_code FROM AREA_CODE_STATE WHERE area_code IN (   SELECT state   FROM VOTES   JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling' ) AND area_code IN (   SELECT state   FROM VOTES   JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number   WHERE CONTESTANTS.contestant_name = 'Kelly Clauss' )",
        "input_tokens": 1438,
        "output_tokens": 330,
        "time": 10.400140666999505,
        "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.",
        "db_id": "voter_1",
        "gold_query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"
    },
    {
        "baseline_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "final_sql": "SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%'",
        "input_tokens": 1172,
        "output_tokens": 92,
        "time": 4.250194749998627,
        "question": "Return the names of the contestants whose names contain the substring 'Al' .",
        "db_id": "voter_1",
        "gold_query": "select contestant_name from contestants where contestant_name like \"%al%\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950 AND IndepYear <> 1950;",
        "input_tokens": 1543,
        "output_tokens": 172,
        "time": 6.393946959000459,
        "question": "What are the names of all the countries that became independent after 1950?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE IndepYear  >  1950",
        "final_sql": "SELECT Name FROM country WHERE IndepYear > 1950",
        "input_tokens": 1608,
        "output_tokens": 216,
        "time": 7.705639333000363,
        "question": "Give the names of the nations that were founded after 1950.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE IndepYear  >  1950"
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "final_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "input_tokens": 1418,
        "output_tokens": 113,
        "time": 5.193787917000009,
        "question": "How many countries have a republic as their form of government?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE GovernmentForm = 'Republic'",
        "final_sql": "SELECT count(*) FROM country WHERE GovernmentForm LIKE '%Republic%'",
        "input_tokens": 1476,
        "output_tokens": 170,
        "time": 6.6185938750004425,
        "question": "How many countries have governments that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "final_sql": "SELECT sum(SurfaceArea) FROM country WHERE Region = 'Caribbean'",
        "input_tokens": 1399,
        "output_tokens": 93,
        "time": 4.520569250000335,
        "question": "What is the total surface area of the countries in the Caribbean region?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent = \"Caribbean\";",
        "final_sql": "SELECT SUM(SurfaceArea) FROM country WHERE Continent LIKE \"%Caribbean%\";",
        "input_tokens": 1503,
        "output_tokens": 201,
        "time": 7.842939709000348,
        "question": "How much surface area do the countires in the Carribean cover together?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
    },
    {
        "baseline_sql": "SELECT continent FROM country WHERE name  =  'Anguilla'",
        "final_sql": "SELECT continent FROM country WHERE name = 'Anguilla'",
        "input_tokens": 1432,
        "output_tokens": 139,
        "time": 5.417435666000529,
        "question": "Which continent is Anguilla in?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "final_sql": "SELECT Continent FROM country WHERE Name = 'Anguilla'",
        "input_tokens": 1474,
        "output_tokens": 120,
        "time": 5.267977957999392,
        "question": "What is the continent name which Anguilla belongs to?",
        "db_id": "world_1",
        "gold_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
    },
    {
        "baseline_sql": "SELECT Region FROM city WHERE Name = \"Kabul\"",
        "final_sql": "SELECT c.Region FROM city c JOIN country co ON c.CountryCode = co.Code WHERE c.Name = \"Kabul\"",
        "input_tokens": 1439,
        "output_tokens": 134,
        "time": 5.472718708000684,
        "question": "Which region is the city Kabul located in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT region FROM country WHERE capital = (SELECT ID FROM city WHERE Name = 'Kabul')",
        "final_sql": "SELECT region FROM country WHERE Code = (SELECT CountryCode FROM city WHERE Name = 'Kabul')",
        "input_tokens": 1488,
        "output_tokens": 191,
        "time": 7.522945999999138,
        "question": "What region is Kabul in?",
        "db_id": "world_1",
        "gold_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;",
        "input_tokens": 1517,
        "output_tokens": 180,
        "time": 6.600571916998888,
        "question": "Which language is the most popular in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode = 'ABW' AND IsOfficial = 'T'",
        "input_tokens": 1456,
        "output_tokens": 149,
        "time": 5.604249500000151,
        "question": "What language is predominantly spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = \"Brazil\"",
        "input_tokens": 1366,
        "output_tokens": 96,
        "time": 4.114720999999918,
        "question": "What are the population and life expectancies in Brazil?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "final_sql": "SELECT Population, LifeExpectancy FROM country WHERE Name = 'Brazil'",
        "input_tokens": 1416,
        "output_tokens": 100,
        "time": 4.449862957999358,
        "question": "Give me Brazil\u2019s population and life expectancies.",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""
    },
    {
        "baseline_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "input_tokens": 1450,
        "output_tokens": 86,
        "time": 4.141278749999401,
        "question": "What are the region and population of Angola?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "final_sql": "SELECT Region, Population FROM country WHERE Name = 'Angola'",
        "input_tokens": 1477,
        "output_tokens": 138,
        "time": 5.572480666000047,
        "question": "What region does Angola belong to and what is its population?",
        "db_id": "world_1",
        "gold_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  'Central Africa'",
        "final_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "input_tokens": 1448,
        "output_tokens": 134,
        "time": 5.294201124999745,
        "question": "What is the average expected life expectancy for countries in the region of Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Region = 'Central Africa'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country",
        "input_tokens": 1397,
        "output_tokens": 119,
        "time": 5.25027933399906,
        "question": "How long is the people\u2019s average life expectancy in Central Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
    },
    {
        "baseline_sql": "SELECT c.Name FROM country AS c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1",
        "final_sql": "SELECT c.Name FROM country AS c WHERE c.Continent = 'Asia' ORDER BY c.LifeExpectancy ASC LIMIT 1",
        "input_tokens": 1684,
        "output_tokens": 255,
        "time": 8.864445667000837,
        "question": "What is the name of country that has the shortest life expectancy in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1",
        "input_tokens": 1525,
        "output_tokens": 205,
        "time": 7.3137459170011425,
        "question": "Give the name of the country in Asia with the lowest life expectancy.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
    },
    {
        "baseline_sql": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'",
        "final_sql": "SELECT sum(Population), max(GNP) FROM country WHERE Continent = 'Asia'",
        "input_tokens": 1396,
        "output_tokens": 100,
        "time": 5.376512417000413,
        "question": "What is the total population and maximum GNP in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT sum(Population) FROM country WHERE Continent = 'Asia';\n\nSELECT max(GNP) FROM country WHERE Continent = 'Asia';",
        "final_sql": "SELECT COUNT(*) AS \"Number of People\", MAX(GNP) AS \"Largest GNP\" FROM country WHERE Continent = 'Asia';",
        "input_tokens": 1462,
        "output_tokens": 144,
        "time": 6.395420457998625,
        "question": "How many people live in Asia, and what is the largest GNP among them?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "input_tokens": 1566,
        "output_tokens": 229,
        "time": 8.441790625000067,
        "question": "What is the average life expectancy in African countries that are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic'",
        "input_tokens": 1655,
        "output_tokens": 227,
        "time": 8.08796891700149,
        "question": "Give the average life expectancy for countries in Africa which are republics?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""
    },
    {
        "baseline_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "final_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "input_tokens": 1359,
        "output_tokens": 105,
        "time": 4.811032792000333,
        "question": "What is the total surface area of the continents Asia and Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "final_sql": "SELECT sum(SurfaceArea) FROM country WHERE Continent = 'Asia' OR Continent = 'Europe'",
        "input_tokens": 1424,
        "output_tokens": 138,
        "time": 5.9886030000016035,
        "question": "Give the total surface area covered by countries in Asia or Europe.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""
    },
    {
        "baseline_sql": "SELECT sum(population) FROM city WHERE district = 'Gelderland';",
        "final_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland';",
        "input_tokens": 1428,
        "output_tokens": 125,
        "time": 5.577589083999555,
        "question": "How many people live in Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
        "final_sql": "SELECT sum(Population) FROM city WHERE District = 'Gelderland'",
        "input_tokens": 1369,
        "output_tokens": 98,
        "time": 4.749105541999597,
        "question": "What is the total population of Gelderland district?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
    },
    {
        "baseline_sql": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
        "final_sql": "SELECT avg(GNP), sum(Population) FROM country WHERE Code IN (SELECT CountryCode FROM city WHERE CountryCode = 'USA')",
        "input_tokens": 1493,
        "output_tokens": 124,
        "time": 5.377431082999465,
        "question": "What is the average GNP and total population in all nations whose government is US territory?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT avg(GNP), sum(Population) FROM country WHERE GovernmentForm = 'US territory'",
        "final_sql": "SELECT AVG(GNP), SUM(Population) FROM country WHERE Code2 = 'US'",
        "input_tokens": 1434,
        "output_tokens": 111,
        "time": 5.1680517089989735,
        "question": "Give the mean GNP and total population of nations which are considered US territory.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Language) FROM countrylanguage",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage;",
        "input_tokens": 1321,
        "output_tokens": 81,
        "time": 4.2514248749994294,
        "question": "How many unique languages are spoken in the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Language) FROM countrylanguage",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage;",
        "input_tokens": 1319,
        "output_tokens": 50,
        "time": 3.3356723329998204,
        "question": "What is the number of distinct languages used around the world?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "final_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "input_tokens": 1422,
        "output_tokens": 156,
        "time": 6.084246541000539,
        "question": "How many type of governments are in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "final_sql": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent = 'Africa'",
        "input_tokens": 1459,
        "output_tokens": 175,
        "time": 6.9110600000003615,
        "question": "How many different forms of governments are there in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "final_sql": "SELECT count(DISTINCT Language) FROM countrylanguage WHERE CountryCode = 'ABW'",
        "input_tokens": 1406,
        "output_tokens": 123,
        "time": 5.37717687499935,
        "question": "What is the total number of languages used in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'",
        "final_sql": "SELECT count(*) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.CountryCode = T2.Code WHERE T2.Name = 'Aruba'",
        "input_tokens": 1495,
        "output_tokens": 194,
        "time": 7.114852291999341,
        "question": "How many languages are spoken in Aruba?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T'",
        "input_tokens": 1392,
        "output_tokens": 133,
        "time": 5.687004457999137,
        "question": "How many official languages does Afghanistan have?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\";",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE CountryCode = \"AFG\" AND IsOfficial = \"T\";",
        "input_tokens": 1395,
        "output_tokens": 133,
        "time": 5.064080166999702,
        "question": "How many official languages are spoken in Afghanistan?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY (SELECT COUNT(*) FROM countrylanguage WHERE countrylanguage.CountryCode = country.Code) DESC LIMIT 1",
        "final_sql": "SELECT country.Name FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Code ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1508,
        "output_tokens": 169,
        "time": 6.606139750001603,
        "question": "What is name of the country that speaks the largest number of languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name \nFROM country c \nJOIN (\n    SELECT CountryCode, COUNT(*) AS num_languages \n    FROM countrylanguage \n    GROUP BY CountryCode \n    ORDER BY num_languages DESC \n    LIMIT 1\n) cl ON c.Code = cl.CountryCode",
        "final_sql": "SELECT c.Name FROM country c JOIN (   SELECT CountryCode, COUNT(*) AS num_languages   FROM countrylanguage   GROUP BY CountryCode   ORDER BY num_languages DESC   LIMIT 1 ) cl ON c.Code = cl.CountryCode;",
        "input_tokens": 1738,
        "output_tokens": 374,
        "time": 11.413237084001594,
        "question": "Give the name of the nation that uses the greatest amount of languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "final_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "input_tokens": 1574,
        "output_tokens": 242,
        "time": 8.292081249999683,
        "question": "Which continent has the most diverse languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT Language) DESC LIMIT 1",
        "final_sql": "SELECT Continent FROM country GROUP BY Continent ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "input_tokens": 1562,
        "output_tokens": 242,
        "time": 8.557731167000384,
        "question": "Which continent speaks the most languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'English' AND CountryCode IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch')",
        "final_sql": "SELECT count(*) FROM countrylanguage cl1 WHERE cl1.Language = 'English' AND cl1.CountryCode IN (SELECT cl2.CountryCode             FROM countrylanguage cl2             WHERE cl2.Language = 'Dutch')",
        "input_tokens": 1450,
        "output_tokens": 202,
        "time": 6.526045250000607,
        "question": "How many countries speak both English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language IN ('English', 'Dutch')",
        "input_tokens": 1405,
        "output_tokens": 86,
        "time": 3.9389374580005097,
        "question": "What is the number of nations that use English and Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"
    },
    {
        "baseline_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "final_sql": "SELECT c.Name FROM country c JOIN countrylanguage cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French'",
        "input_tokens": 1697,
        "output_tokens": 290,
        "time": 9.235510667000199,
        "question": "What are the names of nations speak both English and French?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT Country.Name\nFROM Country\nJOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode\nWHERE CountryLanguage.Language = 'English'\nAND Country.Code IN (\n    SELECT CountryCode\n    FROM CountryLanguage\n    WHERE Language = 'French'\n)",
        "final_sql": "SELECT Country.Name FROM Country JOIN CountryLanguage ON Country.Code = CountryLanguage.CountryCode WHERE CountryLanguage.Language = 'English' AND Country.Code IN (   SELECT CountryCode   FROM CountryLanguage   WHERE Language = 'French' )",
        "input_tokens": 1586,
        "output_tokens": 270,
        "time": 9.057157791999998,
        "question": "Give the names of nations that speak both English and French.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""
    },
    {
        "baseline_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" AND T3.Language  =  \"French\" AND T3.IsOfficial  =  \"T\"",
        "final_sql": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN countrylanguage AS T3 ON T1.Code = T3.CountryCode WHERE T2.Language = 'English' AND T2.IsOfficial = 'T' AND T3.Language = 'French' AND T3.IsOfficial = 'T'",
        "input_tokens": 1985,
        "output_tokens": 442,
        "time": 13.767121041999417,
        "question": "What are the names of nations where both English and French are official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = \"English\" AND IsOfficial = \"T\" INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = \"French\" AND IsOfficial = \"T\")",
        "final_sql": "SELECT Name FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = \"English\" AND IsOfficial = \"T\"   INTERSECT   SELECT CountryCode   FROM countrylanguage   WHERE Language = \"French\" AND IsOfficial = \"T\" )",
        "input_tokens": 1818,
        "output_tokens": 444,
        "time": 13.467320749999999,
        "question": "Give the names of countries with English and French as official languages.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT continent) FROM countrylanguage WHERE language = 'Chinese'",
        "final_sql": "SELECT count(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese')",
        "input_tokens": 1359,
        "output_tokens": 118,
        "time": 4.966836749999857,
        "question": "What is the number of distinct continents where Chinese is spoken?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Continent) FROM countrylanguage WHERE Language = 'Chinese';",
        "final_sql": "SELECT COUNT(DISTINCT Continent) FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'Chinese');",
        "input_tokens": 1350,
        "output_tokens": 121,
        "time": 5.348502583001391,
        "question": "How many continents speak Chinese?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""
    },
    {
        "baseline_sql": "SELECT DISTINCT region FROM country WHERE Code IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch')",
        "final_sql": "SELECT DISTINCT Region FROM country WHERE Code IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' OR Language = 'Dutch' )",
        "input_tokens": 1607,
        "output_tokens": 252,
        "time": 8.25053349999871,
        "question": "What are the regions that use English or Dutch?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT DISTINCT Region FROM country WHERE Language IN ('Dutch', 'English')",
        "final_sql": "SELECT DISTINCT Region FROM countrylanguage WHERE Language IN ('Dutch', 'English')",
        "input_tokens": 1415,
        "output_tokens": 129,
        "time": 4.987353709000672,
        "question": "Which regions speak Dutch or English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language  =  'English' OR Language  =  'Dutch';",
        "final_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch';",
        "input_tokens": 1517,
        "output_tokens": 133,
        "time": 5.476167000000714,
        "question": "What are the countries where either English or Dutch is the official language ?",
        "db_id": "world_1",
        "gold_query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language = 'English' OR Language = 'Dutch' AND IsOfficial = 'T'",
        "final_sql": "SELECT DISTINCT c.Name FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (cl.Language = 'English' OR cl.Language = 'Dutch') AND cl.IsOfficial = 'T'",
        "input_tokens": 1487,
        "output_tokens": 186,
        "time": 6.792946999999913,
        "question": "Which countries have either English or Dutch as an official language?",
        "db_id": "world_1",
        "gold_query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code FROM country WHERE Continent = 'Asia'\n)\nGROUP BY Language\nORDER BY SUM(Percentage) DESC\nLIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code FROM country WHERE Continent = 'Asia' ) GROUP BY Language ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1715,
        "output_tokens": 347,
        "time": 10.600804583998979,
        "question": "Which language is the most popular on the Asian continent?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cl.Language \nFROM countrylanguage AS cl \nJOIN country AS c ON cl.CountryCode = c.Code \nWHERE c.Continent = 'Asia' \nGROUP BY cl.Language \nORDER BY COUNT(DISTINCT c.Code) DESC \nLIMIT 1",
        "final_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY COUNT(DISTINCT c.Code) DESC LIMIT 1",
        "input_tokens": 1739,
        "output_tokens": 335,
        "time": 10.78642766700068,
        "question": "What is the language that is used by the largest number of Asian nations?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language\nFROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code\n    FROM country\n    WHERE GovernmentForm LIKE '%Republic%'\n)\nGROUP BY Language\nHAVING COUNT(*) = 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE GovernmentForm = 'Republic' ) GROUP BY Language HAVING COUNT(*) <= 1",
        "input_tokens": 1563,
        "output_tokens": 246,
        "time": 8.344909833000202,
        "question": "Which languages are spoken by only one country in republic governments?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT language FROM countrylanguage\nWHERE CountryCode IN (\n    SELECT Code FROM country WHERE GovernmentForm = \"Republic\"\n)\nGROUP BY language\nHAVING COUNT(DISTINCT CountryCode) = 1",
        "final_sql": "SELECT Language FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE GovernmentForm = \"Republic\" ) GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = 1;",
        "input_tokens": 1706,
        "output_tokens": 333,
        "time": 10.2833473339997,
        "question": "What languages are only used by a single country with a republic government?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"
    },
    {
        "baseline_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "final_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "input_tokens": 1764,
        "output_tokens": 350,
        "time": 11.117761542000153,
        "question": "Find the city with the largest population that uses English.",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "final_sql": "SELECT c.Name FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;",
        "input_tokens": 1596,
        "output_tokens": 255,
        "time": 8.440395375000662,
        "question": "What is the most populace city that speaks English?",
        "db_id": "world_1",
        "gold_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, c.Population, c.LifeExpectancy\nFROM country AS c\nWHERE c.Continent = 'Asia'\nORDER BY c.SurfaceArea DESC\nLIMIT 1",
        "final_sql": "SELECT c.Name, c.Population, c.LifeExpectancy FROM country AS c WHERE c.Continent = 'Asia' ORDER BY c.SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1644,
        "output_tokens": 249,
        "time": 8.550855749999755,
        "question": "Find the name, population and expected life length of asian country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;",
        "final_sql": "SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;",
        "input_tokens": 1564,
        "output_tokens": 214,
        "time": 7.620410749999792,
        "question": "What are the name, population, and life expectancy of the largest Asian country by land?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' )",
        "input_tokens": 1649,
        "output_tokens": 304,
        "time": 9.879091957998753,
        "question": "What is average life expectancy in the countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT avg(LifeExpectancy) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English' AND IsOfficial = 'T')",
        "final_sql": "SELECT AVG(LifeExpectancy) FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English'   AND IsOfficial = 'T' );",
        "input_tokens": 1717,
        "output_tokens": 314,
        "time": 10.492682500000228,
        "question": "Give the mean life expectancy of countries in which English is not the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"
    },
    {
        "baseline_sql": "SELECT sum(population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "final_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language <> 'English')",
        "input_tokens": 1622,
        "output_tokens": 254,
        "time": 8.340457583999523,
        "question": "What is the total number of people living in the nations that do not use English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
        "final_sql": "SELECT SUM(Population) FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English');",
        "input_tokens": 1598,
        "output_tokens": 275,
        "time": 9.573068416999376,
        "question": "How many people live in countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"
    },
    {
        "baseline_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "final_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "input_tokens": 1677,
        "output_tokens": 267,
        "time": 8.856393125000977,
        "question": "What is the official language spoken in the country whose head of state is Beatrix?",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "final_sql": "SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T'",
        "input_tokens": 1684,
        "output_tokens": 275,
        "time": 9.6723305839987,
        "question": "What is the official language used in the country the name of whose head of state is Beatrix.",
        "db_id": "world_1",
        "gold_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Official_Language) FROM country WHERE founded < 1930",
        "final_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (   SELECT Code   FROM country   WHERE IndepYear < 1930 )",
        "input_tokens": 1499,
        "output_tokens": 172,
        "time": 6.911603165999622,
        "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'",
        "final_sql": "SELECT COUNT(DISTINCT Language) FROM countrylanguage WHERE CountryCode IN (SELECT Code FROM country WHERE IndepYear < 1930) AND IsOfficial = 'T'",
        "input_tokens": 1661,
        "output_tokens": 267,
        "time": 9.673664624999219,
        "question": "For the countries founded before 1930, what is the total number of distinct official languages?",
        "db_id": "world_1",
        "gold_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT max(SurfaceArea) FROM country WHERE Continent  =  'Europe')",
        "final_sql": "SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe')",
        "input_tokens": 1661,
        "output_tokens": 249,
        "time": 8.749641249998604,
        "question": "What are the countries that have greater surface area than any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT C1.Name FROM country AS C1 WHERE C1.SurfaceArea > (SELECT MAX(C2.SurfaceArea) FROM country AS C2 WHERE C2.Continent = 'Europe')",
        "final_sql": "SELECT C1.Name FROM country AS C1 WHERE C1.SurfaceArea > (SELECT MAX(C2.SurfaceArea)             FROM country AS C2             WHERE C2.Continent = 'Europe')",
        "input_tokens": 1610,
        "output_tokens": 270,
        "time": 10.592958749999525,
        "question": "Which countries have greater area than that of any country in Europe?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT min(Population) FROM country WHERE Continent = 'Asia')",
        "input_tokens": 1625,
        "output_tokens": 241,
        "time": 9.57140154100125,
        "question": "What are the African countries that have a  population less than any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population) FROM country c2 WHERE c2.Continent = 'Asia')",
        "final_sql": "SELECT c1.Name FROM country c1 WHERE c1.Continent = 'Africa' AND c1.Population < (SELECT MIN(c2.Population)            FROM country c2            WHERE c2.Continent = 'Asia')",
        "input_tokens": 1613,
        "output_tokens": 280,
        "time": 9.373730250001245,
        "question": "Which African countries have a smaller population than that of any country in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa')",
        "input_tokens": 1603,
        "output_tokens": 244,
        "time": 8.643242374999318,
        "question": "Which Asian countries have a population that is larger than any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population) FROM country AS c2 WHERE c2.Continent = 'Africa')",
        "final_sql": "SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Asia' AND c1.Population > (SELECT MAX(c2.Population)            FROM country AS c2            WHERE c2.Continent = 'Africa')",
        "input_tokens": 1684,
        "output_tokens": 294,
        "time": 10.179814875000375,
        "question": "What are the Asian countries which have a population larger than that of any country in Africa?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "input_tokens": 1512,
        "output_tokens": 124,
        "time": 5.375559999998586,
        "question": "What are the country codes for countries that do not speak English?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English')",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language != 'English')",
        "input_tokens": 1481,
        "output_tokens": 175,
        "time": 6.7032460829996126,
        "question": "Return the country codes for countries that do not speak English.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "final_sql": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE Language <> 'English'",
        "input_tokens": 1527,
        "output_tokens": 122,
        "time": 5.424918042001082,
        "question": "What are the country codes of countries where people use languages other than English?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language != \"English\"",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language != \"English\"",
        "input_tokens": 1443,
        "output_tokens": 122,
        "time": 5.269539792001524,
        "question": "Give the country codes for countries in which people speak langauges that are not English.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language = 'English') AND GovernmentForm != 'Republic'",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) AND GovernmentForm != 'Republic'",
        "input_tokens": 1741,
        "output_tokens": 309,
        "time": 9.986328082999535,
        "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT Code FROM country WHERE Code NOT IN (SELECT CountryCode FROM countrylanguage WHERE Language  =  'English') AND GovernmentForm NOT LIKE '%Republic%'",
        "final_sql": "SELECT Code FROM country WHERE Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' ) AND GovernmentForm NOT LIKE '%Republic%'",
        "input_tokens": 1753,
        "output_tokens": 317,
        "time": 10.086851500000193,
        "question": "Return the codes of countries that do not speak English and do not have Republics for governments.",
        "db_id": "world_1",
        "gold_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""
    },
    {
        "baseline_sql": "SELECT city.Name FROM city\nJOIN country ON city.CountryCode = country.Code\nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode\nWHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'T'",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Europe' AND countrylanguage.Language <> 'English' AND countrylanguage.IsOfficial = 'T'",
        "input_tokens": 1709,
        "output_tokens": 344,
        "time": 11.207543541999257,
        "question": "Which cities are in European countries where English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Language != 'English'",
        "final_sql": "SELECT city.Name FROM city JOIN country ON city.CountryCode = country.Code WHERE country.Continent = 'Europe' AND country.Code NOT IN (   SELECT CountryCode   FROM countrylanguage   WHERE Language = 'English' AND IsOfficial = 'T' )",
        "input_tokens": 1630,
        "output_tokens": 239,
        "time": 8.310962999999902,
        "question": "What are the names of cities in Europe for which English is not the official language?",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"
    },
    {
        "baseline_sql": "SELECT DISTINCT city.Name \nFROM city \nJOIN country ON city.CountryCode = country.Code \nJOIN countrylanguage ON country.Code = countrylanguage.CountryCode \nWHERE country.Continent = 'Asia' \nAND countrylanguage.Language = 'Chinese' \nAND countrylanguage.IsOfficial = 'T'",
        "final_sql": "SELECT DISTINCT city.Name FROM city JOIN country ON city.CountryCode = country.Code JOIN countrylanguage ON country.Code = countrylanguage.CountryCode WHERE country.Continent = 'Asia' AND countrylanguage.Language = 'Chinese' AND countrylanguage.IsOfficial = 'T'",
        "input_tokens": 1649,
        "output_tokens": 317,
        "time": 9.799778624999817,
        "question": "Which unique cities are in Asian countries where Chinese is the official language ?",
        "db_id": "world_1",
        "gold_query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""
    },
    {
        "baseline_sql": "SELECT DISTINCT city_name FROM cities AS c JOIN countries AS co ON c.country_code = co.country_code JOIN country_languages AS cl ON co.country_code = cl.country_code WHERE co.continent = 'Asia' AND cl.language = 'Chinese' AND cl.is_official = 'T'",
        "final_sql": "SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T'",
        "input_tokens": 1844,
        "output_tokens": 389,
        "time": 12.543537458999708,
        "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.",
        "db_id": "world_1",
        "gold_query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT Name ,  IndepYear ,  SurfaceArea FROM country ORDER BY Population LIMIT 1",
        "final_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;",
        "input_tokens": 1538,
        "output_tokens": 172,
        "time": 6.511505374999615,
        "question": "What are the name, independence year, and surface area of the country with the smallest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1",
        "final_sql": "SELECT Name, IndepYear, SurfaceArea FROM country ORDER BY Population ASC LIMIT 1;",
        "input_tokens": 1559,
        "output_tokens": 171,
        "time": 607.1874211249997,
        "question": "Give the name, year of independence, and surface area of the country that has the lowest population.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;",
        "final_sql": "SELECT Population, Name, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);",
        "input_tokens": 1494,
        "output_tokens": 165,
        "time": 7.312221583999417,
        "question": "What are the population, name and leader of the country with the largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "final_sql": "SELECT Name, Population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1",
        "input_tokens": 1535,
        "output_tokens": 199,
        "time": 7.222018749998824,
        "question": "Give the name, population, and head of state for the country that has the largest area.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS num_languages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) >= 3",
        "final_sql": "SELECT c.Name, COUNT(cl.Language) AS num_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Name HAVING COUNT(cl.Language) >= 3;",
        "input_tokens": 1611,
        "output_tokens": 257,
        "time": 8.851574874999642,
        "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT c.Name, COUNT(cl.Language) AS num_languages\nFROM country c\nJOIN countrylanguage cl ON c.Code = cl.CountryCode\nGROUP BY c.Name\nHAVING COUNT(cl.Language) > 2;",
        "final_sql": "SELECT country.Name, COUNT(countrylanguage.Language) AS num_languages FROM country JOIN countrylanguage ON country.Code = countrylanguage.CountryCode GROUP BY country.Name HAVING COUNT(countrylanguage.Language) > 2;",
        "input_tokens": 1758,
        "output_tokens": 314,
        "time": 11.106739957998798,
        "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?",
        "db_id": "world_1",
        "gold_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"
    },
    {
        "baseline_sql": "SELECT district, COUNT(city) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "final_sql": "SELECT district, COUNT(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
        "input_tokens": 1618,
        "output_tokens": 208,
        "time": 7.216095875000974,
        "question": "Find the number of cities in each district whose population is greater than the average population of cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT district, count(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district",
        "final_sql": "SELECT district, count(*) FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district;",
        "input_tokens": 1574,
        "output_tokens": 206,
        "time": 6.901125750000574,
        "question": "How many cities in each district have a population that is above the average population across all cities?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"
    },
    {
        "baseline_sql": "SELECT government_form_name, SUM(population) AS total_population FROM country WHERE government_form_name IN (SELECT government_form_name FROM country WHERE average_life_expectancy > 72) GROUP BY government_form_name",
        "final_sql": "SELECT c.GovernmentForm, SUM(c.Population) AS total_population FROM country c WHERE c.GovernmentForm IN (   SELECT c2.GovernmentForm   FROM country c2   WHERE c2.LifeExpectancy > 72 ) GROUP BY c.GovernmentForm;",
        "input_tokens": 1713,
        "output_tokens": 255,
        "time": 8.552054624999073,
        "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT government_form, sum(population) FROM country WHERE life_expectancy > 72 GROUP BY government_form",
        "final_sql": "SELECT GovernmentForm, SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;",
        "input_tokens": 1542,
        "output_tokens": 158,
        "time": 8.345542666998881,
        "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"
    },
    {
        "baseline_sql": "SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation\nFROM country\nGROUP BY Continent\nHAVING AverageLifeExpectancy < 72",
        "final_sql": "SELECT Continent, AVG(LifeExpectancy) AS AverageLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AverageLifeExpectancy < 72;",
        "input_tokens": 1719,
        "output_tokens": 270,
        "time": 9.260573790999842,
        "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT continent, sum(population), avg(life_expectancy) FROM country WHERE continent IN (SELECT continent FROM country WHERE avg(life_expectancy) < 72) GROUP BY continent;",
        "final_sql": "SELECT continent, sum(population), avg(life_expectancy) FROM country WHERE continent IN (SELECT continent FROM country WHERE life_expectancy < 72) GROUP BY continent;",
        "input_tokens": 1610,
        "output_tokens": 198,
        "time": 7.520278707999751,
        "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?",
        "db_id": "world_1",
        "gold_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1616,
        "output_tokens": 245,
        "time": 8.340444708001087,
        "question": "What are the names and areas of countries with the top 5 largest area?",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",
        "final_sql": "SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;",
        "input_tokens": 1556,
        "output_tokens": 216,
        "time": 7.221062750000783,
        "question": "Return the names and surface areas of the 5 largest countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;",
        "input_tokens": 1505,
        "output_tokens": 169,
        "time": 6.097949790999337,
        "question": "What are names of countries with the top 3 largest population?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3",
        "input_tokens": 1446,
        "output_tokens": 154,
        "time": 6.087785084000643,
        "question": "Return the names of the 3 most populated countries.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "input_tokens": 1451,
        "output_tokens": 137,
        "time": 7.215190500000972,
        "question": "What are the names of the nations with the 3 lowest populations?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "final_sql": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3",
        "input_tokens": 1444,
        "output_tokens": 139,
        "time": 5.368466166999497,
        "question": "Return the names of the 3 countries with the fewest people.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE Continent = \"Asia\";",
        "final_sql": "SELECT count(*) FROM country WHERE Continent = \"Asia\";",
        "input_tokens": 1503,
        "output_tokens": 193,
        "time": 7.115628416000618,
        "question": "how many countries are in Asia?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
        "final_sql": "SELECT count(*) FROM country WHERE Continent = 'Asia'",
        "input_tokens": 1343,
        "output_tokens": 87,
        "time": 4.191434583000955,
        "question": "Count the number of countries in Asia.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;",
        "input_tokens": 1630,
        "output_tokens": 193,
        "time": 8.547877582999718,
        "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "final_sql": "SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000",
        "input_tokens": 1562,
        "output_tokens": 195,
        "time": 7.369955250000203,
        "question": "Give the names of countries that are in Europe and have a population equal to 80000.",
        "db_id": "world_1",
        "gold_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""
    },
    {
        "baseline_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "final_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;",
        "input_tokens": 1545,
        "output_tokens": 171,
        "time": 6.1929540000001,
        "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000",
        "final_sql": "SELECT sum(Population), avg(SurfaceArea) FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;",
        "input_tokens": 1524,
        "output_tokens": 176,
        "time": 6.297630916000344,
        "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .",
        "db_id": "world_1",
        "gold_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"
    },
    {
        "baseline_sql": "SELECT city FROM city WHERE population BETWEEN 160000 AND 900000",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1474,
        "output_tokens": 138,
        "time": 5.988975874999596,
        "question": "What are the cities whose population is between 160000 and 900000?",
        "db_id": "world_1",
        "gold_query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"
    },
    {
        "baseline_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000",
        "final_sql": "SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;",
        "input_tokens": 1502,
        "output_tokens": 167,
        "time": 607.8208272499996,
        "question": "Return the names of cities that have a population between 160000 and 900000 .",
        "db_id": "world_1",
        "gold_query": "select name from city where population between 160000 and 900000"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language HAVING COUNT(DISTINCT CountryCode) = (   SELECT MAX(country_count)   FROM (     SELECT COUNT(DISTINCT CountryCode) as country_count     FROM countrylanguage     GROUP BY Language   ) )",
        "input_tokens": 1547,
        "output_tokens": 272,
        "time": 11.145614125000066,
        "question": "Which language is spoken by the largest number of countries?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1",
        "final_sql": "SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;",
        "input_tokens": 1554,
        "output_tokens": 227,
        "time": 7.444783582999662,
        "question": "Give the language that is spoken in the most countries.",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cl.Language, c.Name\nFROM countrylanguage cl\nJOIN (\n    SELECT CountryCode, MAX(Percentage) AS MaxPercentage\n    FROM countrylanguage\n    GROUP BY CountryCode\n) t ON cl.CountryCode = t.CountryCode AND cl.Percentage = t.MaxPercentage\nJOIN country c ON cl.CountryCode = c.Code",
        "final_sql": "SELECT c.Name, cl.Language FROM country c JOIN (   SELECT CountryCode, Language, Percentage, ROW_NUMBER() OVER (PARTITION BY CountryCode ORDER BY Percentage DESC) AS rn   FROM countrylanguage ) cl ON c.Code = cl.CountryCode AND cl.rn = 1",
        "input_tokens": 1596,
        "output_tokens": 275,
        "time": 8.847870375000639,
        "question": "What is the language spoken by the largest percentage of people in each country?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT T1.Code, T2.Language\nFROM country AS T1\nJOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode\nWHERE T2.Percentage = (\n    SELECT MAX(Percentage)\n    FROM countrylanguage\n    WHERE CountryCode = T1.Code\n)\nGROUP BY T1.Code;",
        "final_sql": "SELECT T1.Code, T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Percentage = (   SELECT MAX(Percentage)   FROM countrylanguage   WHERE CountryCode = T1.Code ) GROUP BY T1.Code;",
        "input_tokens": 1789,
        "output_tokens": 344,
        "time": 10.580084625000381,
        "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?",
        "db_id": "world_1",
        "gold_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage) FROM countrylanguage WHERE Language = 'Spanish')",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND Percentage = (SELECT max(Percentage)          FROM countrylanguage          WHERE Language = 'Spanish')",
        "input_tokens": 1512,
        "output_tokens": 181,
        "time": 7.965779500000281,
        "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50",
        "final_sql": "SELECT count(*) FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T' AND Percentage > 50;",
        "input_tokens": 1472,
        "output_tokens": 190,
        "time": 7.053349540999989,
        "question": "Count the number of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" ORDER BY Percentage DESC LIMIT 1;",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = \"Spanish\" ORDER BY Percentage DESC LIMIT 1;",
        "input_tokens": 1536,
        "output_tokens": 162,
        "time": 6.506943209000383,
        "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "final_sql": "SELECT CountryCode FROM countrylanguage WHERE Language = 'Spanish' AND IsOfficial = 'T'",
        "input_tokens": 1453,
        "output_tokens": 141,
        "time": 5.5091529580004135,
        "question": "Return the codes of countries for which Spanish is the predominantly spoken language.",
        "db_id": "world_1",
        "gold_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"
    },
    {
        "baseline_sql": "SELECT count(*) FROM conductor;",
        "final_sql": "SELECT count(*) FROM conductor;",
        "input_tokens": 1370,
        "output_tokens": 72,
        "time": 3.7817210409994004,
        "question": "How many conductors are there?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT count(*) FROM conductor",
        "final_sql": "SELECT COUNT(*) FROM conductor;",
        "input_tokens": 1368,
        "output_tokens": 68,
        "time": 3.6957199170010426,
        "question": "Count the number of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(*) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "input_tokens": 1476,
        "output_tokens": 119,
        "time": 6.1292758749987115,
        "question": "List the names of conductors in ascending order of age.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Age ASC",
        "input_tokens": 1482,
        "output_tokens": 109,
        "time": 4.776402542000142,
        "question": "What are the names of conductors, ordered by age?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Age ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality != 'USA'",
        "input_tokens": 1591,
        "output_tokens": 112,
        "time": 5.169562707998921,
        "question": "What are the names of conductors whose nationalities are not \"USA\"?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor WHERE Nationality <> \"USA\"",
        "final_sql": "SELECT Name FROM conductor WHERE Nationality <> \"USA\"",
        "input_tokens": 1564,
        "output_tokens": 120,
        "time": 4.941118875000029,
        "question": "Return the names of conductors that do not have the nationality \"USA\".",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor WHERE Nationality != 'USA'"
    },
    {
        "baseline_sql": "SELECT o.Record_Company FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID ORDER BY o.Year_of_Founded DESC",
        "final_sql": "SELECT o.Record_Company FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID ORDER BY o.Year_of_Founded DESC",
        "input_tokens": 1686,
        "output_tokens": 216,
        "time": 7.831254250000711,
        "question": "What are the record companies of orchestras in descending order of years in which they were founded?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "final_sql": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC",
        "input_tokens": 1579,
        "output_tokens": 142,
        "time": 5.9526802910004335,
        "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
    },
    {
        "baseline_sql": "SELECT avg(Attendance) FROM show",
        "final_sql": "SELECT avg(Attendance) FROM show;",
        "input_tokens": 1351,
        "output_tokens": 42,
        "time": 2.722387666999566,
        "question": "What is the average attendance of shows?",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT AVG(Attendance) FROM show",
        "final_sql": "SELECT AVG(Attendance) FROM show;",
        "input_tokens": 1396,
        "output_tokens": 61,
        "time": 3.7590027499991265,
        "question": "Return the average attendance across all shows.",
        "db_id": "orchestra",
        "gold_query": "SELECT avg(Attendance) FROM SHOW"
    },
    {
        "baseline_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\"",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\"",
        "input_tokens": 1526,
        "output_tokens": 122,
        "time": 5.7841269170003216,
        "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\"",
        "final_sql": "SELECT MAX(Share), MIN(Share) FROM performance WHERE Type <> \"Live final\"",
        "input_tokens": 1519,
        "output_tokens": 124,
        "time": 5.248958500000299,
        "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".",
        "db_id": "orchestra",
        "gold_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "input_tokens": 1367,
        "output_tokens": 52,
        "time": 3.55161945799955,
        "question": "How many different nationalities do conductors have?",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT Nationality) FROM conductor",
        "final_sql": "SELECT count(DISTINCT Nationality) FROM conductor;",
        "input_tokens": 1374,
        "output_tokens": 52,
        "time": 3.123599374999685,
        "question": "Count the number of different nationalities of conductors.",
        "db_id": "orchestra",
        "gold_query": "SELECT count(DISTINCT Nationality) FROM conductor"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "input_tokens": 1489,
        "output_tokens": 124,
        "time": 5.6777812499985885,
        "question": "List names of conductors in descending order of years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC",
        "input_tokens": 1586,
        "output_tokens": 162,
        "time": 5.894519333000062,
        "question": "What are the names of conductors, sorted descending by the number of years they have worked?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "input_tokens": 1587,
        "output_tokens": 199,
        "time": 7.214844583999366,
        "question": "List the name of the conductor with the most years of work.",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "final_sql": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1",
        "input_tokens": 1770,
        "output_tokens": 252,
        "time": 8.449985167000705,
        "question": "What is the name of the conductor who has worked the greatest number of years?",
        "db_id": "orchestra",
        "gold_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT C.Name, O.Orchestra\nFROM conductor AS C\nJOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID",
        "final_sql": "SELECT C.Name, O.Orchestra FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID",
        "input_tokens": 1631,
        "output_tokens": 168,
        "time": 6.2947229580004205,
        "question": "Show the names of conductors and the orchestras they have conducted.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT C.Name, O.Orchestra\nFROM conductor C\nJOIN orchestra O ON C.Conductor_ID = O.Conductor_ID",
        "final_sql": "SELECT C.Name, O.Orchestra FROM conductor C JOIN orchestra O ON C.Conductor_ID = O.Conductor_ID",
        "input_tokens": 1627,
        "output_tokens": 130,
        "time": 5.372734208000111,
        "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "input_tokens": 1871,
        "output_tokens": 298,
        "time": 9.978940875000262,
        "question": "Show the names of conductors that have conducted more than one orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Name HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID HAVING COUNT(DISTINCT T2.Orchestra_ID) > 1;",
        "input_tokens": 1738,
        "output_tokens": 264,
        "time": 8.342009916999814,
        "question": "What are the names of conductors who have conducted at more than one orchestra?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(T2.Orchestra_ID) DESC LIMIT 1",
        "input_tokens": 1807,
        "output_tokens": 294,
        "time": 9.378764208000575,
        "question": "Show the name of the conductor that has conducted the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1824,
        "output_tokens": 283,
        "time": 9.096911541999361,
        "question": "What is the name of the conductor who has conducted the most orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID WHERE O.Year_of_Founded > 2008",
        "final_sql": "SELECT C.Name FROM conductor AS C JOIN orchestra AS O ON C.Conductor_ID = O.Conductor_ID WHERE O.Year_of_Founded > 2008",
        "input_tokens": 1811,
        "output_tokens": 265,
        "time": 9.216008041999885,
        "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008",
        "final_sql": "SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;",
        "input_tokens": 1705,
        "output_tokens": 219,
        "time": 8.032734708000135,
        "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?",
        "db_id": "orchestra",
        "gold_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"
    },
    {
        "baseline_sql": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "final_sql": "SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "input_tokens": 1532,
        "output_tokens": 133,
        "time": 5.845138082999256,
        "question": "Please show the different record companies and the corresponding number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT rc.Record_Company, COUNT(o.Orchestra_ID) \nFROM orchestra o \nJOIN conductor c ON o.Conductor_ID = c.Conductor_ID \nJOIN record_company rc ON o.Record_Company = rc.Record_Company \nGROUP BY rc.Record_Company;",
        "final_sql": "SELECT c.Record_Company, COUNT(o.Orchestra_ID) FROM orchestra o JOIN conductor c ON o.Conductor_ID = c.Conductor_ID GROUP BY c.Record_Company;",
        "input_tokens": 1703,
        "output_tokens": 248,
        "time": 8.898231791999933,
        "question": "How many orchestras does each record company manage?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC",
        "final_sql": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;",
        "input_tokens": 1531,
        "output_tokens": 157,
        "time": 6.403718749999825,
        "question": "Please show the record formats of orchestras in ascending order of count.",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC",
        "final_sql": "SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;",
        "input_tokens": 1605,
        "output_tokens": 177,
        "time": 7.007918040999357,
        "question": "What are the major record formats of orchestras, sorted by their frequency?",
        "db_id": "orchestra",
        "gold_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1584,
        "output_tokens": 181,
        "time": 6.701292792000459,
        "question": "List the record company shared by the most number of orchestras.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1639,
        "output_tokens": 225,
        "time": 7.759702499999548,
        "question": "What is the record company used by the greatest number of orchestras?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1516,
        "output_tokens": 133,
        "time": 607.0811849590009,
        "question": "List the names of orchestras that have no performance.",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "final_sql": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)",
        "input_tokens": 1505,
        "output_tokens": 114,
        "time": 6.795793166000294,
        "question": "What are the orchestras that do not have any performances?",
        "db_id": "orchestra",
        "gold_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"
    },
    {
        "baseline_sql": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded < 2003\nINTERSECT\nSELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2003",
        "final_sql": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded < 2003 INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2003;",
        "input_tokens": 2116,
        "output_tokens": 489,
        "time": 15.521922207999523,
        "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT T1.record_company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded < 2003\nINTERSECT\nSELECT T1.record_company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id = T2.conductor_id WHERE T1.year_of_founded > 2003",
        "final_sql": "SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded < 2003 INTERSECT SELECT T1.Record_Company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE T1.Year_of_Founded > 2003;",
        "input_tokens": 2002,
        "output_tokens": 417,
        "time": 13.25537224999971,
        "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?",
        "db_id": "orchestra",
        "gold_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"
    },
    {
        "baseline_sql": "SELECT count(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "final_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = \"CD\" OR Major_Record_Format = \"DVD\"",
        "input_tokens": 1545,
        "output_tokens": 117,
        "time": 5.680443125000238,
        "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "final_sql": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD')",
        "input_tokens": 1509,
        "output_tokens": 105,
        "time": 5.992170875000738,
        "question": "Count the number of orchestras that have CD or DVD as their record format.",
        "db_id": "orchestra",
        "gold_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""
    },
    {
        "baseline_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (   SELECT Orchestra_ID   FROM performance   GROUP BY Orchestra_ID   HAVING COUNT(*) > 1 )",
        "input_tokens": 1780,
        "output_tokens": 260,
        "time": 10.28103204099898,
        "question": "Show the years in which orchestras that have given more than one performance are founded.",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "final_sql": "SELECT Year_of_Founded FROM orchestra WHERE Orchestra_ID IN (SELECT Orchestra_ID FROM performance GROUP BY Orchestra_ID HAVING COUNT(*) > 1)",
        "input_tokens": 1664,
        "output_tokens": 224,
        "time": 7.932959541998571,
        "question": "What are years of founding for orchestras that have had more than a single performance?",
        "db_id": "orchestra",
        "gold_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler",
        "final_sql": "SELECT count(*) FROM Highschooler;",
        "input_tokens": 1062,
        "output_tokens": 74,
        "time": 4.1434796249996,
        "question": "How many high schoolers are there?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler",
        "final_sql": "SELECT count(*) FROM Highschooler;",
        "input_tokens": 1069,
        "output_tokens": 78,
        "time": 4.138840084000549,
        "question": "Count the number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade FROM Highschooler",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1046,
        "output_tokens": 44,
        "time": 3.119703999998819,
        "question": "Show the names and grades of each high schooler.",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT name, grade FROM Highschooler",
        "final_sql": "SELECT name, grade FROM Highschooler;",
        "input_tokens": 1127,
        "output_tokens": 44,
        "time": 5.882033125000817,
        "question": "What are the names and grades for each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT name ,  grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler",
        "final_sql": "SELECT grade FROM Highschooler;",
        "input_tokens": 1130,
        "output_tokens": 78,
        "time": 4.036481708999418,
        "question": "Show all the grades of the high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT ID, grade FROM Highschooler",
        "final_sql": "SELECT grade FROM Highschooler",
        "input_tokens": 1118,
        "output_tokens": 82,
        "time": 4.961993999999322,
        "question": "What is the grade of each high schooler?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = 'Kyle'",
        "input_tokens": 1209,
        "output_tokens": 125,
        "time": 5.579250082999351,
        "question": "What grade is Kyle in?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";",
        "final_sql": "SELECT grade FROM Highschooler WHERE name = \"Kyle\";",
        "input_tokens": 1236,
        "output_tokens": 130,
        "time": 5.270230416999766,
        "question": "Return the grade for the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "input_tokens": 1195,
        "output_tokens": 110,
        "time": 4.962467875000584,
        "question": "Show the names of all high schoolers in grade 10.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "final_sql": "SELECT name FROM Highschooler WHERE grade = 10",
        "input_tokens": 1221,
        "output_tokens": 104,
        "time": 5.067727040999671,
        "question": "What are the names of all high schoolers in grade 10?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler WHERE grade  =  10"
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = 'Kyle'",
        "input_tokens": 1164,
        "output_tokens": 110,
        "time": 5.577359250000882,
        "question": "Show the ID of the high schooler named Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "final_sql": "SELECT ID FROM Highschooler WHERE name = \"Kyle\";",
        "input_tokens": 1176,
        "output_tokens": 118,
        "time": 5.574740750000274,
        "question": "What is Kyle's id?",
        "db_id": "network_1",
        "gold_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "final_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10",
        "input_tokens": 1235,
        "output_tokens": 124,
        "time": 5.786058084000615,
        "question": "How many high schoolers are there in grade 9 or 10?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10",
        "final_sql": "SELECT count(*) FROM Highschooler WHERE grade = 9 OR grade = 10;",
        "input_tokens": 1253,
        "output_tokens": 161,
        "time": 6.398057874999722,
        "question": "Count the number of high schoolers in grades 9 or 10.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"
    },
    {
        "baseline_sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",
        "final_sql": "SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade;",
        "input_tokens": 1215,
        "output_tokens": 137,
        "time": 5.289434000000256,
        "question": "Show the number of high schoolers for each grade.",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
        "final_sql": "SELECT grade, count(*) FROM Highschooler GROUP BY grade",
        "input_tokens": 1227,
        "output_tokens": 121,
        "time": 4.94298529200023,
        "question": "How many high schoolers are in each grade?",
        "db_id": "network_1",
        "gold_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1245,
        "output_tokens": 163,
        "time": 5.887624375000087,
        "question": "Which grade has the most high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1209,
        "output_tokens": 136,
        "time": 5.376689167000222,
        "question": "Return the grade that has the greatest number of high schoolers.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "final_sql": "SELECT * FROM Highschooler WHERE grade IN (SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4)",
        "input_tokens": 1248,
        "output_tokens": 178,
        "time": 7.21372083300048,
        "question": "Show me all grades that have at least 4 students.",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*) >= 4",
        "final_sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4",
        "input_tokens": 1240,
        "output_tokens": 179,
        "time": 7.316860167000414,
        "question": "Which grades have 4 or more high schoolers?",
        "db_id": "network_1",
        "gold_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
    },
    {
        "baseline_sql": "SELECT F.student_id, F.friend_id FROM Friend AS F INNER JOIN Highschooler AS H ON F.student_id = H.ID",
        "final_sql": "SELECT F.student_id, F.friend_id FROM Friend AS F INNER JOIN Highschooler AS H ON F.student_id = H.ID",
        "input_tokens": 1267,
        "output_tokens": 176,
        "time": 6.503874084000927,
        "question": "Show the student IDs and numbers of friends corresponding to each.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, count(friend_id) FROM Friend GROUP BY student_id",
        "final_sql": "SELECT student_id, count(friend_id) FROM Friend GROUP BY student_id;",
        "input_tokens": 1146,
        "output_tokens": 113,
        "time": 5.575534000001426,
        "question": "How many friends does each student have?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends\nFROM Highschooler H\nJOIN Friend F ON H.ID = F.student_id\nGROUP BY H.name",
        "final_sql": "SELECT H.name, COUNT(F.friend_id) AS num_friends FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;",
        "input_tokens": 1364,
        "output_tokens": 223,
        "time": 7.729440542001612,
        "question": "Show the names of high school students and their corresponding number of friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name, COUNT(F.friend_id) \nFROM Highschooler H \nJOIN Friend F ON H.ID = F.student_id \nGROUP BY H.name",
        "final_sql": "SELECT H.name, COUNT(F.friend_id) FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name;",
        "input_tokens": 1332,
        "output_tokens": 191,
        "time": 6.907320375001291,
        "question": "What are the names of the high schoolers and how many friends does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id GROUP BY H.ID ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1488,
        "output_tokens": 291,
        "time": 9.467902000000322,
        "question": "What is the name of the high schooler who has the greatest number of friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1",
        "final_sql": "SELECT h.name FROM Highschooler h JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1",
        "input_tokens": 1392,
        "output_tokens": 260,
        "time": 8.760421791999761,
        "question": "Return the name of the high school student with the most friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
        "final_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID HAVING COUNT(*) >= 3",
        "input_tokens": 1457,
        "output_tokens": 266,
        "time": 9.56291633299952,
        "question": "Show the names of high schoolers who have at least 3 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING COUNT(*) >= 3",
        "final_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id GROUP BY T1.name HAVING COUNT(*) >= 3",
        "input_tokens": 1515,
        "output_tokens": 264,
        "time": 8.4408195420001,
        "question": "What are the names of high schoolers who have 3 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"
    },
    {
        "baseline_sql": "SELECT H2.name\nFROM Highschooler AS H1\nJOIN Friend AS F ON H1.ID = F.student_id\nJOIN Highschooler AS H2 ON F.friend_id = H2.ID\nWHERE H1.name = 'Kyle'",
        "final_sql": "SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.student_id JOIN Highschooler AS H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'",
        "input_tokens": 1434,
        "output_tokens": 296,
        "time": 9.82519825000054,
        "question": "Show the names of all of the high schooler Kyle's friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT H2.name\nFROM Highschooler AS H1\nJOIN Friend AS F ON H1.ID = F.student_id\nJOIN Highschooler AS H2 ON F.friend_id = H2.ID\nWHERE H1.name = 'Kyle'",
        "final_sql": "SELECT H2.name FROM Highschooler AS H1 JOIN Friend AS F ON H1.ID = F.student_id JOIN Highschooler AS H2 ON F.friend_id = H2.ID WHERE H1.name = 'Kyle'",
        "input_tokens": 1441,
        "output_tokens": 307,
        "time": 9.776652957998522,
        "question": "Return the names of friends of the high school student Kyle.",
        "db_id": "network_1",
        "gold_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'",
        "final_sql": "SELECT COUNT(T2.friend_id) FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'",
        "input_tokens": 1354,
        "output_tokens": 209,
        "time": 7.5247871249994205,
        "question": "How many friends does the high school student Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "final_sql": "SELECT count(*) FROM Friend WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1157,
        "output_tokens": 134,
        "time": 5.067577290999907,
        "question": "Count the number of friends Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1127,
        "output_tokens": 83,
        "time": 3.939372832999652,
        "question": "Show ids of all students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1286,
        "output_tokens": 156,
        "time": 6.087896457998795,
        "question": "What are the ids of high school students who do not have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend AS F)",
        "final_sql": "SELECT H.name FROM Highschooler AS H WHERE H.ID NOT IN (SELECT F.student_id FROM Friend AS F)",
        "input_tokens": 1314,
        "output_tokens": 170,
        "time": 6.298715375000029,
        "question": "Show names of all high school students who do not have any friends.",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1190,
        "output_tokens": 87,
        "time": 4.448988083000586,
        "question": "What are the names of students who have no friends?",
        "db_id": "network_1",
        "gold_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT DISTINCT H1.ID FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.ID = F1.student_id JOIN Likes AS L1 ON H1.ID = L1.student_id",
        "final_sql": "SELECT DISTINCT H1.ID FROM Highschooler AS H1 JOIN Friend AS F1 ON H1.ID = F1.student_id JOIN Likes AS L1 ON H1.ID = L1.student_id;",
        "input_tokens": 1320,
        "output_tokens": 199,
        "time": 6.9063589590004995,
        "question": "Show the ids of high schoolers who have friends and are also liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT student_id FROM Friend INTERSECT SELECT student_id FROM Likes",
        "final_sql": "SELECT student_id FROM Friend WHERE student_id IN (SELECT student_id FROM Likes)",
        "input_tokens": 1222,
        "output_tokens": 108,
        "time": 4.865071749998606,
        "question": "What are the ids of students who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"
    },
    {
        "baseline_sql": "SELECT DISTINCT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id JOIN Likes AS L ON H.ID = L.student_id",
        "final_sql": "SELECT DISTINCT H.name FROM Highschooler AS H JOIN Friend AS F ON H.ID = F.student_id JOIN Likes AS L ON H.ID = L.student_id;",
        "input_tokens": 1350,
        "output_tokens": 183,
        "time": 6.805894332999742,
        "question": "Show name of all students who have some friends and also are liked by someone else.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID  =  T2.student_id JOIN Likes AS T3 ON T1.ID  =  T3.student_id",
        "final_sql": "SELECT T1.name FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id JOIN Likes AS T3 ON T1.ID = T3.student_id;",
        "input_tokens": 1482,
        "output_tokens": 239,
        "time": 8.458960542000568,
        "question": "What are the names of high schoolers who both have friends and are liked?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"
    },
    {
        "baseline_sql": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
        "final_sql": "SELECT student_id, count(*) FROM Likes GROUP BY student_id",
        "input_tokens": 1118,
        "output_tokens": 113,
        "time": 5.880803000000014,
        "question": "Count the number of likes for each student id.",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
        "final_sql": "SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",
        "input_tokens": 1260,
        "output_tokens": 157,
        "time": 5.988480832998903,
        "question": "How many likes correspond to each student id?",
        "db_id": "network_1",
        "gold_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"
    },
    {
        "baseline_sql": "SELECT T1.name, COUNT(T2.student_id) AS num_likes FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name",
        "final_sql": "SELECT T1.name, COUNT(T2.liked_id) AS num_likes FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.name;",
        "input_tokens": 1532,
        "output_tokens": 321,
        "time": 10.292498124999838,
        "question": "Show the names of high schoolers who have likes, and numbers of likes for each.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT T1.name, COUNT(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T1.ID",
        "final_sql": "SELECT Highschooler.name, COUNT(Likes.student_id) FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.ID;",
        "input_tokens": 1468,
        "output_tokens": 222,
        "time": 7.6247683340006915,
        "question": "What are the names of high schoolers who have likes, and how many likes does each have?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.ID ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.ID ORDER BY count(*) DESC LIMIT 1",
        "input_tokens": 1477,
        "output_tokens": 282,
        "time": 9.574499832999209,
        "question": "What is the name of the high schooler who has the greatest number of likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT name FROM Highschooler WHERE ID = (SELECT student_id FROM Likes GROUP BY student_id ORDER BY count(*) DESC LIMIT 1)",
        "final_sql": "SELECT name FROM Highschooler WHERE ID = (   SELECT student_id   FROM Likes   GROUP BY student_id   ORDER BY count(*) DESC   LIMIT 1 )",
        "input_tokens": 1263,
        "output_tokens": 208,
        "time": 7.113150875000429,
        "question": "Give the name of the student with the most likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T2.name FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id GROUP BY T2.student_id HAVING count(*) >= 2",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN Likes L ON H.ID = L.student_id GROUP BY H.ID HAVING COUNT(*) >= 2;",
        "input_tokens": 1401,
        "output_tokens": 225,
        "time": 8.02979029099879,
        "question": "Show the names of students who have at least 2 likes.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID  =  L.student_id GROUP BY L.student_id HAVING count(*)  >=  2",
        "final_sql": "SELECT H.name FROM Highschooler AS H JOIN Likes AS L ON H.ID = L.student_id GROUP BY H.name HAVING count(*) >= 2",
        "input_tokens": 1386,
        "output_tokens": 248,
        "time": 8.406674624999141,
        "question": "What are the names of students who have 2 or more likes?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.ID HAVING H.grade > 5 AND COUNT(F.friend_id) >= 2",
        "final_sql": "SELECT H.name FROM Highschooler H JOIN Friend F ON H.ID = F.student_id GROUP BY H.name HAVING H.grade > 5 AND COUNT(F.friend_id) >= 2",
        "input_tokens": 1500,
        "output_tokens": 292,
        "time": 10.426757249999355,
        "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT h.name FROM Highschooler AS h JOIN Friend AS f ON h.ID = f.student_id GROUP BY h.ID HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2",
        "final_sql": "SELECT h.name FROM Highschooler AS h JOIN Friend AS f ON h.ID = f.student_id GROUP BY h.name HAVING h.grade > 5 AND COUNT(f.friend_id) >= 2",
        "input_tokens": 1642,
        "output_tokens": 350,
        "time": 10.635483250000107,
        "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?",
        "db_id": "network_1",
        "gold_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Highschooler AS T1 JOIN Likes AS T2 ON T1.ID = T2.student_id WHERE T1.name = 'Kyle'",
        "final_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1323,
        "output_tokens": 183,
        "time": 6.458274208000148,
        "question": "How many likes does Kyle have?",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "final_sql": "SELECT count(*) FROM Likes WHERE student_id = (SELECT ID FROM Highschooler WHERE name = 'Kyle')",
        "input_tokens": 1281,
        "output_tokens": 170,
        "time": 6.4020270419987355,
        "question": "Return the number of likes that the high schooler named Kyle has.",
        "db_id": "network_1",
        "gold_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""
    },
    {
        "baseline_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT AVG(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1255,
        "output_tokens": 146,
        "time": 5.890890790999038,
        "question": "Find the average grade of all students who have some friends.",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT avg(grade) FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend)",
        "input_tokens": 1303,
        "output_tokens": 178,
        "time": 6.800513041998784,
        "question": "What is the average grade of students who have friends?",
        "db_id": "network_1",
        "gold_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1294,
        "output_tokens": 185,
        "time": 6.701119917001051,
        "question": "Find the minimum grade of students who have no friends.",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "final_sql": "SELECT MIN(grade) FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend)",
        "input_tokens": 1333,
        "output_tokens": 182,
        "time": 6.805670708999969,
        "question": "What is the lowest grade of students who do not have any friends?",
        "db_id": "network_1",
        "gold_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"
    },
    {
        "baseline_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "final_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "input_tokens": 2389,
        "output_tokens": 144,
        "time": 5.99158641699978,
        "question": "Which states have both owners and professionals living there?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals",
        "final_sql": "SELECT state FROM Owners WHERE state IN (SELECT state FROM Professionals)",
        "input_tokens": 2548,
        "output_tokens": 241,
        "time": 8.03007129100115,
        "question": "Find the states where both owners and professionals live.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"
    },
    {
        "baseline_sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2383,
        "output_tokens": 144,
        "time": 5.498069999999643,
        "question": "What is the average age of the dogs who have gone through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2484,
        "output_tokens": 118,
        "time": 5.789127084000938,
        "question": "Find the average age of the dogs who went through treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id             FROM Treatments             GROUP BY professional_id             HAVING COUNT(*) > 2)",
        "input_tokens": 2846,
        "output_tokens": 239,
        "time": 8.437364792000153,
        "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(*) > 2)",
        "final_sql": "SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' OR professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(*) > 2 )",
        "input_tokens": 2800,
        "output_tokens": 313,
        "time": 9.740276332999201,
        "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"
    },
    {
        "baseline_sql": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments WHERE cost_of_treatment > 1000)",
        "final_sql": "SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING SUM(t.cost_of_treatment) <= 1000;",
        "input_tokens": 2779,
        "output_tokens": 346,
        "time": 10.62799641699894,
        "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT d.name FROM Dogs AS d WHERE d.dog_id NOT IN (SELECT t.dog_id FROM Treatments AS t WHERE t.cost_of_treatment > 1000)",
        "final_sql": "SELECT d.name FROM Dogs AS d WHERE d.dog_id NOT IN (   SELECT t.dog_id   FROM Treatments AS t   WHERE t.cost_of_treatment > 1000 )",
        "input_tokens": 2650,
        "output_tokens": 277,
        "time": 9.470748749999984,
        "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?",
        "db_id": "dog_kennels",
        "gold_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"
    },
    {
        "baseline_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs",
        "final_sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;",
        "input_tokens": 2555,
        "output_tokens": 212,
        "time": 7.520225666999977,
        "question": "Which first names are used for professionals or owners but are not used as dog names?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT first_name FROM (\n    SELECT first_name FROM Professionals\n    UNION\n    SELECT first_name FROM Owners\n) AS T1\nWHERE first_name NOT IN (\n    SELECT name FROM Dogs\n)",
        "final_sql": "SELECT DISTINCT first_name FROM (   SELECT first_name FROM Professionals   UNION   SELECT first_name FROM Owners ) AS T1 WHERE first_name NOT IN (   SELECT name FROM Dogs )",
        "input_tokens": 2660,
        "output_tokens": 222,
        "time": 7.420989665999514,
        "question": "Find the first names that are used for professionals or owners but are not used as dog names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2545,
        "output_tokens": 137,
        "time": 5.218610207999518,
        "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments WHERE treatment_type_code = 'dog')",
        "input_tokens": 2457,
        "output_tokens": 145,
        "time": 5.592338165999536,
        "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id HAVING COUNT(*) = (SELECT MAX(owner_count) FROM (SELECT COUNT(*) AS owner_count FROM Dogs GROUP BY owner_id)))",
        "final_sql": "SELECT owner_id, first_name, last_name FROM Owners WHERE owner_id IN (   SELECT owner_id   FROM Dogs   GROUP BY owner_id   HAVING COUNT(*) = (     SELECT MAX(owner_count)     FROM (       SELECT COUNT(*) AS owner_count       FROM Dogs       GROUP BY owner_id     )   ) )",
        "input_tokens": 2734,
        "output_tokens": 295,
        "time": 9.451234875001319,
        "question": "Which owner owns the most dogs? List the owner id, first name and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name\nFROM Owners AS T1\nJOIN Dogs AS T2 ON T1.owner_id = T2.owner_id\nGROUP BY T1.owner_id\nORDER BY COUNT(T2.dog_id) DESC\nLIMIT 1",
        "final_sql": "SELECT T1.owner_id, T1.first_name, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(T2.dog_id) DESC LIMIT 1",
        "input_tokens": 2766,
        "output_tokens": 327,
        "time": 10.596385540999108,
        "question": "Return the owner id, first name and last name of the owner who has the most dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2",
        "final_sql": "SELECT P.professional_id, P.role_code, P.first_name FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id GROUP BY P.professional_id HAVING COUNT(T.treatment_id) >= 2",
        "input_tokens": 2707,
        "output_tokens": 265,
        "time": 9.465389916998902,
        "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T1.professional_id, T2.role, T2.first_name \nFROM Treatments AS T1 \nJOIN Professionals AS T2 ON T1.professional_id = T2.professional_id \nGROUP BY T1.professional_id, T2.role, T2.first_name \nHAVING COUNT(T1.treatment_id) >= 2",
        "final_sql": "SELECT T1.professional_id, T2.role_code, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id, T2.role_code, T2.first_name HAVING COUNT(T1.treatment_id) >= 2;",
        "input_tokens": 2715,
        "output_tokens": 348,
        "time": 11.824450083000556,
        "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT breed_name FROM Breeds\nJOIN Dogs ON Breeds.breed_code = Dogs.breed_code\nGROUP BY breed_name\nORDER BY COUNT(*) DESC\nLIMIT 1",
        "final_sql": "SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1;",
        "input_tokens": 2584,
        "output_tokens": 283,
        "time": 9.083252249998623,
        "question": "What is the name of the breed with the most dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT breed_name FROM Breeds JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 2680,
        "output_tokens": 263,
        "time": 8.6205003749983,
        "question": "Which breed do the most dogs have? Give me the breed name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id ,  T2.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1",
        "final_sql": "SELECT O.owner_id, O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id, O.last_name ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 3034,
        "output_tokens": 486,
        "time": 14.079555874999642,
        "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t1.owner_id, t1.last_name FROM Owners AS t1 JOIN Dogs AS t2 ON t1.owner_id = t2.owner_id JOIN Treatments AS t3 ON t2.dog_id = t3.dog_id GROUP BY t1.owner_id, t1.last_name ORDER BY sum(t3.cost_of_treatment) DESC LIMIT 1",
        "final_sql": "SELECT o.owner_id, o.last_name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id JOIN Treatments AS t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.last_name ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1",
        "input_tokens": 2926,
        "output_tokens": 439,
        "time": 12.643909375001385,
        "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT t2.treatment_type_description FROM Treatments AS t1 JOIN Treatment_Types AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t2.treatment_type_description ORDER BY sum(t1.cost_of_treatment) ASC LIMIT 1",
        "final_sql": "SELECT t2.treatment_type_description FROM Treatments AS t1 JOIN Treatment_Types AS t2 ON t1.treatment_type_code = t2.treatment_type_code GROUP BY t2.treatment_type_description ORDER BY sum(t1.cost_of_treatment) ASC LIMIT 1",
        "input_tokens": 2825,
        "output_tokens": 429,
        "time": 12.340535041999829,
        "question": "What is the description of the treatment type that costs the least money in total?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1",
        "final_sql": "SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_description ORDER BY SUM(T2.cost_of_treatment) ASC LIMIT 1;",
        "input_tokens": 2683,
        "output_tokens": 314,
        "time": 10.291159000000334,
        "question": "Give me the description of the treatment type whose total cost is the lowest.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Transactions AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.amount) DESC LIMIT 1",
        "final_sql": "SELECT O.owner_id, O.zip_code FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY O.owner_id ORDER BY SUM(T.cost_of_treatment) DESC LIMIT 1",
        "input_tokens": 2849,
        "output_tokens": 405,
        "time": 11.62250262499947,
        "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT owner_id, zip_code FROM Owners WHERE owner_id IN (SELECT owner_id FROM Dogs GROUP BY owner_id ORDER BY SUM(cost_of_treatment) DESC LIMIT 1)",
        "final_sql": "SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;",
        "input_tokens": 2774,
        "output_tokens": 343,
        "time": 10.390347167000073,
        "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments GROUP BY professional_id HAVING COUNT(DISTINCT treatment_type_code) >= 2)",
        "final_sql": "SELECT professional_id, cell_number FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   GROUP BY professional_id   HAVING COUNT(DISTINCT treatment_type_code) >= 2 )",
        "input_tokens": 2589,
        "output_tokens": 222,
        "time": 7.827708042001177,
        "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2",
        "final_sql": "SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(DISTINCT T2.treatment_type_code) >= 2;",
        "input_tokens": 2738,
        "output_tokens": 342,
        "time": 10.803089875000296,
        "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
    },
    {
        "baseline_sql": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (SELECT professional_id FROM Treatments WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments))",
        "final_sql": "SELECT first_name, last_name FROM Professionals WHERE professional_id IN (   SELECT professional_id   FROM Treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM Treatments   ) )",
        "input_tokens": 2599,
        "output_tokens": 276,
        "time": 8.954637333999926,
        "question": "What are the first name and last name of the professionals who have done treatment with cost below average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "final_sql": "SELECT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id WHERE T2.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)",
        "input_tokens": 2768,
        "output_tokens": 302,
        "time": 10.282081957999253,
        "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "final_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;",
        "input_tokens": 2402,
        "output_tokens": 137,
        "time": 5.26977375000024,
        "question": "List the date of each treatment, together with the first name of the professional who operated it.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT date_of_treatment, first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "final_sql": "SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id",
        "input_tokens": 2431,
        "output_tokens": 139,
        "time": 5.868696084000476,
        "question": "What are the date and the operating professional's first name of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"
    },
    {
        "baseline_sql": "SELECT T1.cost_of_treatment, T2.treatment_type_description \nFROM Treatments AS T1 \nJOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "final_sql": "SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code = T2.treatment_type_code",
        "input_tokens": 2457,
        "output_tokens": 184,
        "time": 6.701337250000506,
        "question": "List the cost of each treatment and the corresponding treatment type description.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",
        "final_sql": "SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code",
        "input_tokens": 2517,
        "output_tokens": 181,
        "time": 6.603862291000041,
        "question": "What are the cost and treatment type description of each treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT O.first_name, O.last_name, S.size_description\nFROM Owners AS O\nJOIN Dogs AS D ON O.owner_id = D.owner_id\nJOIN Sizes AS S ON D.size_code = S.size_code",
        "final_sql": "SELECT O.first_name, O.last_name, S.size_description FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id JOIN Sizes AS S ON D.size_code = S.size_code;",
        "input_tokens": 2536,
        "output_tokens": 210,
        "time": 7.726691124998979,
        "question": "List each owner's first name, last name, and the size of his for her dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT O.first_name, O.last_name, S.size_description\nFROM Owners O\nJOIN Dogs D ON O.owner_id = D.owner_id\nJOIN Sizes S ON D.size_code = S.size_code",
        "final_sql": "SELECT O.first_name, O.last_name, S.size_description FROM Owners O JOIN Dogs D ON O.owner_id = D.owner_id JOIN Sizes S ON D.size_code = S.size_code;",
        "input_tokens": 2555,
        "output_tokens": 212,
        "time": 7.623196790998918,
        "question": "What are each owner's first name, last name, and the size of their dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "final_sql": "SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id",
        "input_tokens": 2417,
        "output_tokens": 146,
        "time": 5.676338834000489,
        "question": "List pairs of the owner's first name and the dogs's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id;",
        "final_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id;",
        "input_tokens": 2425,
        "output_tokens": 154,
        "time": 5.783167999999932,
        "question": "What are each owner's first name and their dogs's name?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment\nFROM Dogs AS D\nJOIN Breeds AS B ON D.breed_code = B.breed_code\nJOIN Treatments AS T ON D.dog_id = T.dog_id\nWHERE B.breed_name = (\n    SELECT breed_name\n    FROM Breeds\n    ORDER BY breed_code DESC\n    LIMIT 1\n)",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE B.breed_name = (   SELECT breed_name   FROM Breeds   ORDER BY breed_code ASC   LIMIT 1 )",
        "input_tokens": 2859,
        "output_tokens": 454,
        "time": 13.868856625000262,
        "question": "List the names of the dogs of the rarest breed and the treatment dates of them.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id GROUP BY D.name HAVING COUNT(DISTINCT B.breed_code) = (SELECT COUNT(DISTINCT breed_code) FROM Breeds) ORDER BY T.date_of_treatment ASC",
        "final_sql": "SELECT D.name, T.date_of_treatment FROM Dogs AS D JOIN Breeds AS B ON D.breed_code = B.breed_code JOIN Treatments AS T ON D.dog_id = T.dog_id WHERE B.breed_code IN (   SELECT breed_code   FROM Breeds   GROUP BY breed_code   HAVING COUNT(*) = (     SELECT MIN(count)     FROM (       SELECT COUNT(*) as count       FROM Dogs       GROUP BY breed_code     )   ) ) ORDER BY T.date_of_treatment ASC;",
        "input_tokens": 2840,
        "output_tokens": 405,
        "time": 12.028690208999251,
        "question": "Which dogs are of the rarest breed? Show their names and treatment dates.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';",
        "final_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia';",
        "input_tokens": 2584,
        "output_tokens": 170,
        "time": 7.025188499999786,
        "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT O.first_name, D.name\nFROM Owners AS O\nJOIN Dogs AS D ON O.owner_id = D.owner_id\nJOIN Addresses AS A ON O.address_id = A.address_id\nWHERE A.state = 'Virginia'",
        "final_sql": "SELECT O.first_name, D.name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE O.state = 'Virginia'",
        "input_tokens": 2740,
        "output_tokens": 305,
        "time": 9.966475917000935,
        "question": "Find the first names of owners living in Virginia and the names of dogs they own.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"
    },
    {
        "baseline_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "final_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "input_tokens": 2506,
        "output_tokens": 158,
        "time": 6.0851516670009005,
        "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "final_sql": "SELECT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id",
        "input_tokens": 2552,
        "output_tokens": 158,
        "time": 5.8859018749990355,
        "question": "Find the arriving date and the departing date of the dogs that received a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"
    },
    {
        "baseline_sql": "SELECT O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id WHERE D.age = (SELECT MIN(age) FROM Dogs)",
        "final_sql": "SELECT O.last_name FROM Owners AS O JOIN Dogs AS D ON O.owner_id = D.owner_id ORDER BY D.date_of_birth ASC LIMIT 1;",
        "input_tokens": 2626,
        "output_tokens": 244,
        "time": 8.136520042000484,
        "question": "List the last name of the owner owning the youngest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT last_name FROM Owners WHERE owner_id = (SELECT owner_id FROM Dogs ORDER BY date_of_birth ASC LIMIT 1)",
        "final_sql": "SELECT last_name FROM Owners WHERE owner_id = (   SELECT owner_id   FROM Dogs   ORDER BY date_of_birth DESC   LIMIT 1 )",
        "input_tokens": 2493,
        "output_tokens": 189,
        "time": 6.9139047080007,
        "question": "Who owns the youngest dog? Give me his or her last name.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\";",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\";",
        "input_tokens": 2475,
        "output_tokens": 144,
        "time": 7.011144709000291,
        "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\"",
        "final_sql": "SELECT email_address FROM Professionals WHERE state = \"Hawaii\" OR state = \"Wisconsin\"",
        "input_tokens": 2491,
        "output_tokens": 175,
        "time": 6.137278666999919,
        "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "input_tokens": 2349,
        "output_tokens": 51,
        "time": 3.5307323329998326,
        "question": "What are the arriving date and the departing date of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "final_sql": "SELECT date_arrived, date_departed FROM Dogs",
        "input_tokens": 2375,
        "output_tokens": 133,
        "time": 5.480662500000108,
        "question": "List the arrival date and the departure date for all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT date_arrived ,  date_departed FROM Dogs"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "final_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "input_tokens": 2276,
        "output_tokens": 70,
        "time": 4.553474750000532,
        "question": "How many dogs went through any treatments?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT dog_id) FROM Treatments",
        "final_sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments;",
        "input_tokens": 2277,
        "output_tokens": 70,
        "time": 5.271584500000245,
        "question": "Count the number of dogs that went through a treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT dog_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)",
        "final_sql": "SELECT count(DISTINCT professional_id) FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs)",
        "input_tokens": 2494,
        "output_tokens": 215,
        "time": 7.518131208998966,
        "question": "How many professionals have performed any treatment to dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT count(DISTINCT professional_id) FROM Treatments",
        "final_sql": "SELECT COUNT(DISTINCT professional_id) FROM Treatments WHERE professional_id IS NOT NULL;",
        "input_tokens": 2398,
        "output_tokens": 110,
        "time": 5.681214999998701,
        "question": "Find the number of professionals who have ever treated dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(DISTINCT professional_id) FROM Treatments"
    },
    {
        "baseline_sql": "SELECT role, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';",
        "input_tokens": 2546,
        "output_tokens": 126,
        "time": 5.272600040998441,
        "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "final_sql": "SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%'",
        "input_tokens": 2468,
        "output_tokens": 166,
        "time": 5.919972457999393,
        "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"
    },
    {
        "baseline_sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "input_tokens": 2536,
        "output_tokens": 152,
        "time": 5.849537333000626,
        "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'",
        "final_sql": "SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%' COLLATE NOCASE;",
        "input_tokens": 2537,
        "output_tokens": 166,
        "time": 6.405222167000829,
        "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT avg(age) FROM Dogs)",
        "input_tokens": 2484,
        "output_tokens": 172,
        "time": 6.8221581669986335,
        "question": "How many dogs have an age below the average?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs)",
        "input_tokens": 2358,
        "output_tokens": 133,
        "time": 5.470557750000808,
        "question": "Count the number of dogs of an age below the average.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "input_tokens": 2408,
        "output_tokens": 181,
        "time": 6.397060249999413,
        "question": "How much does the most recent treatment cost?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "final_sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1",
        "input_tokens": 2477,
        "output_tokens": 186,
        "time": 7.012164207999376,
        "question": "Show me the cost of the most recently performed treatment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2443,
        "output_tokens": 155,
        "time": 6.291586125000322,
        "question": "How many dogs have not gone through any treatment?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "final_sql": "SELECT COUNT(*) FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments)",
        "input_tokens": 2485,
        "output_tokens": 155,
        "time": 5.790118209000866,
        "question": "Tell me the number of dogs that have not received any treatment .",
        "db_id": "dog_kennels",
        "gold_query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "final_sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs WHERE date_departed IS NULL)",
        "input_tokens": 2588,
        "output_tokens": 253,
        "time": 8.638724624999668,
        "question": "How many owners temporarily do not have any dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
        "final_sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)",
        "input_tokens": 2584,
        "output_tokens": 241,
        "time": 8.462041875000068,
        "question": "Find the number of owners who do not own any dogs at this moment.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2410,
        "output_tokens": 146,
        "time": 5.475501082999472,
        "question": "How many professionals did not operate any treatment on dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "final_sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)",
        "input_tokens": 2482,
        "output_tokens": 146,
        "time": 6.15383866600132,
        "question": "Find the number of professionals who have not treated any dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"
    },
    {
        "baseline_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1",
        "final_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1'",
        "input_tokens": 2617,
        "output_tokens": 127,
        "time": 5.302019458000359,
        "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
        "final_sql": "SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';",
        "input_tokens": 2592,
        "output_tokens": 156,
        "time": 5.693777249998675,
        "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"
    },
    {
        "baseline_sql": "SELECT avg(age) FROM Dogs",
        "final_sql": "SELECT avg(age) FROM Dogs",
        "input_tokens": 2230,
        "output_tokens": 41,
        "time": 3.397006417000739,
        "question": "What is the average age of all the dogs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT avg(age) FROM Dogs",
        "final_sql": "SELECT avg(age) FROM Dogs;",
        "input_tokens": 2243,
        "output_tokens": 60,
        "time": 4.479182208999191,
        "question": "Compute the average age of all the dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT avg(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT age FROM Dogs ORDER BY age DESC LIMIT 1",
        "final_sql": "SELECT MAX(age) FROM Dogs",
        "input_tokens": 2481,
        "output_tokens": 169,
        "time": 6.201717374999134,
        "question": "What is the age of the oldest dog?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT MAX(age) FROM Dogs",
        "final_sql": "SELECT MAX(age) FROM Dogs;",
        "input_tokens": 2340,
        "output_tokens": 95,
        "time": 4.651426166999954,
        "question": "Tell me the age of the oldest dog.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(age) FROM Dogs"
    },
    {
        "baseline_sql": "SELECT charge_type, charge_amount FROM Charges",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2353,
        "output_tokens": 56,
        "time": 3.632465917000445,
        "question": "How much does each charge type costs? List both charge type and amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT charge_type ,  charge_amount FROM Charges",
        "final_sql": "SELECT charge_type, charge_amount FROM Charges;",
        "input_tokens": 2281,
        "output_tokens": 57,
        "time": 3.4285431250009424,
        "question": "List each charge type and its amount.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT charge_type ,  charge_amount FROM Charges"
    },
    {
        "baseline_sql": "SELECT MAX(charge_amount) FROM Charges",
        "final_sql": "SELECT MAX(charge_amount) FROM Charges;",
        "input_tokens": 2220,
        "output_tokens": 42,
        "time": 3.3946230830006243,
        "question": "How much does the most expensive charge type costs?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT charge_amount FROM Charges WHERE charge_type = (SELECT charge_type FROM Charges ORDER BY charge_amount DESC LIMIT 1)",
        "final_sql": "SELECT charge_amount FROM Charges ORDER BY charge_amount DESC LIMIT 1;",
        "input_tokens": 2382,
        "output_tokens": 133,
        "time": 5.506971625000006,
        "question": "What is the charge amount of the most expensive charge type?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT max(charge_amount) FROM Charges"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2332,
        "output_tokens": 101,
        "time": 4.7536993749999965,
        "question": "List the email, cell phone and home phone of all the professionals.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT email_address, cell_number, home_phone FROM Professionals",
        "final_sql": "SELECT email_address, cell_number, home_phone FROM Professionals;",
        "input_tokens": 2341,
        "output_tokens": 66,
        "time": 4.039542083000924,
        "question": "What are the email, cell phone and home phone of each professional?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals"
    },
    {
        "baseline_sql": "SELECT b.breed_code, b.breed_name, s.size_code, s.size_description\nFROM Breeds b, Sizes s",
        "final_sql": "SELECT b.breed_code, b.breed_name, s.size_code, s.size_description FROM Breeds b, Sizes s;",
        "input_tokens": 2460,
        "output_tokens": 153,
        "time": 6.092950457999905,
        "question": "What are all the possible breed type and size type combinations?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d",
        "final_sql": "SELECT DISTINCT d.breed_code, d.size_code FROM Dogs d",
        "input_tokens": 2309,
        "output_tokens": 68,
        "time": 605.1046306249991,
        "question": "Find the distinct breed type and size type combinations for dogs.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs"
    },
    {
        "baseline_sql": "SELECT P.first_name, TT.treatment_type_description\nFROM Professionals P\nJOIN Treatments T ON P.professional_id = T.professional_id\nJOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "final_sql": "SELECT P.first_name, TT.treatment_type_description FROM Professionals P JOIN Treatments T ON P.professional_id = T.professional_id JOIN Treatment_Types TT ON T.treatment_type_code = TT.treatment_type_code;",
        "input_tokens": 2587,
        "output_tokens": 253,
        "time": 9.382815332999598,
        "question": "List the first name of all the professionals along with the description of the treatment they have done.",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT T1.first_name, T3.treatment_type_description \nFROM Professionals AS T1 \nJOIN Treatments AS T2 ON T1.professional_id = T2.professional_id \nJOIN Treatment_Types AS T3 ON T2.treatment_type_code = T3.treatment_type_code",
        "final_sql": "SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;",
        "input_tokens": 2682,
        "output_tokens": 254,
        "time": 8.850239249999504,
        "question": "What are each professional's first name and description of the treatment they have performed?",
        "db_id": "dog_kennels",
        "gold_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"
    },
    {
        "baseline_sql": "SELECT count(*) FROM singer",
        "final_sql": "SELECT count(*) FROM singer;",
        "input_tokens": 948,
        "output_tokens": 71,
        "time": 5.473914749998585,
        "question": "How many singers are there?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT COUNT(*) FROM singer",
        "final_sql": "SELECT COUNT(*) FROM singer;",
        "input_tokens": 1006,
        "output_tokens": 90,
        "time": 7.536478666999756,
        "question": "What is the count of singers?",
        "db_id": "singer",
        "gold_query": "SELECT count(*) FROM singer"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "input_tokens": 1116,
        "output_tokens": 134,
        "time": 5.67648737500167,
        "question": "List the name of singers in ascending order of net worth.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC",
        "input_tokens": 1120,
        "output_tokens": 134,
        "time": 7.011103582999567,
        "question": "What are the names of singers ordered by ascending net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship FROM singer",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 1014,
        "output_tokens": 81,
        "time": 5.7768783749997965,
        "question": "What are the birth year and citizenship of singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Birth_Year, Citizenship FROM singer",
        "final_sql": "SELECT Birth_Year, Citizenship FROM singer;",
        "input_tokens": 1088,
        "output_tokens": 81,
        "time": 4.650211500000296,
        "question": "What are the birth years and citizenships of the singers?",
        "db_id": "singer",
        "gold_query": "SELECT Birth_Year ,  Citizenship FROM singer"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship != \"France\"",
        "input_tokens": 1085,
        "output_tokens": 126,
        "time": 5.887199667000459,
        "question": "List the name of singers whose citizenship is not \"France\".",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Citizenship <> \"French\"",
        "final_sql": "SELECT Name FROM singer WHERE Citizenship <> \"French\"",
        "input_tokens": 1080,
        "output_tokens": 90,
        "time": 4.933515041000646,
        "question": "What are the names of the singers who are not French citizens?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Citizenship != \"France\""
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1163,
        "output_tokens": 135,
        "time": 5.704637541999546,
        "question": "Show the name of singers whose birth year is either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949",
        "final_sql": "SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;",
        "input_tokens": 1197,
        "output_tokens": 135,
        "time": 6.808855708999545,
        "question": "What are the names of the singers whose birth years are either 1948 or 1949?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;",
        "input_tokens": 1353,
        "output_tokens": 254,
        "time": 9.161099875000218,
        "question": "What is the name of the singer with the largest net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "final_sql": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1",
        "input_tokens": 1217,
        "output_tokens": 203,
        "time": 7.529520792000767,
        "question": "What is the name of the singer who is worth the most?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship;",
        "input_tokens": 1186,
        "output_tokens": 121,
        "time": 5.062340666998352,
        "question": "Show different citizenship of singers and the number of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT citizenship, count(*) FROM singer GROUP BY citizenship",
        "final_sql": "SELECT citizenship, count(*) FROM singer GROUP BY citizenship;",
        "input_tokens": 1187,
        "output_tokens": 157,
        "time": 5.890465874999791,
        "question": "For each citizenship, how many singers are from that country?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "final_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1",
        "input_tokens": 1194,
        "output_tokens": 174,
        "time": 6.852308749999793,
        "question": "Please show the most common citizenship of singers.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1",
        "final_sql": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY count(*) DESC LIMIT 1;",
        "input_tokens": 1203,
        "output_tokens": 183,
        "time": 6.561584332999701,
        "question": "What is the most common singer citizenship ?",
        "db_id": "singer",
        "gold_query": "select citizenship from singer group by citizenship order by count(*) desc limit 1"
    },
    {
        "baseline_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship;",
        "input_tokens": 1158,
        "output_tokens": 137,
        "time": 5.094168458999775,
        "question": "Show different citizenships and the maximum net worth of singers of each citizenship.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "final_sql": "SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship",
        "input_tokens": 1159,
        "output_tokens": 134,
        "time": 5.548959165998895,
        "question": "For each citizenship, what is the maximum net worth?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"
    },
    {
        "baseline_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID",
        "input_tokens": 1172,
        "output_tokens": 146,
        "time": 6.399849916000676,
        "question": "Show titles of songs and names of singers.",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT song.title, singer.name FROM song JOIN singer ON song.singer_id = singer.singer_id;",
        "final_sql": "SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;",
        "input_tokens": 1074,
        "output_tokens": 148,
        "time": 5.985426416998962,
        "question": "What are the song titles and singer names?",
        "db_id": "singer",
        "gold_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"
    },
    {
        "baseline_sql": "SELECT DISTINCT Singer.Name FROM Singer JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Sales > 300000",
        "final_sql": "SELECT DISTINCT Singer.Name FROM Singer JOIN Song ON Singer.Singer_ID = Song.Singer_ID WHERE Song.Sales > 300000;",
        "input_tokens": 1322,
        "output_tokens": 190,
        "time": 7.216052833000504,
        "question": "Show distinct names of singers that have songs with sales more than 300000.",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000;",
        "final_sql": "SELECT DISTINCT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID WHERE song.Sales > 300000;",
        "input_tokens": 1359,
        "output_tokens": 233,
        "time": 8.039834666999013,
        "question": "what are the different names of the singers that have sales more than 300000?",
        "db_id": "singer",
        "gold_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"
    },
    {
        "baseline_sql": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(*) > 1 )",
        "input_tokens": 1372,
        "output_tokens": 238,
        "time": 8.746432165999067,
        "question": "Show the names of singers that have more than one song.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1;",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID IN (   SELECT Singer_ID   FROM song   GROUP BY Singer_ID   HAVING COUNT(Song_ID) > 1 );",
        "input_tokens": 1370,
        "output_tokens": 271,
        "time": 9.0561864170013,
        "question": "What are the names of the singers that have more than one songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"
    },
    {
        "baseline_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name",
        "final_sql": "SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name",
        "input_tokens": 1292,
        "output_tokens": 198,
        "time": 7.317646166000486,
        "question": "Show the names of singers and the total sales of their songs.",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT singer.Name, SUM(song.Sales) AS total_sales\nFROM singer\nJOIN song ON singer.Singer_ID = song.Singer_ID\nGROUP BY singer.Name",
        "final_sql": "SELECT singer.Name, SUM(song.Sales) AS total_sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;",
        "input_tokens": 1244,
        "output_tokens": 168,
        "time": 6.704786542000875,
        "question": "For each singer name, what is the total sales for their songs?",
        "db_id": "singer",
        "gold_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"
    },
    {
        "baseline_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "final_sql": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "input_tokens": 1168,
        "output_tokens": 176,
        "time": 6.807241915999839,
        "question": "List the name of singers that do not have any song.",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT sname FROM sing WHERE sid NOT IN (SELECT sid FROM song)",
        "final_sql": "SELECT Name AS sname FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)",
        "input_tokens": 1171,
        "output_tokens": 179,
        "time": 6.597124083000381,
        "question": "What is the sname of every sing that does not have any song?",
        "db_id": "singer",
        "gold_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955",
        "final_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955;",
        "input_tokens": 1327,
        "output_tokens": 218,
        "time": 7.53475329200046,
        "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT Citizenship FROM singer WHERE Birth_Year < 1945 OR Birth_Year > 1955",
        "final_sql": "SELECT DISTINCT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;",
        "input_tokens": 1367,
        "output_tokens": 238,
        "time": 8.546568332998504,
        "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?",
        "db_id": "singer",
        "gold_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"
    },
    {
        "baseline_sql": "SELECT count(*) FROM Other_Available_Features",
        "final_sql": "SELECT count(*) FROM Other_Available_Features;",
        "input_tokens": 1915,
        "output_tokens": 82,
        "time": 4.759921915998348,
        "question": "How many available features are there in total?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT count(*) FROM Other_Available_Features"
    },
    {
        "baseline_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (SELECT feature_type_code FROM Other_Available_Features WHERE feature_name = 'AirCon')",
        "final_sql": "SELECT feature_type_name FROM Ref_Feature_Types WHERE feature_type_code IN (   SELECT feature_type_code   FROM Other_Available_Features   WHERE feature_name = 'AirCon' )",
        "input_tokens": 2325,
        "output_tokens": 280,
        "time": 9.470100000000457,
        "question": "What is the feature type name of feature AirCon?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""
    },
    {
        "baseline_sql": "SELECT DISTINCT property_type_description FROM Ref_Property_Types\nJOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code\nWHERE Properties.property_type_code = \"PUR\"",
        "final_sql": "SELECT DISTINCT property_type_description FROM Ref_Property_Types JOIN Properties ON Ref_Property_Types.property_type_code = Properties.property_type_code WHERE Properties.property_type_code = \"PUR\"",
        "input_tokens": 2096,
        "output_tokens": 196,
        "time": 7.519990000000689,
        "question": "Show the property type descriptions of properties belonging to that code.",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"
    },
    {
        "baseline_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1",
        "final_sql": "SELECT property_name FROM Properties WHERE (property_type_code = 'house' OR property_type_code = 'apartment') AND room_count > 1;",
        "input_tokens": 2169,
        "output_tokens": 203,
        "time": 10.288077832999988,
        "question": "What are the names of properties that are either houses or apartments with more than 1 room?",
        "db_id": "real_estate_properties",
        "gold_query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"
    }
]